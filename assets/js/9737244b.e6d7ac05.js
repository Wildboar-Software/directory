"use strict";(self.webpackChunkdirectory=self.webpackChunkdirectory||[]).push([[605],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>p});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=d(n),p=a,m=u["".concat(l,".").concat(p)]||u[p]||c[p]||r;return n?i.createElement(m,o(o({ref:t},h),{},{components:n})):i.createElement(m,o({ref:t},h))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1894:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>h});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],s={},l="Distributed / Chained Operations",d={unversionedId:"distributed",id:"distributed",title:"Distributed / Chained Operations",description:"Authentication of Distributed Operations",source:"@site/docs/distributed.md",sourceDirName:".",slug:"/distributed",permalink:"/directory/docs/distributed",editUrl:"https://github.com/Wildboar-Software/directory/edit/main/website/docs/distributed.md",tags:[],version:"current",frontMatter:{}},h=[{value:"Authentication of Distributed Operations",id:"authentication-of-distributed-operations",children:[{value:"Identity-Based Requester Authentication",id:"identity-based-requester-authentication",children:[],level:3},{value:"Signature-Based Requester Authentication",id:"signature-based-requester-authentication",children:[],level:3}],level:2},{value:"Restrictions that Apply to Both",id:"restrictions-that-apply-to-both",children:[],level:2},{value:"Handling of Invalid Signatures",id:"handling-of-invalid-signatures",children:[],level:2},{value:"Authentication to Other DSAs",id:"authentication-to-other-dsas",children:[],level:2}],c={toc:h};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"distributed--chained-operations"},"Distributed / Chained Operations"),(0,r.kt)("h2",{id:"authentication-of-distributed-operations"},"Authentication of Distributed Operations"),(0,r.kt)("p",null,"There are two ways defined for a DSA to authenticate the original requester of\na chained operation: either by trusted the ",(0,r.kt)("inlineCode",{parentName:"p"},"originator")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"authenticationLevel"),"\nasserted by a remote DSA in its ",(0,r.kt)("inlineCode",{parentName:"p"},"ChainingArguments")," by fiat (which is called\nIdentity-Based Requester Authentication (IBRA)), or by validating\ndigital signatures on signed DAP arguments (which is called Signature-Based\nRequester Authentication (SBRA)). The latter is obviously more secure\nthan the former. These are described in\n",(0,r.kt)("a",{parentName:"p",href:"https://www.itu.int/rec/T-REC-X.518/en"},"ITU Recommendation X.518 (2019)"),",\nSection 22."),(0,r.kt)("h3",{id:"identity-based-requester-authentication"},"Identity-Based Requester Authentication"),(0,r.kt)("p",null,"In Meerkat DSA, the only way to accept a new proposed operational binding\n(currently) is via the ",(0,r.kt)("a",{parentName:"p",href:"/directory/docs/webadmin"},"web administration console"),'. When you\naccept an operational binding in the "Operational Bindings" section, you will\nbe able to check a box that indicates that the proposing DSA will be trusted\nfor Identity-Based Requester Authentication.'),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This is a dangerous setting, because it means that you will trust that DSA to\nhonestly indicate the originator and authentication level. Do NOT enable this\nunless you completely trust the other DSA will ALL information in your DSA!"))),(0,r.kt)("h3",{id:"signature-based-requester-authentication"},"Signature-Based Requester Authentication"),(0,r.kt)("p",null,"Unless you intentionally disable all signature validation (not recommended),\nSignature-Based Requester Authentication (SBRA) is ",(0,r.kt)("em",{parentName:"p"},"always")," enabled. If the\nsignature on the original DAP operation is cryptographically signed and this\nsignature is trustworthy according to the\n",(0,r.kt)("a",{parentName:"p",href:"/directory/docs/signing#configuring-signing"},"trust anchors configured for signing"),',\nMeerkat DSA will use the subject of the end entity certificate as the requester\nand will attribute an authentication level of "strong" to the requester, since\na valid signed argument is effectively as good as strong authentication, ',(0,r.kt)("em",{parentName:"p"},"subject to the\nrestrictions below"),"."),(0,r.kt)("p",null,"In other words, if the DAP argument is signed, the requester's authentication\nlevel will (subject to the restrictions that follow), be equal to this\n",(0,r.kt)("inlineCode",{parentName:"p"},"AuthenticationLevel"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asn1"},"withSignedDAPArgument AuthenticationLevel ::= {\n  basicLevels {\n    level strong,\n    signed TRUE\n  }\n}\n")),(0,r.kt)("h2",{id:"restrictions-that-apply-to-both"},"Restrictions that Apply to Both"),(0,r.kt)("p",null,"The effective authentication level for a user will be ",(0,r.kt)("em",{parentName:"p"},"the lesser of the level\nand localQualifier"),' for the DAP originator and the client DSA. This is not a\nrequirement of the X.500 specifications, but a nuance of how Meerkat DSA\noperates. For example, if a requester authenticates using strong authentication,\nbut the operation is chained via a DSA that anonymously binds to another DSA to\ncontinue the operation, the request is effectively considered "anonymous,"\ndespite the original user\'s strong authentication.'),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},'The rationale for this is that the real authentication level of a request could\nbe argued to be the authentication of the "weakest link" as a request traverses\none or more DSAs. Therefore, if a user authenticates using strong authentication,\nbut a DSA chains their operation by authenticating to another DSA with only a\npassword, the request itself is only as authenticated as a password.'),(0,r.kt)("p",{parentName:"div"},"This was a design choice in line with Meerkat DSA's philosophy: whenever an\nambiguity exists in the specification, pick the more secure interpretation."))),(0,r.kt)("p",null,'For this reason, it is important for DSAs that cooperate to perform chaining\nshould all use strong authentication and TLS, so that the authentication levels\nof chained operations do not get "downgraded" in the eyes of Meerkat DSA.'),(0,r.kt)("h2",{id:"handling-of-invalid-signatures"},"Handling of Invalid Signatures"),(0,r.kt)("p",null,"Invalid / untrusted signatures on arguments are not immediately treated as\nfailures by Meerkat DSA, because signed operations that are given to a DSA may\nend up being chained to another DSA. The DSA that initially receives the signed\narguments may not be the one that actually performs the operation. However,\naccess controls are still an important aspect of name resolution. Meerkat DSA\nhas to decide, before the operation is chained to another DSA, whether a bound\nDUA even has permission to know of the existence of a given subordinate\nreference, for instance."),(0,r.kt)("p",null,"For this reason, when a digital signature is invalid in the eyes of a given\nMeerkat DSA instance, the authentication level attributed to the request is\ndowngraded, such that ",(0,r.kt)("inlineCode",{parentName:"p"},"signed")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"FALSE"),", and the operation proceeds with the\nresulting authentication level. This means that the Find DSE procedure may\ntraverse subtrees of the DIT that are only discoverable to, say,\npassword-authenticated users, but not ones that require valid signed arguments.\nOnce the target entry is located, and operation execution has begun, the\nperforming DSA (assuming it is a Meerkat DSA instance) will check if the\nargument is signed, but the authentication level's ",(0,r.kt)("inlineCode",{parentName:"p"},"signed")," component is set to\n",(0,r.kt)("inlineCode",{parentName:"p"},"FALSE"),", which indicates that the signature is invalid. If this is the case, it\nmeans that the signature was determined to be invalid earlier (in the request\nvalidation procedure), and at that point, the operation will fail with an error,\nindicating that the signature is invalid."),(0,r.kt)("p",null,"That was a mouthful. To summarize: the digital signature is checked by each\nMeerkat DSA instance in a distributed operation, and if the signature is\ninvalid, the authentication level is silently downgraded to reflect that, but\nthe operation continues. If the Meerkat DSA instance that actually performs the\noperation (as opposed to merely chaining the operation to another DSA) has\ndetermined that the signature is invalid, an error is returned."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To be clear, the above only applies to Meerkat DSA. This behavior is not\nspecified in the X.500 specifications, so other DSA implementations may not\nconform to the behavior described above."))),(0,r.kt)("h2",{id:"authentication-to-other-dsas"},"Authentication to Other DSAs"),(0,r.kt)("p",null,"If signing is configured, Meerkat DSA will use its signing certificate and key\nto attempt strong authentication to every single DSA to which it chains. If this\nfails, Meerkat DSA will attempt credentials that are stored in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"AccessPointCredentials")," table in the DBMS, if the targeted access point has\nconfigured credentials stored there. Otherwise, one last attempt will be made\nwith an anonymous bind."),(0,r.kt)("p",null,"Populating the ",(0,r.kt)("inlineCode",{parentName:"p"},"AccessPointCredentials")," table has to be done manually. There is\nno way to do this using Meerkat DSA (including the web admin console), currently."))}u.isMDXComponent=!0}}]);