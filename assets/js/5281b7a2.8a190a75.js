"use strict";(self.webpackChunkdirectory=self.webpackChunkdirectory||[]).push([[5927],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=i.createContext({}),c=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return i.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,m=p["".concat(d,".").concat(h)]||p[h]||u[h]||a;return n?i.createElement(m,o(o({ref:t},l),{},{components:n})):i.createElement(m,o({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6780:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],s={},d="Architecture",c={unversionedId:"architecture",id:"architecture",title:"Architecture",description:"Representation of the Distinguished Names in Persistent Storage",source:"@site/docs/architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/directory/docs/architecture",draft:!1,editUrl:"https://github.com/Wildboar-Software/directory/edit/main/website/docs/architecture.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Information Disclosure",permalink:"/directory/docs/information-disclosure"},next:{title:"Roadmap",permalink:"/directory/docs/roadmap"}},l={},u=[{value:"Representation of the Distinguished Names in Persistent Storage",id:"representation-of-the-distinguished-names-in-persistent-storage",level:2},{value:"Why Not a Document-Oriented Database?",id:"why-not-a-document-oriented-database",level:2},{value:"Why do Materialized Paths end with a period?",id:"why-do-materialized-paths-end-with-a-period",level:2},{value:"Functional Programming",id:"functional-programming",level:2},{value:"X.518 Procedures",id:"x518-procedures",level:2},{value:"Why target ES2019?",id:"why-target-es2019",level:2}],p={toc:u};function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"architecture"},"Architecture"),(0,a.kt)("h2",{id:"representation-of-the-distinguished-names-in-persistent-storage"},"Representation of the Distinguished Names in Persistent Storage"),(0,a.kt)("p",null,"Directory names do not lend themselves to easy storage and searching in a\ntraditional database, because the same attribute values may be encoded in\nmultiple different ways. For instance, strings may be constructed, defaulting\nfields of constructed types may be omitted or included, and different types\nof length encoding (definite form and indefinite form) may be used. This means\nthat, in many cases, values can only be stored in the database, but must be\nextracted to be evaluated in memory using more sophisticated functions that\nno database provides."),(0,a.kt)("p",null,"This differs from how OpenLDAP represents distinguished names when using the\nSQL backend: the distinguished name is treated as a string and used as a\nmaterialized path."),(0,a.kt)("h2",{id:"why-not-a-document-oriented-database"},"Why Not a Document-Oriented Database?"),(0,a.kt)("p",null,"I wanted Meerkat DSA to support multiple different databases, which I thought\nI would be able to do using Prisma. However, it turns out that Prisma does not\nlend itself to multiple different databases very well. This part just turned\nout to have been a mistake."),(0,a.kt)("p",null,"However, I also wanted Meerkat DSA to store data in a form that could be\nanalyzed, exported, and inspected using popular tools. Databases such as\nMongoDB would have been fine (great, even) for storing and searching directory\ndata, but the tooling around them is limited. There is a lot of existing tools\nfor analyzing data that is stored in relational databases."),(0,a.kt)("p",null,"That said, I still wish that I had used MongoDB. MongoDB's dynamism lends\nitself better to representing attribute values of multiple different types.\nIn fact, if MongoDB were used in the first place, attribute drivers would be\nalmost entirely unnecessary."),(0,a.kt)("h2",{id:"why-do-materialized-paths-end-with-a-period"},"Why do Materialized Paths end with a period?"),(0,a.kt)("p",null,"If they did not, searching for ",(0,a.kt)("inlineCode",{parentName:"p"},"1.2.3")," would also turn up results for ",(0,a.kt)("inlineCode",{parentName:"p"},"1.2.31"),"."),(0,a.kt)("h2",{id:"functional-programming"},"Functional Programming"),(0,a.kt)("p",null,'Meerkat DSA uses almost exclusively functional programming. Almost every\nfunction takes a "context object." The context object is like the context\nobject in Functions-as-a-Service (FaaS) functions, like AWS Lambda functions or\nAzure Functions. This context object has pretty much everything that any\nfunction would need implicitly within a directory application: logs,\nconfiguration, telemetry, all current connections, the database client, and\nknowledge of all directory schema.'),(0,a.kt)("p",null,'This looks sort of like a reducer pattern, but it is not quite, since not every\nfunction mutates or even uses the context object. It is used sort of like what\nI would call "poor man\'s dependency injection." Rather than resolving the\ndependencies at run time, the context object pattern is type-safe at\nbuild-time.'),(0,a.kt)("p",null,'The advantage of this pattern is that it makes functions "pure" (or at least\ncloser to it). You don\'t need to import the logger, for instance, it is passed\ninto every function as an argument via the context object. It is also very easy\nfor every function to get access to whatever it needs. Almost every function\nhas access to the context object and can pass it down to functions that it\ncalls.'),(0,a.kt)("p",null,"Examples of this pattern can be seen in OpenSSL and Postfix."),(0,a.kt)("p",null,"Another advantage of this pattern is that, configuration information is\nsometimes not available in an immediately useful format. Take X.509 certificates\nfor example. They are not stored in a format that can be copied-and-pasted\ndirectly into memory: they have to be decoded / deserialized. To add to this,\nthey are often PEM-encoded too. If every function directly read configuration\nfrom a configuration file, every usage of a given X.509 certificate would\nrequire removing the PEM encoding, then parsing the resulting DER encoding."),(0,a.kt)("p",null,'Instead, this "context object" pattern abstracts away the configuration from the\nmedium in which it is stored. Configuration in the context object is always\nkept in its most readily useful form. On start up, this context object is\npopulated once from the configuration source, whether it is a file, environment\nvariables, or something else.'),(0,a.kt)("h2",{id:"x518-procedures"},"X.518 Procedures"),(0,a.kt)("p",null,"Almost all of the procedures in ITU Recommendation X.518 are represented as a\nfunction in ",(0,a.kt)("inlineCode",{parentName:"p"},"apps/meerkat/src/app/distributed/"),". Meerkat DSA tries to implement\nthese procedures as they are specified, even if contemporary coding practices\nwould lend themselves to different implementations. This is most notable in the\nFind DSE procedure, which was implemented the way I imagine such a\nprocedure would be implemented in C rather than in TypeScript."),(0,a.kt)("p",null,"The benefit of doing this is the avoidance of bugs resulting from incorrect\nimplementation and that most of the code in ",(0,a.kt)("inlineCode",{parentName:"p"},"apps/meerkat/src/app/distributed/"),'\nis effectively "already documented" by the steps of the procedures defined in\nITU Recommendation X.518.'),(0,a.kt)("h2",{id:"why-target-es2019"},"Why target ES2019?"),(0,a.kt)("p",null,"As of the current version of Nx and/or Webpack I am using, optional chaining\ngets ",(0,a.kt)("em",{parentName:"p"},"removed")," from the transpiled output if you use ES2020 or higher as your\nbuild target. I think this should be fixed with an update to the latest version\nof Nx."))}h.isMDXComponent=!0}}]);