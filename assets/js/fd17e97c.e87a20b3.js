"use strict";(self.webpackChunkdirectory=self.webpackChunkdirectory||[]).push([[791],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=d(n),p=i,m=h["".concat(l,".").concat(p)]||h[p]||c[p]||r;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5057:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>h});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={},l="Deep Dive",d={unversionedId:"deep-dive",id:"deep-dive",title:"Deep Dive",description:"Executive Summary",source:"@site/docs/deep-dive.md",sourceDirName:".",slug:"/deep-dive",permalink:"/directory/docs/deep-dive",draft:!1,editUrl:"https://github.com/Wildboar-Software/directory/edit/main/website/docs/deep-dive.md",tags:[],version:"current",frontMatter:{}},u={},h=[{value:"Executive Summary",id:"executive-summary",level:2},{value:"The Problem It Solves",id:"the-problem-it-solves",level:3},{value:"The Future",id:"the-future",level:3},{value:"Other Executive Summaries",id:"other-executive-summaries",level:3},{value:"User&#39;s Deep Dive",id:"users-deep-dive",level:2},{value:"Object Identifiers",id:"object-identifiers",level:3},{value:"Information Model",id:"information-model",level:3},{value:"Entries and Attributes",id:"entries-and-attributes",level:4},{value:"Context Types",id:"context-types",level:4},{value:"The Directory Information Tree",id:"the-directory-information-tree",level:4},{value:"Names",id:"names",level:4},{value:"Schema",id:"schema",level:4},{value:"Matching Rules",id:"matching-rules",level:4},{value:"Compound Entries",id:"compound-entries",level:4},{value:"Hierarchical Groups",id:"hierarchical-groups",level:4},{value:"Collective Attributes",id:"collective-attributes",level:4},{value:"Usage",id:"usage",level:3},{value:"ROSE Protocols and Transport",id:"rose-protocols-and-transport",level:4},{value:"Binding",id:"binding",level:4},{value:"The DAP Operations",id:"the-dap-operations",level:4},{value:"Chaining",id:"chaining",level:4},{value:"Shadowing",id:"shadowing",level:4},{value:"Relaxation",id:"relaxation",level:4},{value:"Signing",id:"signing",level:4},{value:"Administrator&#39;s Deep Dive",id:"administrators-deep-dive",level:2},{value:"Administrative Areas",id:"administrative-areas",level:3},{value:"Access Control",id:"access-control",level:3},{value:"Context Assertion Defaults",id:"context-assertion-defaults",level:3}],c={toc:h};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deep-dive"},"Deep Dive"),(0,r.kt)("h2",{id:"executive-summary"},"Executive Summary"),(0,r.kt)("p",null,'The X.500 directory is a technology for producing a global, distributed database\n(although it can be used exclusively privately as well). It is "distributed" in\nthe sense that the data can be split across a nearly infinite number of\nindependent servers.'),(0,r.kt)("p",null,"The way that data is represented in an X.500 directory lends itself to great\nflexibility. An X.500 directory has features that make it like a time-series\ndatabase, a graph database, a document-oriented database, and a relational\ndatabase, all in one. It is designed primarily to store information about\npeople and organizations, but it can store any kind of data."),(0,r.kt)("h3",{id:"the-problem-it-solves"},"The Problem It Solves"),(0,r.kt)("p",null,"Databases already exist, and they already have access controls, sharding,\nauthentication, integrity at rest, and so on. However, many organizations still\nfeel the need to put a REST API between end users and the database, which\ndemonstrates some fundamental shortcoming of existing solutions. Existing\nsolutions fall short in these respects, in which X.500 directories excel:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Standardized implementations with expectations of interoperability."),' X.500\nis a series of standards. Implementations of X.500 directories are generally\ninteroperable, if well-constructed. There is no "MySQL standard" or "Postgres\nstandard" where you could implement your own alternative and expect future\ncompatibility with all other implementations. Abundance of implementations\nmeans more options, better security, and a better ecosystem.'),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Advanced access controls.")," In many databases, access controls can\nconstrain who has access to particular collections, documents, columns,\ntables, and so on, but X.500 directories can regulate specific values, use\ngroups as layer of indirection, and regulate complex selections of the data."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Designed to be split across domains of trust.")," Unlike database sharding,\nX.500 directories are designed to confederate data across the\norganizational boundary. Organizations can share their data, and even let\nothers modify it, but control who, how, when, and so on."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Directly usable by end users."),' Traditional databases often store or\npresent data in a format that is not directly usable by end users. For this\nreason, custom REST APIs and web apps are created to convert a\nmess of relational tables into composed, meaningful "objects" representing\nreal world things. In X.500 directories, the data is already stored in this\nmanner: X.500 directories model data as real world things, and they are\nbrowseable by human-friendly names like ',(0,r.kt)("inlineCode",{parentName:"li"},"CN=Jonathan M. Wilbur")," rather than\nUUIDs or serial numbers. You do not need to re-invent the wheel when you\nalready have a Porsche waiting for you.")),(0,r.kt)("p",null,"There are a few other benefits that are simply too technical for an executive\nsummary, but the above should be sufficient."),(0,r.kt)("h3",{id:"the-future"},"The Future"),(0,r.kt)("p",null,'The X.500 specifications were conceived in the late 1980s by the\nInternational Telecommunications Union with the intent of creating a sort of\n"distributed, global phonebook," and, admittedly, they had much more traction\nback then. However, if you research why the enthusiasm waned, you\'ll find that\nmuch of it is for reasons that are no longer applicable. X.500 directories are\nthought of as "legacy" mistakenly: I believe they are the ',(0,r.kt)("em",{parentName:"p"},"future"),". There are\ntechnologies that died off because they are objectively inferior, such as\nfloppy disks, and there are those that were dormat for a long time simply\nbecause they were invented before their time."),(0,r.kt)("h3",{id:"other-executive-summaries"},"Other Executive Summaries"),(0,r.kt)("p",null,"In addition to the above summary, other executive summaries of X.500 directory\nservices can be found in:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.itu.int/rec/T-REC-X.500/en"},"ITU Recommendation X.500 (2019)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.rfc-editor.org/rfc/rfc1308.html"},"IETF RFC 1308"))),(0,r.kt)("h2",{id:"users-deep-dive"},"User's Deep Dive"),(0,r.kt)("p",null,"The X.500 specifications are so rich in features that it can seem difficult to\nbreak into it. This is a brief explanation of X.500 concepts for a user to\nmeaningfully use an X.500 directory."),(0,r.kt)("h3",{id:"object-identifiers"},"Object Identifiers"),(0,r.kt)("p",null,"X.500 directories use object identifiers to identify almost everything, so\nunderstanding what they are is important. If you finish reading this section\nunderstanding nothing else, understand that ",(0,r.kt)("em",{parentName:"p"},"object identifiers are\nglobally-unique, numeric identifiers.")),(0,r.kt)("p",null,"Object identifiers are composed of an ordered sequence of non-negative integers,\nsuch as ",(0,r.kt)("inlineCode",{parentName:"p"},"2.5.4.3"),". Each number in this list, called an ",(0,r.kt)("em",{parentName:"p"},"arc"),", identifies\n",(0,r.kt)("em",{parentName:"p"},"something"),". Arcs can be associated with a textual identifier, called a\n",(0,r.kt)("em",{parentName:"p"},"descriptor"),", but these are optional and only serve to enhance readability."),(0,r.kt)("p",null,"The first number is the root arc, which can have the values ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),", exclusively. Each root arc is associated with and self-assigned to\none of three international standards organizations. These organizations define\nobject identifier arcs beneath the roots, which may be granted / delegated to\nother organizations; these secondhand organizations may then grant arcs beneath\ntheirs to other organizations, recursively."),(0,r.kt)("p",null,'There is no universal process for "registering" an object identifier. If you or\nyour organization define an object identifier, you just simply ',(0,r.kt)("em",{parentName:"p"},"publish\nwhat it means somewhere"),". You can obtain an object identifier arc of your own\nby registering with certain organizations. The Internet Assigned Numbers\nAuthority (IANA), gives away free object identifier arcs under ",(0,r.kt)("inlineCode",{parentName:"p"},"1.3.6.1.4.1"),',\nwhich it calls "Private Enterprise Numbers." The Private Enterprise Number for\nWildboar Software is ',(0,r.kt)("inlineCode",{parentName:"p"},"56490"),", meaning that the object identifier is\n",(0,r.kt)("inlineCode",{parentName:"p"},"1.3.6.1.4.1.56490"),". This means that Wildboar Software is free to define all\nobject identifiers that start with ",(0,r.kt)("inlineCode",{parentName:"p"},"1.3.6.1.4.1.56490"),"."),(0,r.kt)("p",null,"With this out of the way, we can go over how an X.500 directory presents its\ninformation."),(0,r.kt)("h3",{id:"information-model"},"Information Model"),(0,r.kt)("h4",{id:"entries-and-attributes"},"Entries and Attributes"),(0,r.kt)("p",null,"Directories represent information as ",(0,r.kt)("em",{parentName:"p"},"entries"),". Entries represent real-world\nobjects, such as a person, organization, device, etc. Entries are represented\nlike documents in a document-oriented database, or a row in a relational\ndatabase or spreadsheet."),(0,r.kt)("p",null,"Entries are composed of ",(0,r.kt)("em",{parentName:"p"},"attributes"),', which represent aspects of the real-world\nobject. If the entry represents a person, it might have a "first name"\nattribute; if the entry represents a device, it might have a "serial number"\nattribute; if the entry represents an organization, it might have a\n"phone number" attribute. Attributes are like the columns in a relational\ndatabase or spreadsheet, or like the fields of a document in a document-oriented\ndatabase. Attributes are identified by an ',(0,r.kt)("em",{parentName:"p"},"attribute type"),', which is a\nglobally-unique, numeric identifier. As a user of the X.500 directory, you do\nnot need to know or memorize these identifiers: it is expected that whatever\ntool you use to browse the X.500 directory will translate these object\nidentifiers into human-friendly names, such as "First Name" or "Serial Number."\nObject identifiers that are unrecognized by your tooling can be searched for on\nwebsites like ',(0,r.kt)("a",{parentName:"p",href:"http://www.oid-info.com/"},"this")," if your tooling does not already\ndo this for you."),(0,r.kt)("p",null,"Attributes contain one or more ",(0,r.kt)("em",{parentName:"p"},"values"),", reflecting that some attributes of\nreal world attributes may have multiple values. A person may have multiple email\naddresses, or an organization might have multiple mailing addresses, for\ninstance. Some attributes may be defined in such a way as to only permit a\nsingle value, however; this is generally only used when it is known with\ncertainty that only a single value could ever apply, such as in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"createTimestamp")," attribute, which indicates the time at which a directory\nentry was created."),(0,r.kt)("p",null,"As part of an attribute's definition, an attribute may be defined to have a\nspecific syntax; for instance, the ",(0,r.kt)("inlineCode",{parentName:"p"},"telephoneNumber")," attribute type is defined\nto have a telephone number as its syntax. A user cannot insert a value of the\n",(0,r.kt)("inlineCode",{parentName:"p"},"telephoneNumber"),' attribute into a well-behaved directory server that is not a\nvalid telephone number. In addition, there may be rules specified for how values\nof such an attribute type are to be compared, sorted, or searched (called\n"matching rules"), as well as whether users are able to modify values of a given\nattribute type or whether they should be managed by the directory server itself.'),(0,r.kt)("p",null,"The attribute type definition can also indicate whether the attribute's purpose\nis to be used by the end user of the directory, making it a ",(0,r.kt)("em",{parentName:"p"},"user attribute"),", or\nwhether the attribute is for the directory's internal operation, which is called\nan ",(0,r.kt)("em",{parentName:"p"},"operational attribute"),". Yes, X.500 directories use entries and attributes to\nmanage their own configuration!"),(0,r.kt)("p",null,"Attribute types may be defined to be ",(0,r.kt)("em",{parentName:"p"},"dummy"),' attributes, which are kind of like\n"aliases" to one or more other attributes, or labeled as "obsolete," preventing\nthem from being added to the directory any further.'),(0,r.kt)("p",null,"An attribute type may be defined as a ",(0,r.kt)("em",{parentName:"p"},"subtype")," of another. For instance, the\n",(0,r.kt)("inlineCode",{parentName:"p"},"mobileTelephoneNumber")," attribute type is defined as a subtype of\n",(0,r.kt)("inlineCode",{parentName:"p"},"telephoneNumber"),". This means that, if you query the X.500 directory for the\n",(0,r.kt)("inlineCode",{parentName:"p"},"telephoneNumber")," of a person, the directory will return values of the\n",(0,r.kt)("inlineCode",{parentName:"p"},"telephoneNumber")," attribute as well as the ",(0,r.kt)("inlineCode",{parentName:"p"},"mobileTelephoneNumber")," attribute,\nand any other subtypes of ",(0,r.kt)("inlineCode",{parentName:"p"},"telephoneNumber"),", such as ",(0,r.kt)("inlineCode",{parentName:"p"},"workTelephoneNumber"),",\nunless you explicitly request for the directory to not do this. This also\napplies to matching: searches in the directory for a entries with a given\n",(0,r.kt)("inlineCode",{parentName:"p"},"telephoneNumber")," value will also return results for entries with a matching\n",(0,r.kt)("inlineCode",{parentName:"p"},"mobileTelephoneNumber")," value, but not the reverse."),(0,r.kt)("p",null,"The attributes used to compose an entry are governed by the entry's ",(0,r.kt)("em",{parentName:"p"},"object\nclasses"),". Object classes specify what attributes an entry ",(0,r.kt)("em",{parentName:"p"},"must")," have or ",(0,r.kt)("em",{parentName:"p"},"may"),"\nhave or both. Object classes are identified by an object identifier."),(0,r.kt)("p",null,"There are ",(0,r.kt)("em",{parentName:"p"},"structural object classes"),", which immutably define what an\nentry represents, such as a ",(0,r.kt)("inlineCode",{parentName:"p"},"person"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"organization"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"device"),". There are\nalso auxiliary object classes, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"married"),", which can be used to permit\nfurther attributes in an entry, above and beyond the structural object classes,\nsuch as ",(0,r.kt)("inlineCode",{parentName:"p"},"spouseName"),", and which usually indicate some circumstantial data about\nan entry, rather than something inherent to its definition; a ",(0,r.kt)("inlineCode",{parentName:"p"},"person")," is always\na ",(0,r.kt)("inlineCode",{parentName:"p"},"person"),", and can never become a ",(0,r.kt)("inlineCode",{parentName:"p"},"device"),", but a person can become ",(0,r.kt)("inlineCode",{parentName:"p"},"married"),"\n(and divorced, too!)."),(0,r.kt)("p",null,"Like attribute types, object classes can be defined as subclasses of each other.\nAn ",(0,r.kt)("inlineCode",{parentName:"p"},"organizationalPerson")," is defined as a subclass of ",(0,r.kt)("inlineCode",{parentName:"p"},"person"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"person"),"\nobject class requires a ",(0,r.kt)("inlineCode",{parentName:"p"},"surname")," attribute, but permits a ",(0,r.kt)("inlineCode",{parentName:"p"},"commonName"),"\nattribute. As such, the ",(0,r.kt)("inlineCode",{parentName:"p"},"organizationalPerson")," subclass does the same, but also\npermits more attribute types, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"telephoneNumber"),"."),(0,r.kt)("p",null,"There is a third type of object class, which is an ",(0,r.kt)("em",{parentName:"p"},"abstract object class"),".\nAbstract object classes cannot be used to govern entries exclusively: they may\nonly be used to define further subclasses, which may then be used. These are\nrare, but you should know about them at least."),(0,r.kt)("p",null,"The most specific structural object class that defines an entry is refered to as\nthe entry's ",(0,r.kt)("em",{parentName:"p"},"structural object class"),". For instance, if an entry has the object\nclass ",(0,r.kt)("inlineCode",{parentName:"p"},"organizationalPerson"),", it necessarily also has the object class ",(0,r.kt)("inlineCode",{parentName:"p"},"person"),",\nbut its ",(0,r.kt)("em",{parentName:"p"},"structural object class")," would be ",(0,r.kt)("inlineCode",{parentName:"p"},"organizationalPerson"),", because\n",(0,r.kt)("inlineCode",{parentName:"p"},"organizationalPerson")," is the most specific object class."),(0,r.kt)("p",null,"The object classes of an entry are stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"objectClass")," attribute, which\nhas an object identifier of ",(0,r.kt)("inlineCode",{parentName:"p"},"2.5.4.0"),". This is technically defined as a user\nattribute for historical reasons, but it still functions like an operational\nattribute."),(0,r.kt)("h4",{id:"context-types"},"Context Types"),(0,r.kt)("p",null,'Attribute values can be tagged with a sort of "metadata" called ',(0,r.kt)("em",{parentName:"p"},"contexts"),".\nContexts are more general-purpose annotations for attribute values that are used\nlike so:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To annotate strings with the language. For instance, if an organization has a\n",(0,r.kt)("inlineCode",{parentName:"li"},"description")," attribute value in English and another value in German, the\nEnglish value can be tagged with a ",(0,r.kt)("inlineCode",{parentName:"li"},"languageContext")," with a value that\nidentifies it as English, and likewise for the German description."),(0,r.kt)("li",{parentName:"ul"},"To indicate the time in which a value was/is true: by using a\n",(0,r.kt)("inlineCode",{parentName:"li"},"temporalContext"),", a directory entry can indicate that Mrs. Jane Smith's last\nname was Doe up until July 25th, 2023, when she got married. This would be\ndone by having a ",(0,r.kt)("inlineCode",{parentName:"li"},"surname")," attribute value of ",(0,r.kt)("inlineCode",{parentName:"li"},"Doe")," using a ",(0,r.kt)("inlineCode",{parentName:"li"},"temporalContext"),"\nindicating that this value is not applicable after July 25th, 2023, and\nanother value of ",(0,r.kt)("inlineCode",{parentName:"li"},"Smith"),' with no contexts. Instead of deleting old information\nin the directory, it can be annotated with the "validity time" so that the\ndirectory can be queried across time. This means that a directory can\nfunction like a time-series database.'),(0,r.kt)("li",{parentName:"ul"},"To indicate the applicable locale of a numeric unit, such as a currency."),(0,r.kt)("li",{parentName:"ul"},"To indicate a level of certainty associated with a value whose validity is\nuncertain."),(0,r.kt)("li",{parentName:"ul"},"To annotate a value with a source of its information. For instance, if an\nattribute value was sourced from a person's birth certificate, this could be\nindicated."),(0,r.kt)("li",{parentName:"ul"},"To annotate a value with a digital signature, providing data integrity at\nrest.")),(0,r.kt)("p",null,"The type of context is identified by an object identifier. An attribute value\nmay have zero, one, or more contexts of a given type, and may have multiple\ncontext types as well."),(0,r.kt)("h4",{id:"the-directory-information-tree"},"The Directory Information Tree"),(0,r.kt)("p",null,'The entries in a directory are arranged in a hierarchical structure, referred to\nas the Directory Information Tree (DIT). In computer science, a "tree" is\nconventionally thought of and spoken of as being upside-down. The "root" of the\ntree is at the "top," and there are branches beneath the root, leading down to\n"leaves" that terminate branches of the tree. Leaves are at the "bottom" of the\ntree, when using this terminology.'),(0,r.kt)("p",null,'The root of the tree is a magical entry called the "Root DSE," and it is not\ntechnically an "entry," but rather a special entry that is unique for every\ndirectory server, and used to provide information about the directory server.'),(0,r.kt)("p",null,'The entries immediately beneath the Root DSE are referred to as the "top level"\nor "first level." The first level contains real entries, which usually represent\ncountries, international organizations, or top-level domains. These have entries\nbeneath them, and those entries may have entries beneath them, recursively.'),(0,r.kt)("h4",{id:"names"},"Names"),(0,r.kt)("p",null,'Directory entries are named using a selection of attribute values that are\ncalled "distinguished values," each of which are presented as an attribute type\nobject identifier and a value. This group of one or more distinguished values is\nknown as the Relative Distinguished Name (RDN) of the entry.'),(0,r.kt)("p",null,'There may only be, at most, one value from each attribute type within a relative\ndistinguished name. Only certain attribute types may be used in naming. As\nimplied, the relative distinguished name must come from attribute values that\nare actually present in the entry: entries cannot "distinguish" values that they\ndo not have.'),(0,r.kt)("p",null,"The following attribute types are commonly used for naming:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"countryName"),", often abbreviated as ",(0,r.kt)("inlineCode",{parentName:"li"},"c")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stateOrProvinceName"),", often abbreviated as ",(0,r.kt)("inlineCode",{parentName:"li"},"st")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"localityName"),", often abbreviated as ",(0,r.kt)("inlineCode",{parentName:"li"},"l")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"organizationName"),", often abbreviated as ",(0,r.kt)("inlineCode",{parentName:"li"},"o")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"organizationalUnitName"),", often abbreviated as ",(0,r.kt)("inlineCode",{parentName:"li"},"ou")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"commonName"),", often abbreviated as ",(0,r.kt)("inlineCode",{parentName:"li"},"cn")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"givenName"),", often abbreviated as ",(0,r.kt)("inlineCode",{parentName:"li"},"gn")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"surname"),", often abbreviated as ",(0,r.kt)("inlineCode",{parentName:"li"},"sn")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"domainComponent"),", often abbreviated as ",(0,r.kt)("inlineCode",{parentName:"li"},"dc")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"uid")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"title")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dnQualifier"))),(0,r.kt)("p",null,"For the purposes of displaying to humans, attribute types and values are often\nrepresented as type-equals-value pairs (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"cn=Jonathan Wilbur"),"). When\ndisplaying whole relative distinguished names, the distinguished values are\njoined with plus signs (",(0,r.kt)("inlineCode",{parentName:"p"},"+"),"), after escaping any plus signs and backslashes\nwithin the attribute values with backslashes (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"gn=Jonathan+sn=Wilbur"),")."),(0,r.kt)("p",null,"Relative distinguished names are only expected to be unique among all entries\nimmediately subordinate to a given other entry."),(0,r.kt)("p",null,'The ordered sequence of relative distinguished names going from the top level\nentry to the identified entry is refered to as the "distinguished name." This\nname uniquely and globally identifies an entry. When displayed textually, it\nis the string-form relative distinguished names, joined by commas, semi-colons,\nor forward slashes (e.g. ',(0,r.kt)("inlineCode",{parentName:"p"},"c=US,st=FL,l=Tampa,gn=Jonathan+sn=Wilbur"),")."),(0,r.kt)("p",null,"The Root DSE is an exception to the rules above. The Root DSE has a zero-length\ndistinguished name, and if needed, its relative distinguished name can be\nrepresented as a zero-length relative distinguished name."),(0,r.kt)("p",null,"The attribute types that must be present or may be present in an entry's\nrelative distinguished name is governed by a ",(0,r.kt)("em",{parentName:"p"},"name form"),". A name form is a\nschema construct that is enforced by the X.500 directory and uniquely identified\nby an object identifier. Name forms target entries by their structural object\nclass, and there can be multiple name forms defined for a given structural\nobject class. Name forms are not expected to apply uniformly throughout the\nDirectory Information Tree; some regions of the tree can enforce different\nnaming conventions from others."),(0,r.kt)("h4",{id:"schema"},"Schema"),(0,r.kt)("p",null,"In addition to the X.500 schema constructs mentioned above, further constructs\ncan constrain where entries can appear and what object classes, attributes, and\ncontexts they can have."),(0,r.kt)("p",null,"DIT Structure Rules are used to constrain what name forms (and hence, which\nentries) may be present in a given location in the Directory Information Tree.\nDIT Structure Rules are identified by a numeric identifier that is only unique\nwithin a region of the DIT. DIT Structure Rules are recursively defined as\nsubordinates of other DIT Structure Rules. An example DIT Structure Rule might\nconstrain entries of structural object class ",(0,r.kt)("inlineCode",{parentName:"p"},"locality")," to appear beneath\nentries of structural object class ",(0,r.kt)("inlineCode",{parentName:"p"},"country"),", since the reverse does not make\nsense. The DIT Structure Rule that permitted an entry to be inserted where it\nresides in the DIT is known as that entry's ",(0,r.kt)("em",{parentName:"p"},"governing structure rule"),"."),(0,r.kt)("p",null,"DIT Content Rules circumscribe which auxiliary object classes, entries within\na region of the DIT may have, as well as what attribute types MUST, MAY, and\nMUST NOT be present within entries that fall within the purview of the DIT\nContent Rule."),(0,r.kt)("p",null,"Context Use Rules govern which contexts may be present in which attribute\nvalues within a region of the DIT. Matching use rules are used to control which\nmatching combinations are defined for usage."),(0,r.kt)("h4",{id:"matching-rules"},"Matching Rules"),(0,r.kt)("p",null,'X.500 directories use "matching rules" to define the logic of how two values are\nto be compared, sorted, and searched, which are called equality matching rules,\nordering matching rules, and substring matching rules, respectively.'),(0,r.kt)("h4",{id:"compound-entries"},"Compound Entries"),(0,r.kt)("p",null,"X.500 directory entries"),(0,r.kt)("h4",{id:"hierarchical-groups"},"Hierarchical Groups"),(0,r.kt)("h4",{id:"collective-attributes"},"Collective Attributes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"These are often subtypes of non-collective attributes, so that they match.")),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("h4",{id:"rose-protocols-and-transport"},"ROSE Protocols and Transport"),(0,r.kt)("h4",{id:"binding"},"Binding"),(0,r.kt)("h4",{id:"the-dap-operations"},"The DAP Operations"),(0,r.kt)("h4",{id:"chaining"},"Chaining"),(0,r.kt)("h4",{id:"shadowing"},"Shadowing"),(0,r.kt)("h4",{id:"relaxation"},"Relaxation"),(0,r.kt)("h4",{id:"signing"},"Signing"),(0,r.kt)("h4",{id:""}),(0,r.kt)("h2",{id:"administrators-deep-dive"},"Administrator's Deep Dive"),(0,r.kt)("h3",{id:"administrative-areas"},"Administrative Areas"),(0,r.kt)("h3",{id:"access-control"},"Access Control"),(0,r.kt)("h3",{id:"context-assertion-defaults"},"Context Assertion Defaults"))}p.isMDXComponent=!0}}]);