"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9719],{1184:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(4041);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}},5440:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"information-disclosure","title":"Information Disclosure","description":"There are innate limitations to the confidentiality of X.500 directory systems,","source":"@site/docs/information-disclosure.md","sourceDirName":".","slug":"/information-disclosure","permalink":"/directory/docs/information-disclosure","draft":false,"unlisted":false,"editUrl":"https://github.com/Wildboar-Software/directory/edit/main/website/docs/information-disclosure.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Deviations and Nuances","permalink":"/directory/docs/deviations-nuances"},"next":{"title":"Architecture","permalink":"/directory/docs/architecture"}}');var i=n(1085),o=n(1184);const s={},a="Information Disclosure",c={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"information-disclosure",children:"Information Disclosure"})}),"\n",(0,i.jsx)(t.p,{children:"There are innate limitations to the confidentiality of X.500 directory systems,\r\nand there are even more limitations added by specific implementations, such as\r\nMeerkat DSA. Certain aspects of Meerkat DSA may be used by nefarious users to\r\nreveal information to which they would not otherwise have access."}),"\n",(0,i.jsx)(t.p,{children:"The known information disclosures are listed below:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"If a user can read the DIT structure rules and the names of entries, they can\r\ndetermine their object classes. This is an innate limitation of X.500\r\ndirectories."}),"\n",(0,i.jsxs)(t.li,{children:["Adding the ",(0,i.jsx)(t.code,{children:"hierarchyParent"})," attribute to an entry can be used to discover\r\nthe existence of entries and whether they are members of a compound entry.\r\n(See the database driver for ",(0,i.jsx)(t.code,{children:"hierarchyParent"}),".) This is caused by Meerkat\r\nDSA, and not by the X.500 specifications. It is recommended that add\r\npermission to the ",(0,i.jsx)(t.code,{children:"hierarchyParent"})," attribute only be granted to\r\nadministrators or, at least, users that are permitted to know of the\r\nexistence of every entry in the DSA."]}),"\n",(0,i.jsx)(t.li,{children:'It is recommended that, for attributes that have some implied "default" value\r\nand which are sensitive, all entries should have this attribute with the\r\ndefault value(s) so that information disclosure vulnerabilities that reveal\r\nthe mere presence of attributes cannot be used to determine their values.'}),"\n",(0,i.jsx)(t.li,{children:"See Note 4 on page 11 of ITU Recommendation X.511 (2016 edition)."}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"removeEntry"})," will display an ",(0,i.jsx)(t.code,{children:"updateError"})," with problem\r\n",(0,i.jsx)(t.code,{children:"notAllowedOnNonLeaf"})," when the entry to be removed has non-child\r\nsubordinates. This is supposed to happen, according to the X.500\r\nspecifications, but it can only be used to reveal this fact if the user\r\nalready has remove permissions on that entry."]}),"\n",(0,i.jsxs)(t.li,{children:["Attempting to remove a compound entry via a non-ancestor entry will yield an\r\n",(0,i.jsx)(t.code,{children:"updateError"})," with problem ",(0,i.jsx)(t.code,{children:"notAncestor"}),", which can reveal that an entry is a\r\ncompound entry, but this is not a big deal, because, by the point this is\r\nchecked, the user already has remove permissions, can probably read the\r\nobject class of the entry or its superior (which would have ",(0,i.jsx)(t.code,{children:"parent"}),"), and\r\nmight be able to read ",(0,i.jsx)(t.code,{children:"dseType"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"AE-Title"})," of your DSA is always discoverable."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"There are probably more information disclosures out there, but the most severe\r\nones are believed to be prevented and covered by tests."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);