"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8855],{5:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"tls","title":"Transport Layer Security (TLS)","description":"TLS is an essential part of directory security. It gives your directory","source":"@site/docs/tls.md","sourceDirName":".","slug":"/tls","permalink":"/directory/docs/tls","draft":false,"unlisted":false,"editUrl":"https://github.com/Wildboar-Software/directory/edit/main/website/docs/tls.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Distributed Operations","permalink":"/directory/docs/distributed"},"next":{"title":"Online PKI","permalink":"/directory/docs/online-pki"}}');var r=t(1085),o=t(1184);const s={},a="Transport Layer Security (TLS)",c={},l=[{value:"TLS Configuration",id:"tls-configuration",level:2},{value:"TLS Client Certificate Authentication",id:"tls-client-certificate-authentication",level:2},{value:"Disabling Server Authentication",id:"disabling-server-authentication",level:2},{value:"The Web Admin Console",id:"the-web-admin-console",level:2},{value:"Setting the Local Qualifier",id:"setting-the-local-qualifier",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"transport-layer-security-tls",children:"Transport Layer Security (TLS)"})}),"\n",(0,r.jsx)(n.p,{children:"TLS is an essential part of directory security. It gives your directory\npoint-to-point confidentiality and integrity."}),"\n",(0,r.jsxs)(n.p,{children:["However, it ",(0,r.jsx)(n.em,{children:"does not"})," give your directory operations end-to-end integrity;\nintermediary DSAs may spoof arguments, results, and errors, except when signing\nis used. See ",(0,r.jsx)(n.a,{href:"/directory/docs/signing",children:"here"})," for information on configuring signing."]}),"\n",(0,r.jsx)(n.h2,{id:"tls-configuration",children:"TLS Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Almost all TLS-related environment variables start with ",(0,r.jsx)(n.code,{children:"MEERKAT_TLS_"}),". Review\nthese environment variables ",(0,r.jsx)(n.a,{href:"/directory/docs/env#meerkat_tls_answer_ocsp_requests",children:"here"})," for\ninformation on specific configuration options."]}),"\n",(0,r.jsx)(n.p,{children:"Your TLS configuration applies to scenarios where Meerkat DSA operates both as a\nserver and a client. The only exceptions to this are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/directory/docs/env#meerkat_tls_reject_unauthorized_clients",children:(0,r.jsx)(n.code,{children:"MEERKAT_TLS_REJECT_UNAUTHORIZED_CLIENTS"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/directory/docs/env#meerkat_tls_reject_unauthorized_servers",children:(0,r.jsx)(n.code,{children:"MEERKAT_TLS_REJECT_UNAUTHORIZED_SERVERS"})})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Which, as their names imply, operate differently depending on whether Meerkat\nDSA acts as a TLS client or server."}),"\n",(0,r.jsx)(n.p,{children:"At minimum, TLS can be configured via the following environment variables:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"MEERKAT_TLS_CERT_FILE"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"MEERKAT_TLS_KEY_FILE"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Or by including"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"MEERKAT_TLS_PFX_FILE"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"MEERKAT_TLS_CERT_FILE"})," contains a file path to the X.509 certificate to be\nused for TLS. ",(0,r.jsx)(n.code,{children:"MEERKAT_TLS_KEY_FILE"})," shall contain the file path to the\nprivate key to be used for TLS. If both of these are present, TLS will be\nenabled. Otherwise, TLS will silently fail."]}),"\n",(0,r.jsxs)(n.p,{children:["If either the key file or PFX file are password-protected, these can be\ndecrypted by supplying the passphrase in the ",(0,r.jsx)(n.code,{children:"MEERKAT_TLS_KEY_PASSPHRASE"}),"\nenvironment variable."]}),"\n",(0,r.jsxs)(n.p,{children:["You can configure your trust anchors (root certificate authorities) through the\nuse of the ",(0,r.jsx)(n.a,{href:"./env#meerkat_tls_ca_file",children:(0,r.jsx)(n.code,{children:"MEERKAT_TLS_CA_FILE"})})," environment variable.\nThe file referred to by this variable contains the certificate authorities used\nto verify TLS peers. If unset, this defaults to a bundle of trust anchors that\nare built-in to the NodeJS runtime."]}),"\n",(0,r.jsx)(n.h2,{id:"tls-client-certificate-authentication",children:"TLS Client Certificate Authentication"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["TLS Client Certificate Authentication is also known as\n",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Mutual_authentication#mTLS",children:'"Mutual TLS" or "mTLS"'}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"One way to greatly enhance the security of your directory is to require TLS\nclient certificate authentication. If you use TLS client certificate\nauthentication, clients that (attempt to) connect to your directory will be\nrequired to present proof of possession of a private key whose validity can be\ntraced back to a configured trust anchor. This is much more secure than a\npassword, and it blocks clients at the TLS socket, rather than at the\napplication layer, meaning that a smaller attack surface is exposed by a DSA\nconfigured as such."}),"\n",(0,r.jsxs)(n.p,{children:["As long as you have TLS already configured (as described above), all you need to\ndo to enable this is set the environment variable\n",(0,r.jsx)(n.a,{href:"/directory/docs/env#meerkat_tls_reject_unauthorized_clients",children:(0,r.jsx)(n.code,{children:"MEERKAT_TLS_REJECT_UNAUTHORIZED_CLIENTS"})}),"\nto ",(0,r.jsx)(n.code,{children:"1"})," (enabled)."]}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.p,{children:"While TLS client certificate authentication is generally very secure, there are\nrisks involved. Namely, you are inviting TLS peers to submit X.509 certificates\nto your TLS socket for validation. These inputs are complicated, and in the\npast, there have been security vulnerabilities discovered in TLS implementations\nwhereby maliciously-crafted client certificates could be used to, say, bring\nservices offline, read memory, or take control of remote hosts."}),(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://nvd.nist.gov/vuln/detail/CVE-2022-0778",children:"CVE-2022-0778"})," for an\nexample of what could go wrong. Still, if extreme privacy and authentication are\nneeded, the benefits of this usually outweigh the risks."]})]}),"\n",(0,r.jsx)(n.h2,{id:"disabling-server-authentication",children:"Disabling Server Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["Yes, it is possible to disable server authentication. You can do this by setting\nthe environment variable\n",(0,r.jsx)(n.a,{href:"/directory/docs/env#meerkat_tls_reject_unauthorized_servers",children:(0,r.jsx)(n.code,{children:"MEERKAT_TLS_REJECT_UNAUTHORIZED_SERVERS"})}),"\nto ",(0,r.jsx)(n.code,{children:"0"})," (disabled). This will cause Meerkat DSA to ignore an invalid\ncertification path presented by a server to which it connects."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"If you disable server authentication, it mitigates the protection afforded by\nTLS; anybody can impersonate the server. If you disable server authentication"})}),"\n",(0,r.jsx)(n.h2,{id:"the-web-admin-console",children:"The Web Admin Console"}),"\n",(0,r.jsxs)(n.p,{children:["Enabling TLS is also critical for securing your web admin console (if enabled).\nSee more information ",(0,r.jsx)(n.a,{href:"/directory/docs/webadmin#tls",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"setting-the-local-qualifier",children:"Setting the Local Qualifier"}),"\n",(0,r.jsxs)(n.p,{children:["The meaning of the ",(0,r.jsx)(n.code,{children:"localQualifier"})," component of the ",(0,r.jsx)(n.code,{children:"AuthenticationLevel"})," as\ndescribed in ",(0,r.jsx)(n.a,{href:"https://www.itu.int/rec/T-REC-X.501/en",children:"ITU Recommendation X.501 (2019)"}),",\nSection 18.4.2.3, is left to DSA implementations. In Meerkat DSA the\n",(0,r.jsx)(n.code,{children:"localQualifier"})," is given a value depending on the level of transport security\nthat is used to protect a connection with a client."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/directory/docs/authorization#setting-the-local-qualifier-of-a-client",children:"here"})," for\ndocumentation on how to configure how your DSA sets the ",(0,r.jsx)(n.code,{children:"localQualifier"})," for a\ngiven client."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(4041);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);