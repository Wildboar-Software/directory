"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6189],{664:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"deviations-nuances","title":"Deviations and Nuances","description":"Meerkat DSA deviates from the X.500 specifications in a few ways, often due to","source":"@site/docs/deviations-nuances.md","sourceDirName":".","slug":"/deviations-nuances","permalink":"/directory/docs/deviations-nuances","draft":false,"unlisted":false,"editUrl":"https://github.com/Wildboar-Software/directory/edit/main/website/docs/deviations-nuances.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Conformance","permalink":"/directory/docs/conformance"},"next":{"title":"Information Disclosure","permalink":"/directory/docs/information-disclosure"}}');var i=n(1085),s=n(1184);const a={},o="Deviations and Nuances",d={},h=[{value:"The &quot;Never Contributing&quot; Bug",id:"the-never-contributing-bug",level:2},{value:"Protected Passwords",id:"protected-passwords",level:2},{value:"Hidden Service Admin Areas",id:"hidden-service-admin-areas",level:2},{value:"Other Deviations",id:"other-deviations",level:2}];function l(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"deviations-and-nuances",children:"Deviations and Nuances"})}),"\n",(0,i.jsx)(t.p,{children:"Meerkat DSA deviates from the X.500 specifications in a few ways, often due to\r\nambiguities in the specifications or creative leeway given by the\r\nspecifications to DSA implementors. These deviations are noted below. Also\r\nnoted below are nuances in Meerkat DSA:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:'RFC 4512: "The root DSE SHALL NOT be included if the client performs a subtree\r\nsearch starting from the root." I could not find anywhere in the X.500\r\nspecifications where this behavior is required, however, it makes sense to me:\r\na search that does not explicitly target the root DSE should not include it,\r\nbecause the root DSE is, in some sense, not a "real" entry in the DIT.'}),"\n",(0,i.jsx)(t.li,{children:"Meerkat will not allow the creation of attribute values from the modifyDN\r\noperation. This is for security / integrity purposes."}),"\n",(0,i.jsxs)(t.li,{children:["Meerkat DSA automatically sets the\r\n",(0,i.jsx)(t.code,{children:"SearchControlOptions.separateFamilyMembers"})," option when LDAP search requests\r\nare converted to DAP search requests. This does not violate the X.500\r\nstandards, but it is not mentioned. In fact, there is no specified behavior on\r\nhow to translate an LDAP request into DAP--only the opposite."]}),"\n",(0,i.jsxs)(t.li,{children:["Meerkat DSA will not throw a ",(0,i.jsx)(t.code,{children:"noSuchAttributeOrValue"})," error during a compare\r\noperation. That is insecure because it reveals that the entry does not have an\r\nattribute of the asserted type."]}),"\n",(0,i.jsx)(t.li,{children:'The "Target Not Found" subprocedure defined in X.518 seems to imply that a\r\nsingle CR must be chosen from candidateRefs to be added to the\r\nNRContinuationList. Instead, Meerkat DSA adds all of them. Why not try all of\r\nthem?'}),"\n",(0,i.jsx)(t.li,{children:"Check Suitability of filter for a subtree search in a shadowed area is\r\nextremely complicated and guaranteed to be incorrect. However, it will\r\nfunction better when the attribute selection of replication and the filter is\r\nsimpler."}),"\n",(0,i.jsx)(t.li,{children:"Check Suitability of selection for a search or read is not performed at all.\r\nThe selection will return whatever attributes are requested and replicated."}),"\n",(0,i.jsxs)(t.li,{children:["The X.500 specifications are not clear at all as to how the ",(0,i.jsx)(t.code,{children:"uniqueIdentifier"}),"\r\nattribute is to be used for authentication, since it is multi-valued and\r\nuser-modifiable, so, during bind, the first ",(0,i.jsx)(t.code,{children:"uniqueIdentifier"}),", if it exists,\r\nwill be used as the bound ",(0,i.jsx)(t.code,{children:"NameAndOptionalUID"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["How LDAP matching rule assertion syntax is obtained from\r\nMatchingRuleDescription: it is not. It is obtained from the\r\n",(0,i.jsx)(t.code,{children:"ldapAssertionSyntax"})," property of matching rules."]}),"\n",(0,i.jsx)(t.li,{children:'Because LDAP schema values are converted to the equivalent X.500 types,\r\nextensions (fields starting with "X-") will be ignored and not preserved.'}),"\n",(0,i.jsx)(t.li,{children:'ITU Recommendation X.511, Section 7.5.f is not clear in what it means by\r\n"behaves as though normal entries do not exist." The parent of a subentry is\r\nnecessarily a normal entry. Does this mean that a subtree search can only\r\nreturn subentries immediately subordinate to the base object? Meerkat DSA\r\nbehaves as if this were so.'}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"administrativeRole"})," is automatically added to top-level DSEs when added if it\r\nis not present, making the entry an AAP."]}),"\n",(0,i.jsxs)(t.li,{children:["The specification is not clear as to whether ",(0,i.jsx)(t.code,{children:"pageNumber"}),' is zero-indexed or\r\none-indexed. Meerkat DSA will treat this as zero-indexed. This means that,\r\nwhether the parameter is 0 or not supplied in the request, a simple falsy\r\ncheck can inform the DSA as to whether it can ignore this parameter. If a user\r\ndid not want to use paging, they should omit this value, rather than setting\r\nit to zero or one to indicate that they want the first page; for this reason,\r\n1 will be treated as the "second" page. As another slight benefit, this also\r\nmeans that if clients differ in their behavior from this, it means that\r\n',(0,i.jsx)(t.em,{children:"fewer"})," entries will be returned."]}),"\n",(0,i.jsx)(t.li,{children:"Pagination may not be used when signing is required and chaining is not\r\nprohibited. This is because there is no way to merge results while preserving\r\nthe signatures from other DSAs. If chaining is prohibited, there will only be\r\nresults from the local DSA, which mean that the results can be paginated and\r\nsigned."}),"\n",(0,i.jsxs)(t.li,{children:["There are necessarily no access controls that can be applied to first-level\r\nDSEs that do not yet exist. This begs the question: how do we control which\r\nusers can add first-level DSEs? Meerkat DSA does this by prohibiting entries\r\nthat do not have a ",(0,i.jsx)(t.code,{children:"may_add_top_level_dse"})," flag set. The first entry to have\r\na password set will automatically get this flag set as well. After that first\r\nentry, any other entries that should have this permission will require\r\ndirect database queries to get this flag set. To use this privilege, a user\r\ncannot be authenticated anonymously. This does not apply if there are no\r\nusers with passwords set, or if the ",(0,i.jsx)(t.code,{children:"MEERKAT_OPEN_TOP_LEVEL"})," environment\r\nvariable is set to ",(0,i.jsx)(t.code,{children:"1"}),"."]}),"\n",(0,i.jsx)(t.li,{children:'When sorting is used in LDAP requests, the response will always indicate a\r\nsuccessful sort by including the sort response control with a success code. If\r\never in the future, sorting status can "trickle-up" to the LDAP response from\r\nthe operation dispatcher, maybe this will change.'}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"matchedValuesOnly"})," keeps only the matched values from all members of the\r\nreturned family. This might not be incorrect, since the X.500 specifications\r\ndo not clarify what the expected behavior is for non-contributing family\r\nmembers, but it is something to be aware of."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"restrictedBy"})," alternative of ",(0,i.jsx)(t.code,{children:"ProtectedItems"})," is not supported for the\r\npurposes of access control."]}),"\n",(0,i.jsx)(t.li,{children:'Pending implementation: it will be slightly more efficient to use the\r\nuser-first alternative for ACI Items, because the ACI Items can be\r\n"pre-filtered" to only retain the relevant ones.'}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"DiscloseOnError"})," permissions do not apply to some operations, such as list\r\nand search when they return 0 results, or addEntry, because Meerkat DSA\r\nrequires the target objects to be discoverable in the first place."]}),"\n",(0,i.jsxs)(t.li,{children:["We do not check for ",(0,i.jsx)(t.code,{children:"DiscloseOnError"})," in modifyEntry and addEntry operations\r\nthat add values, to determine when an attribute value already exists before it\r\nis added, because checks are already in place to determine if it can be added.\r\nThe X.500 specifications permit the attribute value's existence to be\r\ndisclosed if DiscloseOnError OR Add permissions exist for that value, but\r\nsince Add permissions are a necessary pre-requisite before Meerkat DSA even\r\nchecks for duplicates, there is no need to worry about ",(0,i.jsx)(t.code,{children:"DiscloseOnError"}),"\r\npermissions."]}),"\n",(0,i.jsx)(t.li,{children:"The ITU specs do not explicitly say that an IDM client cannot make multiple\r\nsubsequent bind attempts before the first one gets a response. If this is\r\nallowed, it opens the doors to brute-force attempts. Nefarious users can\r\ncircumvent rate-limiting by submitting back-to-back bind requests without\r\nwaiting for each one to succeed sequentially. Meerkat DSA aborts IDM\r\nconnections with clients that attempt back-to-back binds."}),"\n",(0,i.jsxs)(t.li,{children:["ITU X.511 (2016), Page 43, Footnote 2: This is because, apparently, the ACI\r\nfor a subordinate reference may not be available locally (see ITU X.518\r\n(2016), Section 19.3.1.2.1, item 3). If this is the case, the DSA ",(0,i.jsx)(t.em,{children:"must"})," chain\r\nto let the subordinate DSA decide whether to reveal this entry. There is not\r\nreally a good way to know if the subordinate DSA actually informed the\r\nsuperior DSA of relevant access control information, so Meerkat DSA will\r\n",(0,i.jsx)(t.em,{children:"assume"})," that it has all of the ACI information necessary to make this\r\ndecision. If the subordinate does not inform the superior of ACI information,\r\nit is the fault of the subordinate if its ",(0,i.jsx)(t.code,{children:"subr"})," entry is disclosed. For that\r\nmatter, the subordinate DSA could use no access control or an unsupported\r\naccess control scheme, for all the superior DSA knows."]}),"\n",(0,i.jsxs)(t.li,{children:["The specification is not clear as to which member of search or list results,\r\nincluding those within a compound entry or hierarchy selection, should have\r\n",(0,i.jsx)(t.code,{children:"partialName"})," set to ",(0,i.jsx)(t.code,{children:"TRUE"})," when a name is partially-resolved. Meerkat DSA\r\nwill only set ",(0,i.jsx)(t.code,{children:"partialName"})," for the base object, unless\r\n",(0,i.jsx)(t.code,{children:"separateFamilyMembers"})," is used, in which case all members of the family will\r\nbe marked accordingly."]}),"\n",(0,i.jsx)(t.li,{children:'Permission to read the entry and the attribute types and values of the new RDN\r\nare required for renaming an entry. This prevents information disclosure where\r\na nefarious user could attempt to discover values present in the entry by\r\nseeing which newRDN choices come back with a "no such values" error.'}),"\n",(0,i.jsx)(t.li,{children:"The X.500 specifications demand that, if a change or removal of a subschema or\r\nDIT structural rule results in a change in the governing structural rule of\r\nany entry in the subschema, every entry within the subtree beneath that entry\r\ndownwards until autonomous administrative points must have their governing\r\nstructure rules recalculated. Meerkat DSA does not update governing structure\r\nrules automatically, because it could mean that potentially millions (or even\r\nbillions, depending on how big the directory gets!) of entries would be\r\naffected. With Meerkat DSA, administrators must manually kick off a\r\nrecalculation of an entry's governing structure rule. This can be done by\r\nperforming a modifyDN operation that 'renames' an entry to its exact same name\r\non every entry, starting from the immediate subordinates of any affected entry\r\ndownwards until you reach autonomous administrative points or subschema\r\nadministrative points. Note that, whenever an entry is made into an autonomous\r\nadministrative point or subschema administrative point, or whenever such an\r\nadministrative point has a DIT structure rule added, removed, or modified in\r\nits subschema, its governing structure rule will be automatically\r\nrecalculated; this does not recurse downward automatically."}),"\n",(0,i.jsx)(t.li,{children:"When a subentry is added below an administrative point that is also a context\r\nprefix, the superior DSA's operational binding (if one exists) is updated."}),"\n",(0,i.jsx)(t.li,{children:"The Root DSE may not be modified."}),"\n",(0,i.jsx)(t.li,{children:"The information selection of a read or search operation is not evaluated against the\r\nselection of information that is shadowed for a shadow DSE. Meerkat DSA\r\nwill simply return whatever it has."}),"\n",(0,i.jsxs)(t.li,{children:["When using the ",(0,i.jsx)(t.code,{children:"removeValues"})," change from the ",(0,i.jsx)(t.code,{children:"modifyEntry"})," operation, the\r\npresence of the values to be removed will not be checked. Whether they exist\r\nor not, this change will succeed. One benefit of this is that we do not have\r\nto worry about accidentally disclosing to users which values exist and do not\r\nexist for an entry by returning a different error when they do exist."]}),"\n",(0,i.jsxs)(t.li,{children:["When using the ",(0,i.jsx)(t.code,{children:"alterValues"})," change from the ",(0,i.jsx)(t.code,{children:"modifyEntry"})," operation, ",(0,i.jsx)(t.code,{children:"Modify"}),"\r\npermission is also required for the values that are to be replaced. This is\r\nmore strict than the specification."]}),"\n",(0,i.jsx)(t.li,{children:'Default context values are not used exactly as specified in X.501 (2016),\r\nSection 13.9.2. If the context is required by context use rules, and if the\r\ncontext of that type is not supplied, a default value can "fill the gap," but\r\nbeyond that, default context values are not used. This is because the verbiage\r\nof the section 13.9.2 is unclear.'}),"\n",(0,i.jsxs)(t.li,{children:["ITU Recommendation X.501 (2016), Section 14.10 states that, when a\r\nhierarchical parent is removed, its children are to be removed from ",(0,i.jsx)(t.em,{children:"the"}),"\r\nhierarchical group. The specification does not make it clear whether they\r\nshould now belong to separate hierarchical groups with themselves at the top\r\nor if we should recursively remove all hierarchical group attributes for all\r\nhierarchical descendants. Meerkat DSA puts the children in their own separate\r\nhierarchical groups. It is not clear whether this is a deviation from the\r\nspecification at all. This was chosen because it is the most performant,\r\neasiest to implement, and preserves potentially a lot of work from accidental\r\ndeletion."]}),"\n",(0,i.jsx)(t.li,{children:"Meerkat DSA does not throw an error if a search or list operation returns a\r\nnull result (a result with zero entries or RDNs)."}),"\n",(0,i.jsxs)(t.li,{children:["The way Meerkat DSA handles invalid signed operations is complicated and is\r\ndescribed ",(0,i.jsx)(t.a,{href:"/directory/docs/distributed#handling-of-invalid-signatures",children:"here"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"userPwdHistory"})," attribute returns password history items that have fallen\r\nout of history according to the ",(0,i.jsx)(t.code,{children:"pwdMaxTimeInHistory"})," operational attribute.\r\nWhen passwords are changed, they are still evaluated against the current,\r\nvalid password history.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["This is done for performance reasons. There is no practical way to keep\r\nthese attributes synced up with ",(0,i.jsx)(t.code,{children:"pwdMaxTimeInHistory"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Password history is never deleted unless ",(0,i.jsx)(t.code,{children:"administerPassword"})," is used and only\r\nif there are insufficient slots in the ",(0,i.jsx)(t.code,{children:"userPwdHistory"})," to store the old and\r\nnew passwords.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["This is kind of a good thing: if you change ",(0,i.jsx)(t.code,{children:"pwdMaxTimeInHistory"})," to a\r\nhigher value, the history items that would have been truncated from history\r\nwill flawlessly re-appear in history."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Meerkat DSA can enforce mandatory password resets as described (mentioned in\r\npassing, really) in ITU Recommendation X.511. As it is unclear how this is to\r\nbe recorded in the X.500 specifications, Meerkat DSA uses the ",(0,i.jsx)(t.code,{children:"pwdReset"}),"\r\nattribute defined ",(0,i.jsx)(t.a,{href:"https://datatracker.ietf.org/doc/html/draft-behera-ldap-password-policy-10",children:"here"}),"\r\nand commonly used in LDAP servers. In addition to this, the X.500\r\nspecifications say that the only allowed operation should be ",(0,i.jsx)(t.code,{children:"changePassword"}),",\r\nbut Meerkat DSA is much more generous than this, allowing ",(0,i.jsx)(t.code,{children:"modifyEntry"}),"\r\n(since it can also be used to change an entry's password),\r\n",(0,i.jsx)(t.code,{children:"administerPassword"})," (since theoretically, an administrator could administer\r\ntheir own password), and ",(0,i.jsx)(t.code,{children:"search"})," and ",(0,i.jsx)(t.code,{children:"list"}),', since many DUA implementations\r\nmight present an interactive "tree-like" representation of the directory that\r\nautomatically performs these operations and which cease to work if these\r\noperations are unavailable. In LDAP, the only operations available when a\r\npassword is pending a change are ',(0,i.jsx)(t.code,{children:"search"}),", ",(0,i.jsx)(t.code,{children:"modifyEntry"}),", and the LDAP\r\n",(0,i.jsx)(t.code,{children:"changePassword"})," extended request."]}),"\n",(0,i.jsxs)(t.li,{children:["A ",(0,i.jsx)(t.code,{children:"securityError"})," with a ",(0,i.jsx)(t.code,{children:"problem"})," of ",(0,i.jsx)(t.code,{children:"blockedCredentials"})," will never be\r\nreturned, even if the account is blocked. This is for security reasons:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If the asserted credentials are invalid, it risks disclosing whether an\r\nentry exists. A nefarious user could guess distinguished names until they\r\nget a ",(0,i.jsx)(t.code,{children:"blockedCredentials"})," error instead of ",(0,i.jsx)(t.code,{children:"invalidCredentials"}),", which will\r\nreveal the existence of entries they were not supposed to know about."]}),"\n",(0,i.jsxs)(t.li,{children:["If the asserted credentials are valid, it risks disclosing the correct\r\npassword for a locked account. Nefarious users could guess passwords for a\r\nlocked account until they receive a ",(0,i.jsx)(t.code,{children:"blockedCredentials"})," error instead of\r\n",(0,i.jsx)(t.code,{children:"invalidCredentials"}),", which will reveal that they guessed the password that\r\nwas in place prior to the block."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Duplicates are only removed from search or list results in these\r\ncircumstances:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"When a local operation yields local results that are duplicates, and"}),"\n",(0,i.jsxs)(t.li,{children:["When paginated search results are requested and the ",(0,i.jsx)(t.code,{children:"unmerged"})," option is\r\nleft unused or explicitly set to ",(0,i.jsx)(t.code,{children:"FALSE"}),".","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"This might not be a deviation at all, because the procedures for\r\ndeduplicating entries are vague enough to lack details for handling the\r\npresence of multiple possibly-signed result sets. It is worth knowing,\r\nthough: if you have a strong need for absolutely no duplicate entries in\r\nresults, simply request pagination, even if you only read the first page."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://www.itu.int/rec/T-REC-X.501/en",children:"ITU Recommendation X.501 (2019)"}),",\r\nSection 10.3 outlines very specific ordering in which entries included as a\r\nresult of hierarchical selection are to be returned in search results, but\r\nMeerkat DSA does not strictly obey this, solely because an implementation that\r\ndid strictly obey this would be complicated, and for the small benefit of\r\ncorrect ordering. Instead, Meerkat DSA performs the hierarchy selection\r\nsub-searches in such an order that the returned entries are innately ",(0,i.jsx)(t.em,{children:"likely"}),"\r\nto appear in approximately the proper ordering."]}),"\n",(0,i.jsxs)(t.li,{children:["Relaxations and Tightenings do not apply to ",(0,i.jsx)(t.code,{children:"extensibleMatch"}),". This was partly\r\ndue to difficulty in implementing this, but also because it seems like\r\nunintuitive behavior to replace matching rules that a user specifically\r\nrequested."]}),"\n",(0,i.jsx)(t.li,{children:"Where a search rule is used to provide default values in a request attribute\r\nprofile, filter evaluation does not check if the supertypes of that the\r\nasserted attribute type have request attribute profiles with default values."}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"additionalControl"})," component in a search rule has no effect, because\r\nMeerkat DSA does not recognize any service control attributes."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"matchingUse"})," component in a search rule's ",(0,i.jsx)(t.code,{children:"inputAttributeTypes"})," has no\r\neffect because there are no matching restrictions defined anywhere and Meerkat\r\nDSA does not support any."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"entryType"})," component of a search rule's input attribute type's\r\n",(0,i.jsx)(t.code,{children:"defaultValues"})," field is unused, because the specification does not define how\r\nit is to be used. As such, Meerkat DSA simply joins all default values defined\r\nin each item in this set as though there were no ",(0,i.jsx)(t.code,{children:"entryType"})," field at all."]}),"\n",(0,i.jsx)(t.li,{children:'When HOBs and NHOBs are terminated, the subordinate DSEs are not deleted from\r\nthe subordinate DSA. This is so these entries can be "repatriated": reused for\r\nlater.'}),"\n",(0,i.jsx)(t.li,{children:"When the last subordinate entry underneath an NSSR is deleted, the NHOB will\r\nnot be automatically terminated. This is so more entries could be added back\r\nto the subordinate DSA, if desired. This is NOT the case with a hierarchical\r\noperational binding (HOB)."}),"\n",(0,i.jsxs)(t.li,{children:["When an ",(0,i.jsx)(t.code,{children:"addEntry"})," operation is chained, Meerkat DSA checks if its superior\r\nDSE is of type ",(0,i.jsx)(t.code,{children:"immSupr"}),", and that the chained request came from one of the\r\nsuperior DSAs. If so, the new entry is marked as having type ",(0,i.jsx)(t.code,{children:"cp"}),". This is so\r\nthe ",(0,i.jsx)(t.code,{children:"addEntry"}),"'s ",(0,i.jsx)(t.code,{children:"targetSystem"})," parameter can be used to add new context\r\nprefixes beneath a Non-Specific Subordinate Reference (NSSR). Having entries\r\nof type ",(0,i.jsx)(t.code,{children:"cp"})," beneath an NSSR are essential for list and search operations to\r\nwork correctly across NHOBs."]}),"\n",(0,i.jsxs)(t.li,{children:["There is no way for a shadow supplier to indicate to a shadow consumer that it\r\nis the master for the replicated area. There is a ",(0,i.jsx)(t.code,{children:"master"})," field in the\r\nshadowing agreement, but this is used generally just to indicate where the\r\nmaster DSA can be reached. As such, Meerkat DSA will assume that, if this\r\nfield is present, the correspondent DSA is ",(0,i.jsx)(t.em,{children:"not"})," the master."]}),"\n",(0,i.jsxs)(t.li,{children:["The X.500 specifications state that access to a given entry is denied under\r\nRule-Based Access Control when access to all attribute values is denied.\r\nHowever, enforcing this would be devastating from a performance perspective.\r\nWhen performing a ",(0,i.jsx)(t.code,{children:"list"})," operation, Meerkat DSA would have to check what might\r\nbe thousands of attributes per entry. Instead, Meerkat DSA denies access to an\r\nentry if access to any of its distinguished values are denied. This is much\r\nfaster, since usually only one single value is evaluated, and it is\r\ntechnically more strict from a security perspective."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"the-never-contributing-bug",children:'The "Never Contributing" Bug'}),"\n",(0,i.jsx)(t.p,{children:"ITU Recommendation X.511 (2016), Section 7.13 states that:"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["If the filter used is the default filter (and : ","), then all members of a\r\nfamily grouping shall be marked as participating members, but not as\r\ncontributing members."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["This is a problem, because ",(0,i.jsx)(t.code,{children:"familyReturn"})," defaults to ",(0,i.jsx)(t.code,{children:"contributingEntriesOnly"}),",\r\nwhich means that ",(0,i.jsx)(t.em,{children:"nothing"})," will be returned even though the compound entry as a\r\nwhole matches ",(0,i.jsx)(t.code,{children:"and:{}"}),". In other words, if the default search filter and\r\nselection are used, compound entries will be entirely hidden from results if the\r\nX.500 specifications are observed strictly."]}),"\n",(0,i.jsx)(t.p,{children:"This was probably not intentional, so I reported it. In early January of 2022.\r\nUntil I get clarification, Meerkat DSA will mark every entry as a contributing\r\nmember if there is a match, but no identified contributing members."}),"\n",(0,i.jsx)(t.h2,{id:"protected-passwords",children:"Protected Passwords"}),"\n",(0,i.jsxs)(t.p,{children:["Annex E of\r\n",(0,i.jsx)(t.a,{href:"https://www.itu.int/rec/T-REC-X.511/en",children:"ITU Recommendation X.511 (2019)"}),"\r\ndefines a ",(0,i.jsx)(t.em,{children:"proposed"})," algorithm for producing protected passwords as used by\r\nsimple authentication. This is a non-normative section of the specification, and\r\nas such, it is not technically a deviation from the X.500 specifications."]}),"\n",(0,i.jsxs)(t.p,{children:["The Annex E solution incorporates the raw, ",(0,i.jsx)(t.em,{children:"unhashed"})," password into the data\r\nstructure that will be used to produce the hash that is evaluated. This means\r\nthat the password would have to be stored ",(0,i.jsx)(t.em,{children:"unhashed"})," to make this possible,\r\nwhich goes against all modern expectations for the secure storage of passwords\r\nin software architecture. For this reason, Meerkat DSA uses a procedure similar\r\nto the Annex E procedure, but by redefining the first hash input to replace the\r\nraw user password with a ",(0,i.jsx)(t.code,{children:"UserPwd"})," (and, unrelated, to make the ",(0,i.jsx)(t.code,{children:"random1"}),"\r\n",(0,i.jsx)(t.code,{children:"BIT STRING"})," optional):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-asn1",children:'-- This is the data structure described in ITU Rec. X.511, Annex E.\r\nX511-AnnexE-Hashable1 ::= SEQUENCE {\r\n    name        DistinguishedName,\r\n    time1       GeneralizedTime,\r\n    random1     BIT STRING,\r\n    password    OCTET STRING }\r\n\r\n-- This is what Meerkat DSA actually hashes to produce f1.\r\nMeerkats-Actual-Hashable1 ::= SEQUENCE {\r\n    name        DistinguishedName,\r\n    time1       GeneralizedTime,\r\n    random1     BIT STRING OPTIONAL,\r\n    password    encrypted < UserPwd -- This is an ASN.1 "selection type." -- }\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"password"})," field MUST use the ",(0,i.jsx)(t.code,{children:"encrypted"})," alternative of ",(0,i.jsx)(t.code,{children:"UserPwd"}),". The\r\nencrypted value MUST use the exact algorithm that can be found the ",(0,i.jsx)(t.code,{children:"pwdEncAlg"}),'\r\noperational attribute. The reason for this is that the password is stored\r\nencrypted / hashed in the database and cannot be "re-encrypted" using some other\r\nalgorithm. Clients must first read the algorithm used for this password before\r\nattempting to produce a protected password, because they need the exact\r\nalgorithm ',(0,i.jsx)(t.em,{children:"and parameters"})," to produce an identical encrypted / hashed value."]}),"\n",(0,i.jsxs)(t.p,{children:["Unrelated to the problems above, Meerkat DSA also makes ",(0,i.jsx)(t.code,{children:"random1"})," and ",(0,i.jsx)(t.code,{children:"random2"}),"\r\noptional for protected passwords. You will notice that the above\r\n",(0,i.jsx)(t.code,{children:"Meerkats-Actual-Hashable1"})," that ",(0,i.jsx)(t.code,{children:"random1"})," is ",(0,i.jsx)(t.code,{children:"OPTIONAL"}),". In addition to this,\r\nthe second hashable defined in Annex E is also modified as such:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-asn1",children:"-- This is the data structure described in ITU Rec. X.511, Annex E.\r\nX511-AnnexE-Hashable2 ::= SEQUENCE {\r\n    f1          OCTET STRING, -- hashed octet string from above\r\n    time2       GeneralizedTime,\r\n    random2     BIT STRING }\r\n\r\n-- This is what Meerkat DSA actually hashes to locally produce the hash value.\r\nMeerkats-Actual-Hashable2 ::= SEQUENCE {\r\n    f1          OCTET STRING, -- hashed octet string from above\r\n    time2       GeneralizedTime,\r\n    random2     BIT STRING OPTIONAL }\n"})}),"\n",(0,i.jsx)(t.p,{children:"It is also worth noting that Meerkat DSA does not support every hash\r\nalgorithm under the sun. These are the ones that are supported at the time of\r\nwriting:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"sha1"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"sha224"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"sha256"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"sha384"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"sha512"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"sha3-244"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"sha3-256"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"sha3-384"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"sha3-512"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"shake128"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"shake256"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"If a user produces a protected password with an algorithm not listed above, the\r\npassword authentication will simply fail as though the password had been wrong."}),"\n",(0,i.jsxs)(t.p,{children:["Finally, if a user provides simple credentials using the ",(0,i.jsx)(t.code,{children:"protected"}),"\r\nalternative, but does not supply a ",(0,i.jsx)(t.code,{children:"time1"})," value, the ",(0,i.jsx)(t.code,{children:"protected"})," password will\r\nbe used to construct a ",(0,i.jsx)(t.code,{children:"UserPwd"})," value (using the ",(0,i.jsx)(t.code,{children:"encrypted"})," alternative), and\r\nthat will be asserted. To reiterate, this does not violate the specifications,\r\nsince this behavior is explicitly undefined therein."]}),"\n",(0,i.jsx)(t.h2,{id:"hidden-service-admin-areas",children:"Hidden Service Admin Areas"}),"\n",(0,i.jsxs)(t.p,{children:["The X.500 specifications mandate that searches are not to recurse into other\r\nservice administrative areas, but this means that service admin points will not\r\nbe discoverable at all via ",(0,i.jsx)(t.code,{children:"search"})," operations. Since LDAP has no ",(0,i.jsx)(t.code,{children:"list"}),'\r\noperation, it also means that LDAP users will never be able to find any entry\r\nthat lies in a different service administrative area (except by "guessing" that\r\nit exists).']}),"\n",(0,i.jsxs)(t.p,{children:["For example, if ",(0,i.jsx)(t.code,{children:"C=US,ST=FL"})," is a service admin point, and a user performs a\r\none-level search at ",(0,i.jsx)(t.code,{children:"C=US"}),", the ",(0,i.jsx)(t.code,{children:"ST=FL"})," subordinate will be hidden from the\r\nresults entirely. The user will have no way of even finding ",(0,i.jsx)(t.code,{children:"ST=FL"})," except for\r\nperforming a ",(0,i.jsx)(t.code,{children:"list"})," operation and noticing that this subordinate differs from\r\nthe results obtained by a one-level search (since ",(0,i.jsx)(t.code,{children:"list"})," is not governed by\r\nservice administration)."]}),"\n",(0,i.jsxs)(t.p,{children:["Meerkat DSA deviates from the specification by recursing one entry into other\r\nservice administrative areas so that the DIT is traversible to users. Continuing\r\non the previous example, this means that, if a user performs a one-level search\r\nat ",(0,i.jsx)(t.code,{children:"C=US"}),", the ",(0,i.jsx)(t.code,{children:"ST=FL"})," subordinate will be returned. If a subtree search at\r\n",(0,i.jsx)(t.code,{children:"C=US"})," is performed, ",(0,i.jsx)(t.code,{children:"ST=FL"})," will be returned as well, but none of its\r\nsubordinates (the latter of which is technically correct behavior)."]}),"\n",(0,i.jsxs)(t.p,{children:["This behavior can be turned off by setting\r\n",(0,i.jsx)(t.a,{href:"/directory/docs/env#meerkat_principled_service_admin",children:(0,i.jsx)(t.code,{children:"MEERKAT_PRINCIPLED_SERVICE_ADMIN"})}),"\r\nto ",(0,i.jsx)(t.code,{children:"1"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"The above issue will be reported to the ITU working group that authors the X.500\r\nspecifications, so it may be resolved in a future version."})}),"\n",(0,i.jsx)(t.h2,{id:"other-deviations",children:"Other Deviations"}),"\n",(0,i.jsx)(t.p,{children:"There are other deviations that haven't been mentioned here. Most deviations\r\nare the frequency of automated updates to operational bindings. Meerkat DSA\r\nupdates operational bindings more frequently than is required by the\r\nspecifications. This should not be of significance more the vast majority of\r\nusers, and is probably desirable."})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1184:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(4041);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);