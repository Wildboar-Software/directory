"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9430],{295:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"versioning","title":"Versioning","description":"Meerkat DSA roughly uses Semantic Versioning, but it is","source":"@site/docs/versioning.md","sourceDirName":".","slug":"/versioning","permalink":"/directory/docs/versioning","draft":false,"unlisted":false,"editUrl":"https://github.com/Wildboar-Software/directory/edit/main/website/docs/versioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Changelog for Meerkat DSA","permalink":"/directory/docs/changelog-meerkat"},"next":{"title":"Support / Help","permalink":"/directory/docs/support"}}');var i=r(1085),s=r(1184);const o={},a="Versioning",c={},h=[{value:"What is the current version?",id:"what-is-the-current-version",level:2},{value:"Incrementing the Version",id:"incrementing-the-version",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"versioning",children:"Versioning"})}),"\n",(0,i.jsxs)(n.p,{children:["Meerkat DSA roughly uses ",(0,i.jsx)(n.a,{href:"https://semver.org/",children:"Semantic Versioning"}),', but it is\nnot entirely clear what constitutes a "breaking change" for something other than\na pure API. What about changes to environment variable names, or log messages?\nIn the face of this ambiguity, Meerkat DSA takes a somewhat liberal approach to\nversioning, in part to avoid scaring off new users with repeated major version\nincrements.']}),"\n",(0,i.jsx)(n.h2,{id:"what-is-the-current-version",children:"What is the current version?"}),"\n",(0,i.jsxs)(n.p,{children:["There are multiple files throughout this repository that indicate version\nnumbers. These all need to be updated with a version change, but may not happen\nat the same time. As such,\n",(0,i.jsx)(n.strong,{children:"the git tag shall be considered authoritative for identifying a version"}),".\nJust because the ",(0,i.jsx)(n.code,{children:"package.json"})," in ",(0,i.jsx)(n.code,{children:"apps/meerkat"})," says ",(0,i.jsx)(n.code,{children:"2.5.0"})," does not mean\nthat you are looking at version ",(0,i.jsx)(n.code,{children:"2.5.0"}),". It could be a few commits after the\nreal version ",(0,i.jsx)(n.code,{children:"2.5.0"}),". The exact commit identified by a ",(0,i.jsx)(n.code,{children:"v#.#.#"})," tag shall be\n",(0,i.jsx)(n.em,{children:"the"})," version, and all other commits on the ",(0,i.jsx)(n.code,{children:"master"}),' branch shall be considered\n"non-version," "inter-version," or "non-release" commits, however you might\nchoose to phrase that.']}),"\n",(0,i.jsx)(n.h2,{id:"incrementing-the-version",children:"Incrementing the Version"}),"\n",(0,i.jsx)(n.p,{children:"Unfortunately, there is no sure fire way to bump the version currently. I just\nsearch for all files containing the current version and increment those.\nCurrently, the files I change are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"./.github/workflows/meerkat.yml"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"./apps/meerkat-docs/docs/changelog-meerkat.md"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"./apps/meerkat-docs/docs/conformance.md"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"./k8s/charts/meerkat-dsa/Chart.yaml"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"./pkg/control"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"./pkg/docker-compose.yaml"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"./pkg/meerkat-dsa.rb"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"./snap/snapcraft.yaml"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1184:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(4041);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);