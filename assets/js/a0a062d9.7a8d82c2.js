"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[590],{1184:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>o});var t=n(4041);const r={},s=t.createContext(r);function a(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:i},e.children)}},3868:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"authorization","title":"Authorization","description":"Meerkat supports all access control schemes defined in the X.500 specifications,","source":"@site/docs/authorization.md","sourceDirName":".","slug":"/authorization","permalink":"/directory/docs/authorization","draft":false,"unlisted":false,"editUrl":"https://github.com/Wildboar-Software/directory/edit/main/website/docs/authorization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Database Administration","permalink":"/directory/docs/database"},"next":{"title":"Authentication","permalink":"/directory/docs/authentication"}}');var r=n(1085),s=n(1184);const a={},o="Authorization",c={},l=[{value:"Enabling Access Controls",id:"enabling-access-controls",level:2},{value:"Getting Locked Out",id:"getting-locked-out",level:2},{value:"Disabling Access Controls",id:"disabling-access-controls",level:3},{value:"Deleting an ACI Item from the database",id:"deleting-an-aci-item-from-the-database",level:3},{value:"Access Controls in Hierarchical Operational Bindings",id:"access-controls-in-hierarchical-operational-bindings",level:2},{value:"Recommendation Access Control",id:"recommendation-access-control",level:2},{value:"Access Control in a Distributed Environment",id:"access-control-in-a-distributed-environment",level:2},{value:"Setting the Local Qualifier of a Client",id:"setting-the-local-qualifier-of-a-client",level:2},{value:"Rule-Based Access Control",id:"rule-based-access-control",level:2},{value:"Controlling Access to Entries",id:"controlling-access-to-entries",level:3},{value:"Where Clearances Come From",id:"where-clearances-come-from",level:3},{value:"Labelling Authorities and Clearance Authorities",id:"labelling-authorities-and-clearance-authorities",level:3},{value:"The Simple Security Policy",id:"the-simple-security-policy",level:3},{value:"Custom Security Policies",id:"custom-security-policies",level:3},{value:"Chaining Rule-Based Access Control",id:"chaining-rule-based-access-control",level:3},{value:"Users with No Clearance",id:"users-with-no-clearance",level:3},{value:"Invalid Hashes, Untrusted Labels, and Untrusted Labelling Authorities",id:"invalid-hashes-untrusted-labels-and-untrusted-labelling-authorities",level:3},{value:"Unrecognized Policies",id:"unrecognized-policies",level:3},{value:"Multiple Security Labels",id:"multiple-security-labels",level:3}];function d(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"authorization",children:"Authorization"})}),"\n",(0,r.jsx)(i.p,{children:"Meerkat supports all access control schemes defined in the X.500 specifications,\r\nmeaning:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Basic Access Control"}),"\n",(0,r.jsx)(i.li,{children:"Simplified Access Control"}),"\n",(0,r.jsx)(i.li,{children:"Rule-Based Access Control"}),"\n",(0,r.jsx)(i.li,{children:"Rule-and-Basic Access Control"}),"\n",(0,r.jsx)(i.li,{children:"Rule-and-Simple Access Control."}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Future versions of Meerkat DSA may introduce new access control schemes, like:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:'A "points-based" access control scheme'}),"\n",(0,r.jsx)(i.li,{children:'An "OpenLDAP-like" access control scheme'}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"This documentation will not discuss how Basic Access Control or Simplified\r\nAccess Control works; only the implementation-specific details that apply to\r\nMeerkat DSA."}),"\n",(0,r.jsx)(i.h2,{id:"enabling-access-controls",children:"Enabling Access Controls"}),"\n",(0,r.jsx)(i.p,{children:"Access control does not exist in Meerkat DSA (and the directory as a whole) by\r\ndefault. It must be configured. For Meerkat DSA to observe access controls for a\r\ngiven Access Control Specific Area (ACSA), the following must be in place:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:["There must be an administrative point defined with an ",(0,r.jsx)(i.code,{children:"administrativeRole"}),"\r\nattribute value of ",(0,r.jsx)(i.code,{children:"id-ar-autonomousArea"})," (2.5.23.1)."]}),"\n",(0,r.jsxs)(i.li,{children:["There must be an administrative point defined with an ",(0,r.jsx)(i.code,{children:"administrativeRole"}),"\r\nattribute value of ",(0,r.jsx)(i.code,{children:"id-ar-accessControlSpecificArea"})," (2.5.23.2). The entry\r\nused for this administrative point may be the same as the entry used for the\r\nautonomous administrative point. (An administrative point may have multiple\r\nroles.)"]}),"\n"]}),"\n",(0,r.jsxs)(i.ol,{start:"3",children:["\n",(0,r.jsxs)(i.li,{children:["The access control administrative point must have an ",(0,r.jsx)(i.code,{children:"accessControlScheme"}),"\r\nattribute value set to the object identifier of the access control scheme\r\nyou want to use in that administrative area."]}),"\n"]}),"\n",(0,r.jsx)(i.admonition,{type:"warning",children:(0,r.jsxs)(i.p,{children:["Note that the ACI items should be created before enabling access control. If\r\nthere are no ACI items defined at all, then ",(0,r.jsx)(i.em,{children:"nobody"})," is permitted to do\r\n",(0,r.jsx)(i.em,{children:"anything"}),". It is possible for administrators to accidentally configure\r\nrules that prevent even themselves from accessing their own DSA!"]})}),"\n",(0,r.jsx)(i.h2,{id:"getting-locked-out",children:"Getting Locked Out"}),"\n",(0,r.jsx)(i.p,{children:"If an administrator gets locked out of Meerkat DSA by having misconfigured\r\naccess controls, it will have to be corrected by directly modifying the\r\ndatabase to achieve one of the following goals:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"To ensure that one of the conditions stated above for enabling access controls\r\nis no longer met, and thereby disable authorization for that ACSA entirely."}),"\n",(0,r.jsx)(i.li,{children:"To delete the offending ACI item."}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"The former option should be used when administrators don't know what they did\r\nwrong, or when the ACSA does not contain any private information; it is quicker\r\nand easier to just disable access control entirely, fix the problem, then\r\nre-enable access controls once it is fixed. If administrators know which ACI\r\nitem is causing them to be locked out, the latter option may preferrable."}),"\n",(0,r.jsxs)(i.p,{children:['One way you can "delete" an ACI item is by changing the ',(0,r.jsx)(i.code,{children:"active"})," column in the\r\n",(0,r.jsx)(i.code,{children:"ACIItem"})," table in the database to ",(0,r.jsx)(i.code,{children:"FALSE"})," for that ACI item."]}),"\n",(0,r.jsx)(i.h3,{id:"disabling-access-controls",children:"Disabling Access Controls"}),"\n",(0,r.jsxs)(i.p,{children:["The easiest way to do this with minimal loss of data is to delete the\r\naccess control scheme attribute value from the ",(0,r.jsx)(i.code,{children:"EntryAccessControlScheme"})," table.\r\nThe administrator will have to determine the ID of the entry that is the\r\nadministrative point for the ACSA so he can delete the correct access control\r\nscheme value. It may be helpful to inspect the ",(0,r.jsx)(i.code,{children:"EntryAdministrativeRole"})," table\r\nto determine the ID of the offending administrative point."]}),"\n",(0,r.jsx)(i.p,{children:"Note that Meerkat DSA will have to be restarted for this change to take effect,\r\nsince the access control scheme may still be cached in memory."}),"\n",(0,r.jsx)(i.h3,{id:"deleting-an-aci-item-from-the-database",children:"Deleting an ACI Item from the database"}),"\n",(0,r.jsxs)(i.p,{children:["ACI items may be deleted from the ",(0,r.jsx)(i.code,{children:"ACIItem"})," table."]}),"\n",(0,r.jsx)(i.p,{children:"Note that Meerkat DSA may have to be restarted for this change to take effect,\r\nsince the ACI items may still be cached in memory."}),"\n",(0,r.jsxs)(i.p,{children:['Another way you can "delete" an ACI item is by changing the ',(0,r.jsx)(i.code,{children:"active"})," column in\r\nthe ",(0,r.jsx)(i.code,{children:"ACIItem"})," table in the database to ",(0,r.jsx)(i.code,{children:"FALSE"})," for that ACI item."]}),"\n",(0,r.jsx)(i.h2,{id:"access-controls-in-hierarchical-operational-bindings",children:"Access Controls in Hierarchical Operational Bindings"}),"\n",(0,r.jsxs)(i.p,{children:["When Meerkat DSA establishes itself as a subordinate DSA in a Hierarchical\r\nOperational Binding (HOB), it will honor all administrative points that lie\r\nwithin the naming context up until and including the closest Autonomous\r\nAdministrative Point (AAP). In other words, if a Meerkat DSA does not define its\r\nnewly minted context prefix to be an Autonomous Administrative Point (AAP), it\r\nmay be governed by the access controls (and other administrative controls) of\r\nthe superior DSA. To be clear, this is the correct behavior for an X.500\r\ndirectory--not an accidental nuance of Meerkat DSA. Unless you are okay with\r\nthe superior DSA having ",(0,r.jsx)(i.em,{children:"complete control"})," over the subordinate naming context\r\nthat you establish with it, you should define each new context prefix to be\r\nan Autonomous Administrative Point (AAP) and each should be an access control\r\nadministrative point with the desired access controls configured."]}),"\n",(0,r.jsx)(i.p,{children:"Everything stated above will also apply to Non-Specific Hierarchical Operational\r\nBindings (NHOBs), even though these are not yet supported in Meerkat DSA."}),"\n",(0,r.jsxs)(i.p,{children:["To clarify with an example, let's say that the administrator for C=US wishes to\r\nestablish your DSA as the owner of ",(0,r.jsx)(i.code,{children:"C=US,ST=FL"})," and everything below it. He does\r\nthis by submitting an ",(0,r.jsx)(i.code,{children:"addEntry"})," request to his DSA with ",(0,r.jsx)(i.code,{children:"targetSystem"})," set to\r\nyour DSA, which triggers his DSA to attempt to establish an HOB with your DSA.\r\nIf you accept the hierarchical operational binding, the DSA for ",(0,r.jsx)(i.code,{children:"C=US"})," will now\r\nredirect (chain) all operations within the namespace ",(0,r.jsx)(i.code,{children:"C=US,ST=FL"})," to your DSA."]}),"\n",(0,r.jsxs)(i.p,{children:["If the administrator for ",(0,r.jsx)(i.code,{children:"C=US"})," has defined an Access Control Specific Area\r\n(ACSA) with ",(0,r.jsx)(i.code,{children:"C=US"})," as the administrative point that makes ",(0,r.jsx)(i.code,{children:"C=US,ST=FL,L=Tampa"}),"\r\nworld-writeable, the DSA for ",(0,r.jsx)(i.code,{children:"C=US,ST=FL"})," would still honor this configuration,\r\nand permit all writes to ",(0,r.jsx)(i.code,{children:"C=US,ST=FL,L=Tampa"})," even though the rule permitting it\r\nis external and superior to your DSA. The creation of an\r\nAutonomous Administrative Point (AAP) that halts the propagation of access\r\ncontrol rules (ACI items, for instance) from superior DSAs would prevent this\r\nbehavior."]}),"\n",(0,r.jsx)(i.h2,{id:"recommendation-access-control",children:"Recommendation Access Control"}),"\n",(0,r.jsx)(i.p,{children:"While DSA administrators will likely use their DSAs differently, there are a few\r\ncommonalities particular to access controls that almost all uses of X.500\r\ndirectory services will find useful. For use common use cases, access controls\r\nshould be defined that:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Allow administrators to administer."}),"\n",(0,r.jsxs)(i.li,{children:["Allow users to change their password.","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["There are perfectly good arguments to ",(0,r.jsx)(i.em,{children:"not"})," allowing this, too. It may be\r\npreferrable to have secure system-generated passwords instead; in this case,\r\nadministrators should implement access controls that ",(0,r.jsx)(i.em,{children:"prevent"})," users from\r\nmodifying their passwords so that a service can do this on their behalf."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.li,{children:"Explicitly prohibit users from changing the passwords of others."}),"\n",(0,r.jsx)(i.li,{children:"Explicitly allow administrators to change the passwords of others."}),"\n",(0,r.jsxs)(i.li,{children:["Allow users to read their entire entry.","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"This should include the child entries if the user's entry is a compound\r\nentry."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["Allow users to modify certain attributes of their entry.","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["For example, administrators may not want users to be able to change their\r\n",(0,r.jsx)(i.code,{children:"employeeID"})," attribute, but may want to allow users to change their\r\nemergency contact information as they please."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.li,{children:"Explicitly prohibit users from adding new entries, except within permitted\r\nsubtrees."}),"\n",(0,r.jsx)(i.li,{children:"Explicitly prohibit users from modifying or deleting entries that they did not\r\nauthor."}),"\n",(0,r.jsxs)(i.li,{children:["Carefully choose which users can modify ",(0,r.jsx)(i.code,{children:"hierarchyParent"})," and\r\n",(0,r.jsx)(i.code,{children:"aliasedEntryName"}),", because these attributes could be used to initiate attacks\r\nagainst the directory (e.g. trying to exploit a bug in access control by\r\nusing aliases or attempting to enumerate entries with timing attacks via the\r\n",(0,r.jsx)(i.code,{children:"hierarchyParent"})," attribute validation.)"]}),"\n",(0,r.jsxs)(i.li,{children:["Explicitly prohibit users from modifying the ",(0,r.jsx)(i.code,{children:"clearance"})," attribute."]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"access-control-in-a-distributed-environment",children:"Access Control in a Distributed Environment"}),"\n",(0,r.jsxs)(i.p,{children:["Meerkat DSA makes access control decisions based upon local information, but, in\r\na distributed environment, authentication information may come from other DSAs.\r\nHow this authentication information itself is authenticated is a topic in its\r\nown right, which is documented\r\n",(0,r.jsx)(i.a,{href:"/directory/docs/distributed#authentication-of-distributed-operations",children:"here"}),"."]}),"\n",(0,r.jsx)(i.h2,{id:"setting-the-local-qualifier-of-a-client",children:"Setting the Local Qualifier of a Client"}),"\n",(0,r.jsxs)(i.p,{children:["The meaning of the ",(0,r.jsx)(i.code,{children:"localQualifier"})," component of the ",(0,r.jsx)(i.code,{children:"AuthenticationLevel"})," as\r\ndescribed in ",(0,r.jsx)(i.a,{href:"https://www.itu.int/rec/T-REC-X.501/en",children:"ITU Recommendation X.501 (2019)"}),",\r\nSection 18.4.2.3, is left to DSA implementations. In Meerkat DSA the\r\n",(0,r.jsx)(i.code,{children:"localQualifier"})," is given a value depending on the level of transport security\r\nthat is used to protect a connection with a client."]}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"localQualifier"}),' is a simple integer, and Meerkat DSA adds "points" to this\r\ninteger, depending on configuration. A different number of points may be granted\r\nfor more or less secure transports. For instance, TLSv1.3 could be (and usually\r\nshould be) granted more ',(0,r.jsx)(i.code,{children:"localQualifier"}),' "points" than SSLv3, which is\r\ncompletely insecure (but better than nothing).']}),"\n",(0,r.jsxs)(i.p,{children:["The environment variables that are used to configure the ",(0,r.jsx)(i.code,{children:"localQualifier"})," are:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_local_qualifier_points_for_using_ssl3",children:(0,r.jsx)(i.code,{children:"MEERKAT_LOCAL_QUALIFIER_POINTS_FOR_USING_SSL3"})})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_local_qualifier_points_for_using_starttls",children:(0,r.jsx)(i.code,{children:"MEERKAT_LOCAL_QUALIFIER_POINTS_FOR_USING_STARTTLS"})})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_local_qualifier_points_for_using_tls",children:(0,r.jsx)(i.code,{children:"MEERKAT_LOCAL_QUALIFIER_POINTS_FOR_USING_TLS"})})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_local_qualifier_points_for_using_tls_1_0",children:(0,r.jsx)(i.code,{children:"MEERKAT_LOCAL_QUALIFIER_POINTS_FOR_USING_TLS_1_0"})})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_local_qualifier_points_for_using_tls_1_1",children:(0,r.jsx)(i.code,{children:"MEERKAT_LOCAL_QUALIFIER_POINTS_FOR_USING_TLS_1_1"})})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_local_qualifier_points_for_using_tls_1_2",children:(0,r.jsx)(i.code,{children:"MEERKAT_LOCAL_QUALIFIER_POINTS_FOR_USING_TLS_1_2"})})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_local_qualifier_points_for_using_tls_1_3",children:(0,r.jsx)(i.code,{children:"MEERKAT_LOCAL_QUALIFIER_POINTS_FOR_USING_TLS_1_3"})})}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"rule-based-access-control",children:"Rule-Based Access Control"}),"\n",(0,r.jsx)(i.p,{children:"Rule-Based Access Control is intentionally vague as to how a clearance value is\r\ncompared to a security label: it is open-ended by being left to the security\r\npolicy to determine how this comparison is performed. This means that Meerkat\r\nDSA must use a means for mapping a security policy identifier (which is an\r\nobject identifier) to a function that is used to compare the user's clearance\r\nwith the security label."}),"\n",(0,r.jsx)(i.h3,{id:"controlling-access-to-entries",children:"Controlling Access to Entries"}),"\n",(0,r.jsxs)(i.p,{children:["The X.500 specifications state that access to a given entry is denied under\r\nRule-Based Access Control when access to all attribute values is denied.\r\nHowever, enforcing this would be devastating from a performance perspective.\r\nWhen performing a ",(0,r.jsx)(i.code,{children:"list"})," operation, Meerkat DSA would have to check what might\r\nbe thousands of attributes per entry. Instead, Meerkat DSA denies access to\r\nan entry if access to any of its distinguished values are denied. This is much\r\nfaster, since usually only one single value is evaluated, and it is technically\r\nmore strict from a security perspective."]}),"\n",(0,r.jsx)(i.h3,{id:"where-clearances-come-from",children:"Where Clearances Come From"}),"\n",(0,r.jsx)(i.p,{children:"Clearances may be associated with a user in three ways:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:["By being present as attribute values of the ",(0,r.jsx)(i.code,{children:"clearance"})," attribute in the\r\nentry within the bound DSA, so long as the\r\n",(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_get_clearances_from_dsait",children:(0,r.jsx)(i.code,{children:"MEERKAT_GET_CLEARANCES_FROM_DSAIT"})}),"\r\nenvironment variable is not set to ",(0,r.jsx)(i.code,{children:"0"}),"."]}),"\n",(0,r.jsxs)(i.li,{children:["By being present as attribute values of the ",(0,r.jsx)(i.code,{children:"clearance"})," attribute in the\r\nX.509 public key certificate asserted by the user upon successful strong\r\nauthentication, so long as the\r\n",(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_get_clearances_from_pkc",children:(0,r.jsx)(i.code,{children:"MEERKAT_GET_CLEARANCES_FROM_PKC"})}),"\r\nenvironment variable is not set to ",(0,r.jsx)(i.code,{children:"0"}),"."]}),"\n",(0,r.jsxs)(i.li,{children:["By being present as attribute values of the ",(0,r.jsx)(i.code,{children:"clearance"})," attribute in the\r\nattribute certificate asserted by the user upon successful strong\r\nauthentication, so long as the\r\n",(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_get_clearances_from_attr_certs",children:(0,r.jsx)(i.code,{children:"MEERKAT_GET_CLEARANCES_FROM_ATTR_CERTS"})}),"\r\nenvironment variable is not set to ",(0,r.jsx)(i.code,{children:"0"}),"."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"labelling-authorities-and-clearance-authorities",children:"Labelling Authorities and Clearance Authorities"}),"\n",(0,r.jsx)(i.p,{children:'Security labels are signed data structures. Their signatures are generally\r\nproduced by the public keys of "labelling authorities." Clearances do not have\r\nto be signed, since they can be taken from the DSAIT, but generally, they should\r\nbe signed by being presented in an X.509 public key certificate or attribute\r\ncertificate asserted by a user during strong authentication. Thus, for both\r\nverifying security labels and clearance values, there is a need for Meerkat DSA\r\nto have a configurable set of trust anchors explicitly for the purposes of\r\nlabelling and clearance issuance.'}),"\n",(0,r.jsxs)(i.p,{children:["This can be done by pointing to Trust Anchor List files by using the\r\n",(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_clearance_authorities",children:(0,r.jsx)(i.code,{children:"MEERKAT_CLEARANCE_AUTHORITIES"})})," and\r\n",(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_labelling_authorities",children:(0,r.jsx)(i.code,{children:"MEERKAT_LABELLING_AUTHORITIES"})}),"\r\nenvironment variables."]}),"\n",(0,r.jsx)(i.p,{children:"If either of these are unset, they default to the trust anchors used for\r\nsigning."}),"\n",(0,r.jsxs)(i.p,{children:["To be used as a labelling authority, the configured trust anchors ",(0,r.jsx)(i.strong,{children:"MUST"})," have\r\na ",(0,r.jsx)(i.code,{children:"subjectKeyIdentifier"})," extension (or the equivalent ",(0,r.jsx)(i.code,{children:"keyId"})," field of the\r\n",(0,r.jsx)(i.code,{children:"taInfo"})," alternative); those that do not match this requirement will be ignored."]}),"\n",(0,r.jsx)(i.h3,{id:"the-simple-security-policy",children:"The Simple Security Policy"}),"\n",(0,r.jsxs)(i.p,{children:['For the sake of easy use of the Rule-Based Access Control (RBAC), Meerkat DSA\r\ncomes with a security policy built-in, called the "simple security policy."\r\nIt\'s object identifier is ',(0,r.jsx)(i.code,{children:"1.3.6.1.4.1.56490.5.403.1"}),". This security policy does\r\nnothing with security categories, and permits access to the labeled attribute\r\nvalue if the clearance level is greater than or equal to the clearance level\r\nrequired by the labeled attribute value. Unless you plan to make use of security\r\ncategories, this should be a sensible default for most use cases."]}),"\n",(0,r.jsx)(i.p,{children:'The Simple Security Policy treats the "unmarked" classification as being of\r\nhigher sensitivity than "unclassified," but of lesser sensitivity than\r\n"restricted." The rationale for this is that "unclassified" explicitly names\r\nsomething as having the most relaxed classification, whereas "unmarked" is an\r\nabsence of information, but it may also indicate that the labeled thing is not\r\nimportant enough to have labeled properly in the first place, hence, it lies\r\nbetween total declassification and the "restricted" classification.'}),"\n",(0,r.jsx)(i.p,{children:"The Simple Security Policy does not treat reads and writes differently: if\r\naccess is granted to read an entry, access is also granted to modify an entry.\r\nThere is an exception, however: any modification operation that affects a value\r\nwith security labels MUST be performed with top-secret clearance."}),"\n",(0,r.jsx)(i.admonition,{type:"note",children:(0,r.jsx)(i.p,{children:"If no security policy is listed in the security label or clearance, it defaults\r\nto the Simple Security Policy described above."})}),"\n",(0,r.jsx)(i.h3,{id:"custom-security-policies",children:"Custom Security Policies"}),"\n",(0,r.jsxs)(i.p,{children:["If you want to define your own security policies, you may do so in the\r\n",(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_init_js",children:"init script"})," like demonstrated below."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-javascript",children:'\r\n// This is the object identifier of your security policy.\r\nconst your_security_policy_id = "1.3.6.1.4.1.99999.1";\r\n\r\n// The is the Access Control Decision Function (ACDF) for your security policy.\r\n// This determines how a clearance value compares to a security label.\r\n\r\nconst your_custom_acdf = (\r\n    ctx, // Context\r\n    assn, // ClientAssociation // This has a clearance field.\r\n    target, // Vertex\r\n    signedLabel, // SignedSecurityLabel\r\n    value, // ASN1Element\r\n    contexts, // X500Context[]\r\n    permissions, // number[]\r\n): boolean => {\r\n    const label = signedLabel.toBeSigned.securityLabel;\r\n    const classification = Number(label.security_classification ?? SecurityClassification_unmarked);\r\n    if (classification === SecurityClassification_unclassified) {\r\n        return true; // If unclassified, the user may always see it.\r\n    }\r\n    let highestClearanceLevel: number = 0;\r\n    // Note that a client may be associated with multiple clearance values.\r\n    // How you handle this is up to you.\r\n    for (const clearance of assn.clearances) {\r\n        if (!clearance.policyId.toString() !== your_security_policy_id) {\r\n            // We ignore clearances that do not pertain to this security policy.\r\n            continue;\r\n        }\r\n        const clearanceLevel: SecurityClassification = (() => {\r\n            if (!clearance.classList) {\r\n                return SecurityClassification_unclassified;\r\n            }\r\n            else if (clearance.classList[ClassList_topSecret] === TRUE_BIT) {\r\n                return SecurityClassification_top_secret;\r\n            }\r\n            else if (clearance.classList[ClassList_secret] === TRUE_BIT) {\r\n                return SecurityClassification_secret;\r\n            }\r\n            else if (clearance.classList[ClassList_confidential] === TRUE_BIT) {\r\n                return SecurityClassification_confidential;\r\n            }\r\n            else if (clearance.classList[ClassList_restricted] === TRUE_BIT) {\r\n                return SecurityClassification_restricted;\r\n            }\r\n            else if (clearance.classList[ClassList_unmarked] === TRUE_BIT) {\r\n                return SecurityClassification_unmarked;\r\n            }\r\n            else {\r\n                return SecurityClassification_unclassified;\r\n            }\r\n        })();\r\n        if (clearanceLevel > highestClearanceLevel) {\r\n            highestClearanceLevel = Number(clearanceLevel);\r\n        }\r\n    }\r\n    // Just to make sure that classification cannot be given a large,\r\n    // illegitimate value to make a protected value universally inaccessible.\r\n    if (highestClearanceLevel == SecurityClassification_top_secret) {\r\n        return true;\r\n    }\r\n    return (highestClearanceLevel >= classification);\r\n}\r\n\r\nasync function init(ctx) {\r\n  // Here, we associate the policy ID with the ACDF\r\n  ctx.rbacPolicies.set(your_security_policy_id, your_custom_acdf);\r\n\r\n  // This is just logging, just to show you that you can do this. :)\r\n  ctx.log.info("Added my own custom security policy");\r\n}\r\n\r\nexport default init;\n'})}),"\n",(0,r.jsxs)(i.p,{children:["The Access Control Decision Function (ACDF) associated with the security policy\r\ntakes several arguments associated with the user, attribute value, contexts, the\r\nDSA itself, and returns a ",(0,r.jsx)(i.code,{children:"boolean"}),": if this ",(0,r.jsx)(i.code,{children:"boolean"})," is ",(0,r.jsx)(i.code,{children:"true"}),", it means that\r\nthe user's access request was granted; if ",(0,r.jsx)(i.code,{children:"false"}),", the requested access is\r\ndenied."]}),"\n",(0,r.jsx)(i.h3,{id:"chaining-rule-based-access-control",children:"Chaining Rule-Based Access Control"}),"\n",(0,r.jsx)(i.p,{children:"The clearances associated with a user are not preserved across the DSA boundary:\r\nthey are not chained. With Basic Access Control and Simplified Access Control,\r\nthe user's authentication level can be relayed to other DSAs, but there is no\r\ndefined mechanism for a users clearances to survive across chaining. As such,\r\nRule-Based Access Control is only viable for regulating access within a single\r\nDSA."}),"\n",(0,r.jsx)(i.p,{children:"For security reasons, only DAP and LDAP associations will have any clearances\r\nassociated: this is so that downstream DSAs do not make access control decisions\r\non the basis of the upstream DSA's clearances rather than the originating DAP\r\nrequester when chaining is used."}),"\n",(0,r.jsx)(i.h3,{id:"users-with-no-clearance",children:"Users with No Clearance"}),"\n",(0,r.jsxs)(i.p,{children:["Users with no clearances at all will automatically be given access only to\r\nattribute values having a security label with a class of ",(0,r.jsx)(i.code,{children:"unclassified"}),"."]}),"\n",(0,r.jsx)(i.h3,{id:"invalid-hashes-untrusted-labels-and-untrusted-labelling-authorities",children:"Invalid Hashes, Untrusted Labels, and Untrusted Labelling Authorities"}),"\n",(0,r.jsx)(i.p,{children:"In Meerkat DSA, an invalid hash, invalid signature, or untrusted labelling\r\nauthority having issued a security label will make the security label\r\ninaccessible to all users not having top-secret clearance for the identified\r\nsecurity policy."}),"\n",(0,r.jsxs)(i.admonition,{type:"info",children:[(0,r.jsx)(i.p,{children:"When establishing the above behavior, I had--broadly speaking--two choices:"}),(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsx)(i.li,{children:"Generally allow access (with possible caveats) when a security label is\r\ninvalid for some reason."}),"\n",(0,r.jsx)(i.li,{children:"Generally deny access (with possible caveats) when a security label is\r\ninvalid for some reason."}),"\n"]}),(0,r.jsx)(i.p,{children:"If I chose option 1, there would be a risk of disclosing classified information\r\nas a result of accidentally malformed labels or bugs in the DER encoding,\r\nhashing, or signing. If I chose option 2, there would be a risk of nefarious\r\nusers either creating illegitimate labels or copying otherwise legitimate\r\nlabels from correct values to cripple directory access to legitimate users."}),(0,r.jsx)(i.p,{children:"I chose option 2 for these reasons:"}),(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsx)(i.li,{children:"Not all malformed labels are malicious; some are produced by accident, and\r\nthe risk of accidentally disclosing classified information could be much\r\ngreater than temporarily having lost access to part of the directory."}),"\n",(0,r.jsx)(i.li,{children:"Since labelled values are generally going to be created by people that\r\nalready have clearance for that information, there would be no immediate\r\nfeedback to indicate that something was wrong if access were granted for\r\ninvalid labels; the value would still appear to that user as expected. By\r\nrestricting access for invalid labels, there may be a visible consequence\r\nthat users can seek to rectify."}),"\n",(0,r.jsx)(i.li,{children:"There is no real way to know if a label is valid until you submit it to\r\nMeerkat DSA. This means that users would have to add the classified\r\ninformation to Meerkat DSA, then determine if the labels are valid after the\r\nfact being checking if the classified information is disclosed to\r\nunauthorized users."}),"\n",(0,r.jsx)(i.li,{children:"At least with the Simple Security Policy, modifying security labels in the\r\nfirst place is only granted to users with top-secret clearance."}),"\n"]})]}),"\n",(0,r.jsxs)(i.p,{children:["Note that, as a result of the above, changing the configured\r\n",(0,r.jsx)(i.a,{href:"/directory/docs/env#meerkat_labelling_authorities",children:"labelling authorities"}),' could invalidate\r\nexisting security labels, making values "disappear" to users that would\r\notherwise have access to them.']}),"\n",(0,r.jsx)(i.h3,{id:"unrecognized-policies",children:"Unrecognized Policies"}),"\n",(0,r.jsxs)(i.p,{children:["When Meerkat DSA encounters an unrecognized policy on a security label, it\r\nonly grants access to the protected value if the label indicates that the\r\nitem is ",(0,r.jsx)(i.code,{children:"unclassified"})," or if the user has top-secret clearance."]}),"\n",(0,r.jsx)(i.h3,{id:"multiple-security-labels",children:"Multiple Security Labels"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.a,{href:"https://www.itu.int/rec/T-REC-X.501/en",children:"ITU Recommendation X.501 (2019)"}),"\r\nmandates a limit of one security label context per value. Meerkat DSA does not\r\nenforce this. The behavior of Meerkat DSA in the presence of multiple security\r\nlabels for a given value will remain undefined, but it usually results in the\r\nfirst one being used exclusively, and the remainder ignored."]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);