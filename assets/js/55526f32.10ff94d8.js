"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2499],{1184:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(4041);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}},4725:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"user-guide-to-x500","title":"User\'s Deep Dive","description":"The X.500 specifications are so rich in features that it can seem difficult to","source":"@site/docs/user-guide-to-x500.md","sourceDirName":".","slug":"/user-guide-to-x500","permalink":"/directory/docs/user-guide-to-x500","draft":false,"unlisted":false,"editUrl":"https://github.com/Wildboar-Software/directory/edit/main/website/docs/user-guide-to-x500.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Uses","permalink":"/directory/docs/uses"},"next":{"title":"Administrator\'s Deep Dive","permalink":"/directory/docs/admin-guide-to-x500"}}');var r=n(1085),a=n(1184);const s={},o="User's Deep Dive",h={},c=[{value:"Object Identifiers",id:"object-identifiers",level:2},{value:"Information Model",id:"information-model",level:2},{value:"Entries and Attributes",id:"entries-and-attributes",level:3},{value:"Matching Rules",id:"matching-rules",level:3},{value:"Context Types",id:"context-types",level:3},{value:"The Directory Information Tree",id:"the-directory-information-tree",level:3},{value:"Names",id:"names",level:3},{value:"Aliases",id:"aliases",level:3},{value:"Schema",id:"schema",level:3},{value:"Compound Entries",id:"compound-entries",level:3},{value:"Hierarchical Groups",id:"hierarchical-groups",level:3},{value:"Collective Attributes",id:"collective-attributes",level:3},{value:"Operations",id:"operations",level:2},{value:"ROSE Protocols and Transport",id:"rose-protocols-and-transport",level:2},{value:"Binding and Unbinding",id:"binding-and-unbinding",level:2},{value:"Authentication",id:"authentication",level:2},{value:"The DAP Operations",id:"the-dap-operations",level:2},{value:"Chaining",id:"chaining",level:2},{value:"Shadowing",id:"shadowing",level:2},{value:"Relaxation or Tightening",id:"relaxation-or-tightening",level:2},{value:"Signing",id:"signing",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"users-deep-dive",children:"User's Deep Dive"})}),"\n",(0,r.jsx)(t.p,{children:"The X.500 specifications are so rich in features that it can seem difficult to\nbreak into it. This is a brief explanation of X.500 concepts for a user to\nmeaningfully use an X.500 directory."}),"\n",(0,r.jsx)(t.h2,{id:"object-identifiers",children:"Object Identifiers"}),"\n",(0,r.jsxs)(t.p,{children:["X.500 directories use object identifiers to identify almost everything, so\nunderstanding what they are is important. If you finish reading this section\nunderstanding nothing else, understand that ",(0,r.jsx)(t.em,{children:"object identifiers are\nglobally-unique, numeric identifiers."})]}),"\n",(0,r.jsxs)(t.p,{children:["Object identifiers are composed of an ordered sequence of non-negative integers,\nsuch as ",(0,r.jsx)(t.code,{children:"2.5.4.3"}),". Each number in this list, called an ",(0,r.jsx)(t.em,{children:"arc"}),", identifies\n",(0,r.jsx)(t.em,{children:"something"}),". Arcs can be associated with a textual identifier, called a\n",(0,r.jsx)(t.em,{children:"descriptor"}),", but these are optional and only serve to enhance readability."]}),"\n",(0,r.jsxs)(t.p,{children:["The first number is the root arc, which can have the values ",(0,r.jsx)(t.code,{children:"0"}),",\n",(0,r.jsx)(t.code,{children:"1"}),", or ",(0,r.jsx)(t.code,{children:"2"}),", exclusively. Each root arc is associated with and self-assigned to\none of three international standards organizations. These organizations define\nobject identifier arcs beneath the roots, which may be granted / delegated to\nother organizations; these secondhand organizations may then grant arcs beneath\ntheirs to other organizations, recursively."]}),"\n",(0,r.jsxs)(t.p,{children:['There is no universal process for "registering" an object identifier. If you or\nyour organization define an object identifier, you just simply ',(0,r.jsx)(t.em,{children:"publish\nwhat it means somewhere"}),". You can obtain an object identifier arc of your own\nby registering with certain organizations. The Internet Assigned Numbers\nAuthority (IANA), gives away free object identifier arcs under ",(0,r.jsx)(t.code,{children:"1.3.6.1.4.1"}),',\nwhich it calls "Private Enterprise Numbers." The Private Enterprise Number for\nWildboar Software is ',(0,r.jsx)(t.code,{children:"56490"}),", meaning that the object identifier is\n",(0,r.jsx)(t.code,{children:"1.3.6.1.4.1.56490"}),". This means that Wildboar Software is free to define all\nobject identifiers that start with ",(0,r.jsx)(t.code,{children:"1.3.6.1.4.1.56490"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"With this out of the way, we can go over how an X.500 directory presents its\ninformation."}),"\n",(0,r.jsx)(t.h2,{id:"information-model",children:"Information Model"}),"\n",(0,r.jsx)(t.h3,{id:"entries-and-attributes",children:"Entries and Attributes"}),"\n",(0,r.jsxs)(t.p,{children:["Directories represent information as ",(0,r.jsx)(t.em,{children:"entries"}),". Entries represent real-world\nobjects, such as a person, organization, device, etc. Entries are represented\nlike documents in a document-oriented database, or a row in a relational\ndatabase or spreadsheet."]}),"\n",(0,r.jsxs)(t.p,{children:["Entries are composed of ",(0,r.jsx)(t.em,{children:"attributes"}),', which represent aspects of the real-world\nobject. If the entry represents a person, it might have a "first name"\nattribute; if the entry represents a device, it might have a "serial number"\nattribute; if the entry represents an organization, it might have a\n"phone number" attribute. Attributes are like the columns in a relational\ndatabase or spreadsheet, or like the fields of a document in a document-oriented\ndatabase. Attributes are identified by an ',(0,r.jsx)(t.em,{children:"attribute type"}),', which is a\nglobally-unique, numeric identifier. As a user of the X.500 directory, you do\nnot need to know or memorize these identifiers: it is expected that whatever\ntool you use to browse the X.500 directory will translate these object\nidentifiers into human-friendly names, such as "First Name" or "Serial Number."\nObject identifiers that are unrecognized by your tooling can be searched for on\nwebsites like ',(0,r.jsx)(t.a,{href:"http://www.oid-info.com/",children:"this"})," if your tooling does not already\ndo this for you."]}),"\n",(0,r.jsxs)(t.p,{children:["Attributes contain one or more ",(0,r.jsx)(t.em,{children:"values"}),", reflecting that some attributes of\nreal world attributes may have multiple values. A person may have multiple email\naddresses, or an organization might have multiple mailing addresses, for\ninstance. Some attributes may be defined in such a way as to only permit a\nsingle value, however; this is generally only used when it is known with\ncertainty that only a single value could ever apply, such as in the\n",(0,r.jsx)(t.code,{children:"createTimestamp"})," attribute, which indicates the time at which a directory\nentry was created."]}),"\n",(0,r.jsxs)(t.p,{children:["As part of an attribute's definition, an attribute may be defined to have a\nspecific syntax; for instance, the ",(0,r.jsx)(t.code,{children:"telephoneNumber"})," attribute type is defined\nto have a telephone number as its syntax. A user cannot insert a value of the\n",(0,r.jsx)(t.code,{children:"telephoneNumber"}),' attribute into a well-behaved directory server that is not a\nvalid telephone number. In addition, there may be rules specified for how values\nof such an attribute type are to be compared, sorted, or searched (called\n"matching rules"), as well as whether users are able to modify values of a given\nattribute type or whether they should be managed by the directory server itself.']}),"\n",(0,r.jsxs)(t.p,{children:["The attribute type definition can also indicate whether the attribute's purpose\nis to be used by the end user of the directory, making it a ",(0,r.jsx)(t.em,{children:"user attribute"}),", or\nwhether the attribute is for the directory's internal operation, which is called\nan ",(0,r.jsx)(t.em,{children:"operational attribute"}),". Yes, X.500 directories use entries and attributes to\nmanage their own configuration!"]}),"\n",(0,r.jsxs)(t.p,{children:["Attribute types may be defined to be ",(0,r.jsx)(t.em,{children:"dummy"}),' attributes, which are kind of like\n"aliases" to one or more other attributes, or labeled as "obsolete," preventing\nthem from being added to the directory any further.']}),"\n",(0,r.jsxs)(t.p,{children:["An attribute type may be defined as a ",(0,r.jsx)(t.em,{children:"subtype"})," of another. For instance, the\n",(0,r.jsx)(t.code,{children:"mobileTelephoneNumber"})," attribute type is defined as a subtype of\n",(0,r.jsx)(t.code,{children:"telephoneNumber"}),". This means that, if you query the X.500 directory for the\n",(0,r.jsx)(t.code,{children:"telephoneNumber"})," of a person, the directory will return values of the\n",(0,r.jsx)(t.code,{children:"telephoneNumber"})," attribute as well as the ",(0,r.jsx)(t.code,{children:"mobileTelephoneNumber"})," attribute,\nand any other subtypes of ",(0,r.jsx)(t.code,{children:"telephoneNumber"}),", such as ",(0,r.jsx)(t.code,{children:"workTelephoneNumber"}),",\nunless you explicitly request for the directory to not do this. This also\napplies to matching: searches in the directory for a entries with a given\n",(0,r.jsx)(t.code,{children:"telephoneNumber"})," value will also return results for entries with a matching\n",(0,r.jsx)(t.code,{children:"mobileTelephoneNumber"})," value, but not the reverse."]}),"\n",(0,r.jsxs)(t.p,{children:["The attributes used to compose an entry are governed by the entry's ",(0,r.jsx)(t.em,{children:"object\nclasses"}),". Object classes specify what attributes an entry ",(0,r.jsx)(t.em,{children:"must"})," have or ",(0,r.jsx)(t.em,{children:"may"}),"\nhave or both. Object classes are identified by an object identifier."]}),"\n",(0,r.jsxs)(t.p,{children:["There are ",(0,r.jsx)(t.em,{children:"structural object classes"}),", which immutably define what an\nentry represents, such as a ",(0,r.jsx)(t.code,{children:"person"}),", ",(0,r.jsx)(t.code,{children:"organization"}),", or ",(0,r.jsx)(t.code,{children:"device"}),". There are\nalso auxiliary object classes, such as ",(0,r.jsx)(t.code,{children:"married"}),", which can be used to permit\nfurther attributes in an entry, above and beyond the structural object classes,\nsuch as ",(0,r.jsx)(t.code,{children:"spouseName"}),", and which usually indicate some circumstantial data about\nan entry, rather than something inherent to its definition; a ",(0,r.jsx)(t.code,{children:"person"})," is always\na ",(0,r.jsx)(t.code,{children:"person"}),", and can never become a ",(0,r.jsx)(t.code,{children:"device"}),", but a person can become ",(0,r.jsx)(t.code,{children:"married"}),"\n(and divorced, too!)."]}),"\n",(0,r.jsxs)(t.p,{children:["Like attribute types, object classes can be defined as subclasses of each other.\nAn ",(0,r.jsx)(t.code,{children:"organizationalPerson"})," is defined as a subclass of ",(0,r.jsx)(t.code,{children:"person"}),". The ",(0,r.jsx)(t.code,{children:"person"}),"\nobject class requires a ",(0,r.jsx)(t.code,{children:"surname"})," attribute, but permits a ",(0,r.jsx)(t.code,{children:"commonName"}),"\nattribute. As such, the ",(0,r.jsx)(t.code,{children:"organizationalPerson"})," subclass does the same, but also\npermits more attribute types, such as ",(0,r.jsx)(t.code,{children:"telephoneNumber"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["There is a third type of object class, which is an ",(0,r.jsx)(t.em,{children:"abstract object class"}),".\nAbstract object classes cannot be used to govern entries exclusively: they may\nonly be used to define further subclasses, which may then be used. These are\nrare, but you should know about them at least."]}),"\n",(0,r.jsxs)(t.p,{children:["The most specific structural object class that defines an entry is refered to as\nthe entry's ",(0,r.jsx)(t.em,{children:"structural object class"}),". For instance, if an entry has the object\nclass ",(0,r.jsx)(t.code,{children:"organizationalPerson"}),", it necessarily also has the object class ",(0,r.jsx)(t.code,{children:"person"}),",\nbut its ",(0,r.jsx)(t.em,{children:"structural object class"})," would be ",(0,r.jsx)(t.code,{children:"organizationalPerson"}),", because\n",(0,r.jsx)(t.code,{children:"organizationalPerson"})," is the most specific object class."]}),"\n",(0,r.jsxs)(t.p,{children:["The object classes of an entry are stored in the ",(0,r.jsx)(t.code,{children:"objectClass"})," attribute, which\nhas an object identifier of ",(0,r.jsx)(t.code,{children:"2.5.4.0"}),". This is technically defined as a user\nattribute for historical reasons, but it still functions like an operational\nattribute."]}),"\n",(0,r.jsx)(t.h3,{id:"matching-rules",children:"Matching Rules"}),"\n",(0,r.jsxs)(t.p,{children:['X.500 directories use "matching rules" to define the logic of how two values are\nto be compared, sorted, and searched, which are called equality matching rules,\nordering matching rules, and substring matching rules, respectively. The\nsimplest example of a matching rule might be the ',(0,r.jsx)(t.code,{children:"caseIgnoreMatch"}),", which\ncompares two attributes that have a string syntax case-insensitively."]}),"\n",(0,r.jsxs)(t.p,{children:["If you have ever used a database, you might know how data types have an\nalgorithm for comparing two values built-in and assumed for that data type.\nFor example, when you query a SQL database with a clause like\n",(0,r.jsx)(t.code,{children:"lastName == 'Wilbur'"})," that database might perform a case-sensitive comparison\nunless you specify otherwise. This is not so with directories: the rules for\ncomparing, ordering, and searching for substrings within values are explicitly\nassociated as a part of each value's attribute type. Even though, for instance,\na URL and a last name might be stored as strings, URL attribute values may be\nevaluated using case-sensitive matching, whereas last name attribute values may\nbe evaluated using case-insensitive matching. Explicitly defining how values\nare expected to be compared can help DSAs index values appropriately."]}),"\n",(0,r.jsxs)(t.p,{children:["Attribute types may have ",(0,r.jsx)(t.em,{children:"no"})," matching rules associated. This does not mean that\nthey cannot be compared; it just means that the matching rule to be used will\nhave to be explicitly specified in search filters. However, attribute types for\nwhich no default equality matching rule is defined cannot have their values\nindividually added, removed, or modified: the entire attribute must be replaced\nall at once with the new desired values, and no checks take place for\nduplicates."]}),"\n",(0,r.jsxs)(t.p,{children:["In general, attribute types that are expected to contain longer strings, such\nas descriptions, do not define equality matching rules or ordering rules--only\nsubstring matching rules. It can get computationally expensive to perform many\nstring comparisons over large strings like that to check for duplicates. This\nalso prevents huge strings, like those that might appear in the ",(0,r.jsx)(t.code,{children:"description"}),"\nattribute, from being used for naming entries."]}),"\n",(0,r.jsxs)(t.p,{children:["Ordering rules are often ",(0,r.jsx)(t.em,{children:"not"})," defined when there is an ambiguous way for values\nto be sorted: for instance, should you sort telephone numbers by ASCII character\ncode points, alphabetically, or remove all the non-numeric characters and sort\nthem like integers? There is no obvious, universally-assumed way of sorting\nthem."]}),"\n",(0,r.jsx)(t.p,{children:"Substring matching rules are usually undefined for an attribute type when the\nvalues are expected to be small enough that there is little value in substring\nsearches or when a substring of the value would not have any meaning, such as\na substring of an identifier generated from randomness."}),"\n",(0,r.jsx)(t.p,{children:'A matching rule may have "parent matching rules," whose meaning is left up to\ninterpretation. A matching rule may also have an assertion syntax that differs\nfrom the syntax of the value being evaluated: for example, a "letter count"\nmatching rule might take an integer as an assertion value, but evaluate against\na string type by counting the number of letters in the string. A matching rule\nmay define procedures for converting a value of a different syntax into the\nassertion syntax. If no assertion syntax is defined for a matching rule, the\nassertion syntax is the same as the syntax of the attribute on which the\nmatching rule is used.'}),"\n",(0,r.jsx)(t.h3,{id:"context-types",children:"Context Types"}),"\n",(0,r.jsxs)(t.p,{children:['Attribute values can be tagged with a sort of "metadata" called ',(0,r.jsx)(t.em,{children:"contexts"}),".\nContexts are more general-purpose annotations for attribute values that are used\nlike so:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["To annotate strings with the language. For instance, if an organization has a\n",(0,r.jsx)(t.code,{children:"description"})," attribute value in English and another value in German, the\nEnglish value can be tagged with a ",(0,r.jsx)(t.code,{children:"languageContext"})," with a value that\nidentifies it as English, and likewise for the German description."]}),"\n",(0,r.jsxs)(t.li,{children:["To indicate the time in which a value was/is true: by using a\n",(0,r.jsx)(t.code,{children:"temporalContext"}),", a directory entry can indicate that Mrs. Jane Smith's last\nname was Doe up until July 25th, 2023, when she got married. This would be\ndone by having a ",(0,r.jsx)(t.code,{children:"surname"})," attribute value of ",(0,r.jsx)(t.code,{children:"Doe"})," using a ",(0,r.jsx)(t.code,{children:"temporalContext"}),"\nindicating that this value is not applicable after July 25th, 2023, and\nanother value of ",(0,r.jsx)(t.code,{children:"Smith"}),' with no contexts. Instead of deleting old information\nin the directory, it can be annotated with the "validity time" so that the\ndirectory can be queried across time. This means that a directory can\nfunction like a time-series database.']}),"\n",(0,r.jsx)(t.li,{children:"To indicate the applicable locale of a numeric unit, such as a currency."}),"\n",(0,r.jsx)(t.li,{children:"To indicate a level of certainty associated with a value whose validity is\nuncertain."}),"\n",(0,r.jsx)(t.li,{children:"To annotate a value with a source of its information. For instance, if an\nattribute value was sourced from a person's birth certificate, this could be\nindicated."}),"\n",(0,r.jsx)(t.li,{children:"To annotate a value with a digital signature, providing data integrity at\nrest."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The type of context is identified by an object identifier. An attribute value\nmay have zero, one, or more contexts of a given type, and may have multiple\ncontext types as well."}),"\n",(0,r.jsx)(t.h3,{id:"the-directory-information-tree",children:"The Directory Information Tree"}),"\n",(0,r.jsx)(t.p,{children:'The entries in a directory are arranged in a hierarchical structure, referred to\nas the Directory Information Tree (DIT). In computer science, a "tree" is\nconventionally thought of and spoken of as being upside-down. The "root" of the\ntree is at the "top," and there are branches beneath the root, leading down to\n"leaves" that terminate branches of the tree. Leaves are at the "bottom" of the\ntree, when using this terminology.'}),"\n",(0,r.jsx)(t.p,{children:'The root of the tree is a magical entry called the "Root DSE," and it is not\ntechnically an "entry," but rather a special entry that is unique for every\ndirectory server, and used to provide information about the directory server.'}),"\n",(0,r.jsx)(t.p,{children:'The entries immediately beneath the Root DSE are referred to as the "top level"\nor "first level." The first level contains real entries, which usually represent\ncountries, international organizations, or top-level domains. These have entries\nbeneath them, and those entries may have entries beneath them, recursively.'}),"\n",(0,r.jsx)(t.h3,{id:"names",children:"Names"}),"\n",(0,r.jsx)(t.p,{children:'Directory entries are named using a selection of attribute values that are\ncalled "distinguished values," each of which are presented as an attribute type\nobject identifier and a value. This group of one or more distinguished values is\nknown as the Relative Distinguished Name (RDN) of the entry.'}),"\n",(0,r.jsx)(t.p,{children:'There may only be, at most, one value from each attribute type within a relative\ndistinguished name. Only certain attribute types may be used in naming. As\nimplied, the relative distinguished name must come from attribute values that\nare actually present in the entry: entries cannot "distinguish" values that they\ndo not have.'}),"\n",(0,r.jsx)(t.p,{children:"The following attribute types are commonly used for naming:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"countryName"}),", often abbreviated as ",(0,r.jsx)(t.code,{children:"c"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"stateOrProvinceName"}),", often abbreviated as ",(0,r.jsx)(t.code,{children:"st"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"localityName"}),", often abbreviated as ",(0,r.jsx)(t.code,{children:"l"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"organizationName"}),", often abbreviated as ",(0,r.jsx)(t.code,{children:"o"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"organizationalUnitName"}),", often abbreviated as ",(0,r.jsx)(t.code,{children:"ou"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"commonName"}),", often abbreviated as ",(0,r.jsx)(t.code,{children:"cn"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"givenName"}),", often abbreviated as ",(0,r.jsx)(t.code,{children:"gn"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"surname"}),", often abbreviated as ",(0,r.jsx)(t.code,{children:"sn"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"domainComponent"}),", often abbreviated as ",(0,r.jsx)(t.code,{children:"dc"})]}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"uid"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"title"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"dnQualifier"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["For the purposes of displaying to humans, attribute types and values are often\nrepresented as type-equals-value pairs (e.g. ",(0,r.jsx)(t.code,{children:"cn=Jonathan Wilbur"}),"). When\ndisplaying whole relative distinguished names, the distinguished values are\njoined with plus signs (",(0,r.jsx)(t.code,{children:"+"}),"), after escaping any plus signs and backslashes\nwithin the attribute values with backslashes (e.g. ",(0,r.jsx)(t.code,{children:"gn=Jonathan+sn=Wilbur"}),")."]}),"\n",(0,r.jsx)(t.p,{children:"Relative distinguished names are only expected to be unique among all entries\nimmediately subordinate to a given other entry."}),"\n",(0,r.jsxs)(t.p,{children:['The ordered sequence of relative distinguished names going from the top level\nentry to the identified entry is refered to as the "distinguished name." This\nname uniquely and globally identifies an entry. When displayed textually, it\nis the string-form relative distinguished names, joined by commas, semi-colons,\nor forward slashes (e.g. ',(0,r.jsx)(t.code,{children:"c=US,st=FL,l=Tampa,gn=Jonathan+sn=Wilbur"}),")."]}),"\n",(0,r.jsx)(t.p,{children:"The Root DSE is an exception to the rules above. The Root DSE has a zero-length\ndistinguished name, and if needed, its relative distinguished name can be\nrepresented as a zero-length relative distinguished name."}),"\n",(0,r.jsxs)(t.p,{children:["The attribute types that must be present or may be present in an entry's\nrelative distinguished name is governed by a ",(0,r.jsx)(t.em,{children:"name form"}),". A name form is a\nschema construct that is enforced by the X.500 directory and uniquely identified\nby an object identifier. Name forms target entries by their structural object\nclass, and there can be multiple name forms defined for a given structural\nobject class. Name forms are not expected to apply uniformly throughout the\nDirectory Information Tree; some regions of the tree can enforce different\nnaming conventions from others."]}),"\n",(0,r.jsx)(t.h3,{id:"aliases",children:"Aliases"}),"\n",(0,r.jsx)(t.p,{children:'Sometimes the names of directory entries need to be changed. For instance, when\npeople get married, it is common for the wife to change her last name to the\nhusband\'s last name. Hence, an entry representing a person may need to be\nrenamed from time to time. In other cases, there are acronyms or pseudonyms by\nwhich people refer to something other than its proper name. To make it easy for\ndirectory users to find what they are looking for, directories support\n"aliases." Aliases are special entries that are simply named pointers to other\nentries.'}),"\n",(0,r.jsxs)(t.p,{children:["For example, let's say a woman with a directory name ",(0,r.jsx)(t.code,{children:"cn=Peggy Sue"}),' gets married\nand changes her last name to "Smith." The directory entry can be renamed to\n',(0,r.jsx)(t.code,{children:"cn=Peggy Smith"})," and a new alias entry named ",(0,r.jsx)(t.code,{children:"cn=Peggy Sue"})," can be created,\nwhich contains a pointer to the ",(0,r.jsx)(t.code,{children:"cn=Peggy Smith"})," entry. The directory can\nseemlessly translate requests to, for example, read the birth date of\n",(0,r.jsx)(t.code,{children:"cn=Peggy Sue"})," to a request to read the birth date of ",(0,r.jsx)(t.code,{children:"cn=Peggy Smith"}),". The\nreverse is true as well: ",(0,r.jsx)(t.code,{children:"cn=Peggy Smith"})," could be the alias and point to\n",(0,r.jsx)(t.code,{children:"cn=Peggy Sue"})," instead."]}),"\n",(0,r.jsxs)(t.p,{children:['For another use case, people may customarily refer to a company such as\n"Pricewaterhouse Coopers International Limited" simply as "PwC" and hence, a\ndirectory name ',(0,r.jsx)(t.code,{children:"o=PwC"})," could be used as an alias for\n",(0,r.jsx)(t.code,{children:"o=Pricewaterhouse Coopers International Limited"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Aliases can be dereferenced in the course of locating an entry, even if they are\nnot the entry sought by a user. For instance, if a directory user tries to read\nan entry ",(0,r.jsx)(t.code,{children:"c=US,st=Florida,cn=Jonathan Wilbur"}),", the directory can resolve the\nalias ",(0,r.jsx)(t.code,{children:"st=Florida"})," to ",(0,r.jsx)(t.code,{children:"st=FL"})," to obtain ",(0,r.jsx)(t.code,{children:"c=US,st=FL,cn=Jonathan Wilbur"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"schema",children:"Schema"}),"\n",(0,r.jsx)(t.p,{children:"In addition to the X.500 schema constructs mentioned above, further constructs\ncan constrain where entries can appear and what object classes, attributes, and\ncontexts they can have."}),"\n",(0,r.jsxs)(t.p,{children:["DIT Structure Rules are used to constrain what name forms (and hence, which\nentries) may be present in a given location in the Directory Information Tree.\nDIT Structure Rules are identified by a numeric identifier that is only unique\nwithin a region of the DIT. DIT Structure Rules are recursively defined as\nsubordinates of other DIT Structure Rules. An example DIT Structure Rule might\nconstrain entries of structural object class ",(0,r.jsx)(t.code,{children:"locality"})," to appear beneath\nentries of structural object class ",(0,r.jsx)(t.code,{children:"country"}),", since the reverse does not make\nsense. The DIT Structure Rule that permitted an entry to be inserted where it\nresides in the DIT is known as that entry's ",(0,r.jsx)(t.em,{children:"governing structure rule"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"DIT Content Rules circumscribe which auxiliary object classes, entries within\na region of the DIT may have, as well as what attribute types MUST, MAY, and\nMUST NOT be present within entries that fall within the purview of the DIT\nContent Rule."}),"\n",(0,r.jsx)(t.p,{children:"Context Use Rules govern which contexts may be present in which attribute\nvalues within a region of the DIT. Matching use rules are used to control which\nmatching combinations are defined for usage."}),"\n",(0,r.jsx)(t.p,{children:'Friend attributes are "friends" of an "anchor attribute." If the anchor\nattribute is used in a search filter, its friends will be evaluated for matches.\nIf the anchor attribute is to be returned in response from the directory, the\nfriend attributes will be returned automatically as well. Both of these cases\ncan be disabled via service controls.'}),"\n",(0,r.jsx)(t.h3,{id:"compound-entries",children:"Compound Entries"}),"\n",(0,r.jsx)(t.p,{children:'In many document-oriented databases, such as MongoDB, ElasticSearch, or CouchDB,\ndocuments themselves can contain "nested documents," and the directory is no\ndifferent in this regard: except these are called "child entries" and the\noverall entry within which they are a substituent is called a "compound entry."'}),"\n",(0,r.jsxs)(t.p,{children:["Child entries are (almost) no different than any other entry in the directory:\nthey are just normal entries, except they have the ",(0,r.jsx)(t.code,{children:"child"})," auxiliary object\nclass (",(0,r.jsx)(t.code,{children:"2.5.6.29"}),'). An entry having this object class means "I am really a part\nof my immediate superior as a compound entry, rather than being a separate\nentry."']}),"\n",(0,r.jsxs)(t.p,{children:["Compound entries are useful for providing relational features to the directory.\nFor example, you can have a compound entries that represent people, and child\nentries that represents computing devices they own. If you want to find\na person that resides in Florida ",(0,r.jsx)(t.strong,{children:"and"}),' has a certain model of device, you\ncan use the "family grouping" feature of a search to obtain only these results,\nrather than performing two separate searches for people and devices and\nperforming an inner join on the client-side.']}),"\n",(0,r.jsx)(t.h3,{id:"hierarchical-groups",children:"Hierarchical Groups"}),"\n",(0,r.jsx)(t.p,{children:'Entries in the directory are arranged into a hierarchy, as established already.\nHowever, sometimes there is a need for some other hierarchy that is independent\nof the underlying directory structure. X.500 directories allow this via\n"hierarchical groups," which function like a "virtual hierarchy" on top of the\ndirectory.'}),"\n",(0,r.jsxs)(t.p,{children:["Hierarchical groups work very simply: each member in the virtual hierarchy has\nan attribute ",(0,r.jsx)(t.code,{children:"hierarchicalParent"})," that points to its superior in this virtual\nhierarchy. There are other attributes that are supposed to be managed by the\ndirectory automatically:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"hierarchyBelow"})," is a ",(0,r.jsx)(t.code,{children:"BOOLEAN"})," that indicates whether a hierarchical group\nmember has subordinates in the virtual hierarchy."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"hierarchyTop"})," points to the most superior entry in the virtual hierarchy."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"hierarchyLevel"})," indicates how deep within the virtual hierarchy an entry\nresides."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"These are only used in searches to provide relational capabilities across this\nvirtual hierarchy. For example, if the virtual hierarchy reflects the managerial\nstructure of an organization, you can query the directory for all managers of\nemployees that have poor performance reviews."}),"\n",(0,r.jsx)(t.h3,{id:"collective-attributes",children:"Collective Attributes"}),"\n",(0,r.jsx)(t.p,{children:'As the directory grows, there might be a need to place the same attribute values\nwithin entries over and over again, thereby wasting data storage space. For\nexample, in a small city that falls entirely within a single postal code, every\nresident might have the exact same postal code (e.g. a "ZIP code" in the United\nStates). Instead of creating 100,000 copies of this value for 100,000 denizens,\nthe directory can store a collective variant of postal code that applies to\nall denizens automatically.'}),"\n",(0,r.jsx)(t.p,{children:"Collective attributes are typically subtypes of some other non-collective\nattribute type, so that assertions that match against the collective variant\nmatch against the non-collective, and vice versa. As with other features we've\nmentioned so far, this provides relational searches. Recycling the previous\nexample, you could search for all people with a certain name residing within a\ncertain postal code."}),"\n",(0,r.jsxs)(t.p,{children:["This may seem precarious in that a single exception to a collective attribute\nassignment may necessitate abandoning the collective assignment of this\nattribute, and individually assigning the attribute, making us no better off\nthan before, but the X.500 specifications have this scenario covered by allowing\nentries to be marked as one-off exceptions via the ",(0,r.jsx)(t.code,{children:"collectiveExclusions"}),"\nattribute. If 99,999 of our denizens live in a postal code, but a single person\nlives in a different one, we can mark them as excluded from the applicability of\nthis collective attribute."]}),"\n",(0,r.jsx)(t.h2,{id:"operations",children:"Operations"}),"\n",(0,r.jsx)(t.p,{children:'Interactions with the directory use a request-response model. The types of\nrequests and responses supported by the directory are defined as "operations."\nAs a simple example, "operations" for a padlock might be "lock" and "unlock."\n"Operations" for a video player might include "play," "pause," "fast-forward,"\netc. In a database, "operations" might include "search," or "insert."'}),"\n",(0,r.jsx)(t.p,{children:'The definition of an operation includes the syntax of the parameters for it\n(the "argument type"), the parameters expected in the response (the "result\ntype"), and what types of errors might be returned by an operation. The errors\nthemselves specify what parameters they might include.'}),"\n",(0,r.jsx)(t.p,{children:"For example, an operation to read an entry from a directory takes the\ndistinguished name of the entry to read in the argument. The result includes\nthe entry if it exists and if the user is authorized. If the entry does not\nexist, the user is not authorized, or some other issue makes it impossible or\nundesirable to fulfill the request, an error may be returned, indicating the\nnature of the problem."}),"\n",(0,r.jsx)(t.h2,{id:"rose-protocols-and-transport",children:"ROSE Protocols and Transport"}),"\n",(0,r.jsx)(t.p,{children:'In the same way that a protocol stack such as TCP/IP encapsulates messages used\nby the application layer and provides services such as in-order delivery, the\nRemote Operation Service element (ROSE) is an abstract service that "frames"\nmessages to the directory to identify whether they are requests, results,\nerrors, rejections, etc., tags requests with a unique numeric identifier so\nthey can be cancelled or monitored, and tags requests with an identifier of the\noperation type (such as a "read" or "search"). ROSE is, in other words, a\nRemote Procedure Call (RPC) mechanism.'}),"\n",(0,r.jsx)(t.p,{children:'The abstract Remote Operation Service Element can be provided by the OSI\nprotocol stack via a protocol defined in the X.880-series of ITU-T\nRecommendations, but it can also be provided over the "Internet Directly-Mapped"\n(IDM) protocol defined in ITU-T Recommendation X.519 specifically for usage by\nthe directory, which runs over TCP/IP. There may be more implementations I do\nnot know about: it is defined as an abstract service so it can be provided in\nmany ways.'}),"\n",(0,r.jsx)(t.h2,{id:"binding-and-unbinding",children:"Binding and Unbinding"}),"\n",(0,r.jsx)(t.p,{children:'Before a Remote Operation Service Element (ROSE) can provide the Remote\nOperations Service (ROS), the "initiator" between two correspondent endpoints\nmust "bind." A bind is a special operation that performs any initial setup for\nthe ongoing ROS dialogue, which usually includes authentication, but could also\ninclude version or feature negotiation. The bind operation has no invocation\nidentifier: there may only be one bind operation outstanding at a time.'}),"\n",(0,r.jsx)(t.p,{children:'When a ROS peer is done, they may (or must, depending on how you look at it),\nunbind. Unbind basically just says "I\'m done," but it could also include a\nreason why "I\'m done" such as "I\'m done, because I am suffering from an\nunrecoverable error."'}),"\n",(0,r.jsx)(t.p,{children:"Requests may not be sent after unbinding. After unbinding, the dialogue is\ncomplete. However, the underlying transport may remain open, if desired; in\nconcrete terms, the TCP socket may still be kept alive and re-used for a\nsubsequent bind, perhaps to authenticate as a different user."}),"\n",(0,r.jsx)(t.h2,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsx)(t.p,{children:"As we have established, authentication information is carried in the bind\noperation."}),"\n",(0,r.jsx)(t.p,{children:"There are five forms of authentication defined in the directory specifications:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"simple"}),": Authentication via a distinguished name (username) and password"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"strong"}),": Authentication via a cryptographic signature proving you possess a key"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"externalProcedure"}),": An authentication procedure identified by an object identifier"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"spkm"}),": Simple Public-Key GSS-API Mechanism (SPKM) described in IETF RFC 2025"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"sasl"}),": Simple Authentication and Security Layer (SASL), which is itself a\nflexible encapsulation mechanism for many more authentication\nexchanges."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"the-dap-operations",children:"The DAP Operations"}),"\n",(0,r.jsx)(t.p,{children:"The directory service is provided to users via the Directory Access Protocol\n(DAP), which is a suite of 11 operations briefly described as such:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"read"}),": Read a single entry"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"compare"}),": Evaluate an assertion against an entry, returning whether it matches"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"abandon"}),": Abandon an ongoing operation"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"list"}),": List the entries immediately subordinate to an entry in the DIT"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"search"}),": Search for entries using a filter"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"addEntry"}),": Create a new entry"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"removeEntry"}),": Delete an entry"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"modifyEntry"}),": Modify an entry, such as by adding attributes"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"modifyDN"}),": Rename an entry, or move it and its descendants entirely"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"administerPassword"}),": Reset a password of an entry"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"changePassword"}),": Change a password of an entry"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:'Almost all of these operations share some parameters in their arguments (called\n"the common arguments"), and likewise, their results also share some parameters,\ncalled "the common results."'}),"\n",(0,r.jsx)(t.p,{children:'The common arguments include "service controls," which can be used to specify\namong other things, how requests may be passed on to other directory servers,\nthe priority of the request, the time limit of the request, the limit on the\nnumber of entries returned from searches or listings, whether (possibly\nout-of-date) replicated data is sufficient, whether aliases should be\ndereferenced automatically, and how large of an attribute is "too large." Other\ncommon arguments can be supplied to specify what contexts should be used for\nassertions, or how compound entries are to be evaluated for matches in searches.'}),"\n",(0,r.jsx)(t.p,{children:"The common results may include the name of the server that fulfilled the\nrequest, a flag indicating whether an alias was dereferenced, or attributes used\nto provide notifications, warnings, or other information to the directory user."}),"\n",(0,r.jsx)(t.h2,{id:"chaining",children:"Chaining"}),"\n",(0,r.jsx)(t.p,{children:'The entire directory service can be (and is likely to be) split up among a\nmultitude of servers cooperating with each other. The individual servers\nproviding the directory service are called Directory System Agents (DSAs), and\nthe clients that interact with them are called Directory User Agents (DUAs).\nSometimes, the right place for a request to be fulfilled is not the DSA that\noriginally received the request from the DUA. In other cases, the original\nrecipient of the request may only be able to partially satisfy the request, and\nmay require more information from other directory servers. To fulfill such\nrequests, directory servers do what is called "chaining," which is where they\nwrap the request in an envelope of sorts, send this request to other servers\nsaying "this is the original request, and this is what specifically I need from\nyou to fulfill it." These secondary recipients may, in turn, chain the request,\nrecursively, meaning that a single request could potentially propagate into a\nlarge number of chained messages to many DSAs.'}),"\n",(0,r.jsx)(t.p,{children:'The protocol that DSAs speak with each other to provide chaining, and\ntherefore the total satisfaction of requests, is called the Directory System\nProtocol (DSP). The syntax for almost all of its operations are identical to\nthose of the Directory Access Protocol (DAP), except with a "chaining arguments"\nenvelope that encloses the analogous DAP request, result, or error.'}),"\n",(0,r.jsx)(t.p,{children:'In lieu of chaining, directory servers may simply return a referral, which\nbasically says "here is the server to which you need to send your request."'}),"\n",(0,r.jsx)(t.p,{children:"Directory users may indicate that they prefer chaining or that they forbid\nchaining entirely. They can also indicate that replicas of entries are\nsatisfactory--that master copies are not needed--and hence, the directory\nshould not chain requests to servers hosting the master copy if they themselves\nhave a non-master copy. (What an excellent segue to our next topic!)"}),"\n",(0,r.jsx)(t.h2,{id:"shadowing",children:"Shadowing"}),"\n",(0,r.jsx)(t.p,{children:'The directory supports the replication of entries as read-only copies into\nother directories for performance purposes (arguably security as well). This\nreplication is called "shadowing." Directory servers that store read-only copies\nor the "master" directory entries are said to "shadow" the "master" DSAs.'}),"\n",(0,r.jsxs)(t.p,{children:["Shadowing improves the throughput of the directory because read-only operations,\nsuch as searches, can be handled by an infinite number of replicas, and the\nmaster can exclusively deal with modification operations, such as ",(0,r.jsx)(t.code,{children:"addEntry"}),"\nor ",(0,r.jsx)(t.code,{children:"modifyEntry"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Shadowing is very flexible and can include all entries within a subtree of the\nDIT or only a selection of said entries, and the replicated entries may receive\nall of the attributes of the master copies, or just a selection of them."}),"\n",(0,r.jsx)(t.p,{children:'Shadowed information can be shadowed from other shadow DSAs as well. For this\nreason, the directory specifications make use of the terms "shadow supplier"\nand "shadow consumer" rather than "master" and "shadow," because the supplier of\nthe shadowed data could itself be a shadow.'}),"\n",(0,r.jsx)(t.p,{children:"Directory users can indicate that copies will suffice for their request. Copies\nare often less authoritative than shadows, since they may contain stale or\nout-of-date information, depending on how frequently updates to the master are\npropagated to the shadows, but using copies is likely to speed up directory\noperations."}),"\n",(0,r.jsx)(t.h2,{id:"relaxation-or-tightening",children:"Relaxation or Tightening"}),"\n",(0,r.jsx)(t.p,{children:'Sometimes when you perform a search, you start with an idea of how many entries\nyou\'d like to receive. The directory has a mechanism for altering search\ncriteria on the fly to target the requested number of entries. This is done via\n"relaxation" which is where search criteria are altered to become less strict or\nremoved entirely to increase the number of results returned, or "tightening" in\nwhich they become more restrictive to reduce the number of results returned.'}),"\n",(0,r.jsx)(t.p,{children:"There are two ways this is achieved: matching-rule substitution and\nmapping-based matching."}),"\n",(0,r.jsx)(t.p,{children:"In matching-rule substitution, the matching rules used\nto compose the search filter are replaced with more or less restrictive\nequivalents. For instance, a case-sensitive search could be replaced with a\ncase-insensitive search if too few results are matching."}),"\n",(0,r.jsx)(t.p,{children:"In mapping-based matching, certain filter criteria are replaced with others\nbased on exterior data the directory has. One example of this would be a\nmap of postal codes to cities. If a search is not turning up enough results, the\ndirectory can retry the request by replacing a filter selecting for a certain\ncity with a filter for all of the postal codes that intersect with the bounds of\nthe city and those neighboring them. In this sense, the directory would use its\ngeographic knowledge to search a broader area for matching entries."}),"\n",(0,r.jsxs)(t.p,{children:["In fact, the directory also allows users to control ",(0,r.jsx)(t.em,{children:"how much broader"}),' each\nsubsequent retry of the search is via an "extended area" parameter.']}),"\n",(0,r.jsx)(t.h2,{id:"signing",children:"Signing"}),"\n",(0,r.jsx)(t.p,{children:"Directory requests, results, and errors may be cryptographically-signed to\nprovide non-repudiation and integrity. Transport Layer Security (TLS) provides\nconfidentiality and integrity in point-to-point traffic between a client and\nserver, but it does not protect a message that is passed along a chain of\nservers. One of the servers in the chain could alter the message along the way\nunless it is signed to prove its authenticity!"}),"\n",(0,r.jsx)(t.p,{children:"Even if a user does not sign his requests, he can still request that the DSA\nsign its responses, including errors."})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);