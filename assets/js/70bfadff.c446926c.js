"use strict";(self.webpackChunkdirectory=self.webpackChunkdirectory||[]).push([[1101],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var a=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(t),u=i,m=c["".concat(l,".").concat(u)]||c[u]||h[u]||o;return t?a.createElement(m,r(r({ref:n},p),{},{components:t})):a.createElement(m,r({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var d=2;d<o;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6076:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var a=t(8168),i=t(8587),o=(t(6540),t(5680)),r=["components"],s={},l="Add NHOBs and Subordinates",d={unversionedId:"tutorial03",id:"tutorial03",title:"Add NHOBs and Subordinates",description:"Non-Specific Operational Bindings (NHOB) allow multiple DSAs to share a",source:"@site/docs/tutorial03.md",sourceDirName:".",slug:"/tutorial03",permalink:"/directory/docs/tutorial03",draft:!1,editUrl:"https://github.com/Wildboar-Software/directory/edit/main/website/docs/tutorial03.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tutorial 2: Hooking up Gitea with Meerkat DSA",permalink:"/directory/docs/tutorial02"},next:{title:"ASN.1 Modules",permalink:"/directory/docs/asn1"}},p={},c=[{value:"Relayed Operational Bindings",id:"relayed-operational-bindings",level:2},{value:"Client Setup",id:"client-setup",level:3},{value:"Scenario and Setup for Both Approaches",id:"scenario-and-setup-for-both-approaches",level:2},{value:"Procedures for Superior-Initiated NHOBs",id:"procedures-for-superior-initiated-nhobs",level:2},{value:"Procedures for Subordinate-Initiated NHOBs",id:"procedures-for-subordinate-initiated-nhobs",level:2},{value:"Using the AddEntry operation to Add NHOB Subordinate Entries",id:"using-the-addentry-operation-to-add-nhob-subordinate-entries",level:2},{value:"Terminating an NHOB",id:"terminating-an-nhob",level:2}],h={toc:c},u="wrapper";function m(e){var n=e.components,t=(0,i.A)(e,r);return(0,o.yg)(u,(0,a.A)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"add-nhobs-and-subordinates"},"Add NHOBs and Subordinates"),(0,o.yg)("p",null,"Non-Specific Operational Bindings (NHOB) allow multiple DSAs to share a\nnamespace immediately subordinate to an entry. This special entry that serves as\nthe immediate superior to this shared namespace is referred to as a\nNon-Specific Subordinate Reference (NSSR). As a part of it's role as an NSSR, it\nstores the exhaustive list of access points for the subordinate DSAs where all\nimmediate subordinates may be found."),(0,o.yg)("p",null,"In this tutorial, you will learn how to use the\n",(0,o.yg)("a",{parentName:"p",href:"/directory/docs/x500cli"},"X.500 command-line interface")," to set up an NHOB in your DSA."),(0,o.yg)("p",null,"There are two ways that NHOBs can be created in X.500 directories: from the\nsuperior to the subordinate DSAs, or vice versa. In other words, the superior\nDSA can solicit subordinate DSAs to share a namespace below one of its entries,\nor a subordinate DSA can request to join such a namespace within a superior DSA.\nWe will review both here."),(0,o.yg)("h2",{id:"relayed-operational-bindings"},"Relayed Operational Bindings"),(0,o.yg)("p",null,"Though the X.500 specifications formalize the means by which operational\nbindings are established, modified, and terminated between DSAs, some\noperational bindings have no defined procedures for being triggered by the\nadministrator. To create a normal Hierarchical Operational Binding (HOB), you\ncan use the ",(0,o.yg)("inlineCode",{parentName:"p"},"addEntry")," operation with the ",(0,o.yg)("inlineCode",{parentName:"p"},"targetSystem")," component, which\nshould trigger a DSA to establish a new Hierarchical Operational Binding."),(0,o.yg)("p",null,"This is NOT the case for an NHOB. There is no defined way in the X.500\nspecifications to induce a DSA to establish an NHOB with another DSA. For this\nreason, Wildboar Software implemented a feature in Meerkat DSA that makes this\npossible:\n",(0,o.yg)("a",{parentName:"p",href:"/directory/docs/opbinding#relayed-operational-bindings"},"Relayed Operational Bindings"),"."),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"You do not need to know how Relayed Operational Bindings work, but you should\nknow that this tutorial will only apply to Meerkat DSA because of this feature.")),(0,o.yg)("h3",{id:"client-setup"},"Client Setup"),(0,o.yg)("p",null,"The use of Relayed Operational Bindings requires the DUA to use the ",(0,o.yg)("em",{parentName:"p"},"exact same"),'\nsigning key as is used by the DSA for signing the DOP request. This basically\ninforms the DSA that "I have permission to act on behalf of you, the DSA. I am\nclearly an administrator because I possess your signing key." You will need to\nobtain the signing key and certificate chain and\n',(0,o.yg)("a",{parentName:"p",href:"/directory/docs/client-config#strong-credentials"},"configure your X.500 CLI")," to use them.\nThis is only necessary for the commands that begin with ",(0,o.yg)("inlineCode",{parentName:"p"},"x500 dop"),". Other\ncommands in this section can be executed using normal authentication."),(0,o.yg)("h2",{id:"scenario-and-setup-for-both-approaches"},"Scenario and Setup for Both Approaches"),(0,o.yg)("p",null,"First, we create an entry. It could be a first level entry, but in our case, we\nwill add a deeper entry. This entry will represent the North American Directory\nForm (NADF), which is a real organization that once existed long ago for\npromoting the X.500 directory standards."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"x500 dap add org 'c=US,o=NADF' --organizationName=NADF\n")),(0,o.yg)("p",null,"We will pretend that this organization is a conglomeration of other\norganizations (which might have been true). As such, for an organization to\nformally join the NADF, they would have to have an entry of object class\n",(0,o.yg)("inlineCode",{parentName:"p"},"organization")," beneath the NADF's entry in the DIT. We will make NADF an NSSR\nin an NHOB (take some time to digest those acronyms if you need), so that\nmultiple DSAs can host the organization entries that are immediately subordinate\nto the ",(0,o.yg)("inlineCode",{parentName:"p"},"c=US,o=NADF")," entry."),(0,o.yg)("p",null,"We will refer to these two fictional subordinate DSAs by their AE-titles:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"c=US,st=GA,l=Atlanta,cn=Atlanta DSA")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"c=US,st=VA,l=Norfolk,cn=Norfolk DSA"))),(0,o.yg)("p",null,"The root DSA will be: ",(0,o.yg)("inlineCode",{parentName:"p"},"cn=dsa01.root.mkdemo.wildboar.software"),"."),(0,o.yg)("h2",{id:"procedures-for-superior-initiated-nhobs"},"Procedures for Superior-Initiated NHOBs"),(0,o.yg)("p",null,"In Meerkat DSA, establishing the NHOB from the superior is a simple\none-line command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"x500 dop become nssr 'c=US,o=NADF' 'c=US,st=GA,l=Atlanta,cn=Atlanta DSA' --naddr=idms://dsa.atlanta.gov:44632\n")),(0,o.yg)("p",null,"We can break down this command like so:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"x500"),": the name of the excutable"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"dop"),": Directory Operational Binding Management subcommands"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"become nssr"),": Establish a new NHOB by making a DSE an NSSR with respect to a subordinate DSA"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"c=US,o=NADF"),": The entry that we want to become the NSSR"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"c=US,st=GA,l=Atlanta,cn=Atlanta DSA"),": The AE-title of the subordinate DSA"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"--naddr=idms://dsa.atlanta.gov:44632"),": At least one network address where the subordinate DSA can be reached")),(0,o.yg)("p",null,"When this command is executed, the X.500 CLI will send a Relayed DOP request\nto your local Meerkat DSA. Meerkat DSA will then modify this DOP request,\nfilling in details, re-sign it, and submit it to the DSA indicated."),(0,o.yg)("p",null,"The AE-title provided in the command above is required both for the DSA to\nperform strong authentication and because the AE title is a required part of\nthe ",(0,o.yg)("inlineCode",{parentName:"p"},"AccessPoint")," construct used in X.500 directories."),(0,o.yg)("p",null,"After you have ran this command, ",(0,o.yg)("inlineCode",{parentName:"p"},"c=US,o=NADF")," will be an NSSR, and it will\nsearch for its subordinates in one or more subordinate DSAs. If the subordinate\nDSA is a Meerkat DSA instance, it will automatically add any non-existing\nentries in the context prefix; so the subordinate DSA in this example will also\nhave ",(0,o.yg)("inlineCode",{parentName:"p"},"C=US,o=NADF"),", but these will only be DSEs of type ",(0,o.yg)("inlineCode",{parentName:"p"},"glue"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"admPoint"),",\n",(0,o.yg)("inlineCode",{parentName:"p"},"rhob"),", etc. (unless they already existed as something else) as are usually\ncreated by hierarchical operational bindings. This also means that you can add\nentries beneath this prefix within the subordinate DSA now."),(0,o.yg)("p",null,"The command above may be run multiple times for the same NSSR. So even though\nthe name of the command is ",(0,o.yg)("inlineCode",{parentName:"p"},"x500 dop become nssr"),", it will work fine even if the\ntargeted DSE is already an NSSR."),(0,o.yg)("p",null,"Let's say we add an entry ",(0,o.yg)("strong",{parentName:"p"},"to the Atlanta DSA"),", like so:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"x500 dap add org 'c=US,o=NADF,o=Wildboar Software' --organizationName='Wildboar Software'\n")),(0,o.yg)("p",null,"Now, when you use the ",(0,o.yg)("inlineCode",{parentName:"p"},"list")," operation to list the subordinates of ",(0,o.yg)("inlineCode",{parentName:"p"},"c=US,o=NADF"),",\nyour request will be continued--if permitted by access control and other\nconfiguration--into the subordinate DSAs to obtain the complete list of all\nsubordinate entries. There is only ",(0,o.yg)("inlineCode",{parentName:"p"},"o=Wildboar Software")," in our case."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"$ x500 dap list 'c=US,o=NADF'\n::::BEGIN LIST RESULT:::::\n(Composed of the next 1 uncorrelated result sets)\n:::::BEGIN LIST RESULT:::::\nALIAS DEREFERENCED: FALSE\nPERFORMER: c=US,st=GA,l=Atlanta,cn=Atlanta DSA\nSECURITY PARAMETERS\n| NAME: cn=dsa01.root.mkdemo.wildboar.software\n| TIME: Thu Apr 20 2023 08:19:39 GMT-0400 (Eastern Daylight Time)\n| RANDOM: 11001001101111110110010001111000\n| TARGET: 1\n| OPCODE: 4\n| ERROR PROTECTION: 1\nSUBORDINATES:\n#0001: - ! o=Wildboar Software\n\n:::::END LIST RESULT:::::\n:::::END LIST RESULT:::::\n\n")),(0,o.yg)("p",null,"Behaviorally, this may seem just like a normal hierarchical operational binding,\nbut if you add more subordinate DSAs, your requests will fan out into each of\nthem in the process of resolving names or continuing list or search operations."),(0,o.yg)("h2",{id:"procedures-for-subordinate-initiated-nhobs"},"Procedures for Subordinate-Initiated NHOBs"),(0,o.yg)("p",null,"Joining an NSSR as a subordinate DSA is also a one-line command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"x500 dop join nssr 'c=US,o=NADF' 'cn=dsa01.root.mkdemo.wildboar.software' --naddr=idms://dsa01.root.mkdemo.wildboar.software:44632\n")),(0,o.yg)("p",null,"Note that, in this case, you are binding to the subordinate DSA and therefore,\nyou will need to use the subordinate DSA's signing key and certificate chain\nfor signing the request."),(0,o.yg)("p",null,"After the above command completes, you should be get the same list results as\nshown in the section above."),(0,o.yg)("h2",{id:"using-the-addentry-operation-to-add-nhob-subordinate-entries"},"Using the AddEntry operation to Add NHOB Subordinate Entries"),(0,o.yg)("p",null,"You may also use the ",(0,o.yg)("inlineCode",{parentName:"p"},"addEntry")," operation to add subordinates to an NHOB. In\nMeerkat DSA, if the immediate superior of the new entry is an NSSR, and if the\n",(0,o.yg)("inlineCode",{parentName:"p"},"targetSystem")," component of the argument is present and refers to one of the\naccess points named as a subordinate in a related NHOB, Meerkat DSA will chain\nthe ",(0,o.yg)("inlineCode",{parentName:"p"},"addEntry")," operation to that subordinate, rather than creating the entry\nlocally or creating a hierarchical operational binding."),(0,o.yg)("p",null,"Continuing on our previous examples, you might do so like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"x500 dap add org 'c=US,o=NADF,o=Dispatch.fm' \\\n  --organizationName='Dispatch.fm' \\\n  --target-ae-title='cn=dispatch.fm' \\\n  --target-naddr=idms://dsa01.dispatch.fm:44632\n")),(0,o.yg)("p",null,"If ",(0,o.yg)("inlineCode",{parentName:"p"},"dsa01.dispatch.fm")," already has an NHOB established with the superior DSA,\nthis entry will simply get added in this DSA, rather than establishing a new\nHierarchical Operational Binding (HOB)."),(0,o.yg)("h2",{id:"terminating-an-nhob"},"Terminating an NHOB"),(0,o.yg)("p",null,"Terminating an NHOB is easy as well, if you can obtain the operational binding\nidentifier. Continuing on the previous example, if we assume that our root DSA's\noperational binding established with ",(0,o.yg)("inlineCode",{parentName:"p"},"dispatch.fm")," has an operational binding\nidentifier of ",(0,o.yg)("inlineCode",{parentName:"p"},"12345"),", this command will terminate that operational binding:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"x500 dop terminate '2.5.19.3' 12345 'cn=dispatch.fm'\n")),(0,o.yg)("p",null,"The above command almost speaks for itself except for the ",(0,o.yg)("inlineCode",{parentName:"p"},"2.5.19.3"),". This is\nthe object identifier of the NHOB operational binding type. The final argument\nis the AE-title of the DSA with whom the operational binding shall be\nterminated."))}m.isMDXComponent=!0}}]);