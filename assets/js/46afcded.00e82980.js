"use strict";(self.webpackChunkdirectory=self.webpackChunkdirectory||[]).push([[9348],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},979:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={},l="Versioning",c={unversionedId:"versioning",id:"versioning",title:"Versioning",description:"Meerkat DSA roughly uses Semantic Versioning, but it is",source:"@site/docs/versioning.md",sourceDirName:".",slug:"/versioning",permalink:"/directory/docs/versioning",draft:!1,editUrl:"https://github.com/Wildboar-Software/directory/edit/main/website/docs/versioning.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Changelog for Meerkat DSA",permalink:"/directory/docs/changelog-meerkat"},next:{title:"Support",permalink:"/directory/docs/support"}},p={},m=[{value:"What is the current version?",id:"what-is-the-current-version",level:2},{value:"Incrementing the Version",id:"incrementing-the-version",level:2}],u={toc:m},d="wrapper";function h(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"versioning"},"Versioning"),(0,i.kt)("p",null,"Meerkat DSA roughly uses ",(0,i.kt)("a",{parentName:"p",href:"https://semver.org/"},"Semantic Versioning"),', but it is\nnot entirely clear what constitutes a "breaking change" for something other than\na pure API. What about changes to environment variable names, or log messages?\nIn the face of this ambiguity, Meerkat DSA takes a somewhat liberal approach to\nversioning, in part to avoid scaring off new users with repeated major version\nincrements.'),(0,i.kt)("h2",{id:"what-is-the-current-version"},"What is the current version?"),(0,i.kt)("p",null,"There are multiple files throughout this repository that indicate version\nnumbers. These all need to be updated with a version change, but may not happen\nat the same time. As such,\n",(0,i.kt)("strong",{parentName:"p"},"the git tag shall be considered authoritative for identifying a version"),".\nJust because the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"apps/meerkat")," says ",(0,i.kt)("inlineCode",{parentName:"p"},"2.5.0")," does not mean\nthat you are looking at version ",(0,i.kt)("inlineCode",{parentName:"p"},"2.5.0"),". It could be a few commits after the\nreal version ",(0,i.kt)("inlineCode",{parentName:"p"},"2.5.0"),". The exact commit identified by a ",(0,i.kt)("inlineCode",{parentName:"p"},"v#.#.#")," tag shall be\n",(0,i.kt)("em",{parentName:"p"},"the")," version, and all other commits on the ",(0,i.kt)("inlineCode",{parentName:"p"},"master"),' branch shall be considered\n"non-version," "inter-version," or "non-release" commits, however you might\nchoose to phrase that.'),(0,i.kt)("h2",{id:"incrementing-the-version"},"Incrementing the Version"),(0,i.kt)("p",null,"Unfortunately, there is no sure fire way to bump the version currently. I just\nsearch for all files containing the current version and increment those.\nCurrently, the files I change are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./.github/workflows/meerkat.yml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./apps/meerkat-docs/docs/changelog-meerkat.md")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./apps/meerkat-docs/docs/conformance.md")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./k8s/charts/meerkat-dsa/Chart.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./pkg/control")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./pkg/docker-compose.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./pkg/meerkat-dsa.rb")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./snap/snapcraft.yaml"))))}h.isMDXComponent=!0}}]);