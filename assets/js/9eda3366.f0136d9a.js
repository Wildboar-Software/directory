"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[226],{1184:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(4041);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}},5193:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"zonal","title":"Zonal Matching","description":"Meerkat DSA supports Zonal Matching which is a Mapping-Based Matching (defined","source":"@site/docs/zonal.md","sourceDirName":".","slug":"/zonal","permalink":"/directory/docs/zonal","draft":false,"unlisted":false,"editUrl":"https://github.com/Wildboar-Software/directory/edit/main/website/docs/zonal.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Usage","permalink":"/directory/docs/usage"},"next":{"title":"Attribute Certificates","permalink":"/directory/docs/attr-cert"}}');var i=t(1085),o=t(1184);const s={},r="Zonal Matching",l={},d=[{value:"Meerkat DSA&#39;s Zonal Matching Definition",id:"meerkat-dsas-zonal-matching-definition",level:2},{value:"Meerkat DSA&#39;s Zonal Matching Algorithm",id:"meerkat-dsas-zonal-matching-algorithm",level:2},{value:"Nuances",id:"nuances",level:2},{value:"Seeding the Gazetteer (Zonal Mapping Database)",id:"seeding-the-gazetteer-zonal-mapping-database",level:2},{value:"USA-only Gazetteer Seed",id:"usa-only-gazetteer-seed",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"zonal-matching",children:"Zonal Matching"})}),"\n",(0,i.jsxs)(n.p,{children:["Meerkat DSA supports Zonal Matching which is a Mapping-Based Matching (defined\nin ",(0,i.jsx)(n.a,{href:"https://www.itu.int/rec/T-REC-X.501/en",children:"ITU Recommendation X.501 (2019)"}),",\nSection 13.6.2) that is defined in\n",(0,i.jsx)(n.a,{href:"https://www.itu.int/rec/T-REC-X.520/en",children:"ITU Recommendation X.520 (2019)"}),',\nSection 8.8. Essentially, if a user-provided search filter does not yield any\nresults by selecting for entries in a specific locality (e.g. city, township),\nMeerkat DSA can perform a geographically-intelligent replacement of the\nexcessively restrictive search filter items to a match on "zones" (if requested\nby the user). In Meerkat DSA\'s case, postal codes are used as "zones."']}),"\n",(0,i.jsxs)(n.p,{children:["This can be useful if, say, you are searching for a person that may not\ntechnically live in ",(0,i.jsx)(n.code,{children:"C=US,ST=FL,L=Tampa"}),', but might live within the greater\noutlying "Tampa metropolitan area." If requested, and if no entries under\n',(0,i.jsx)(n.code,{children:"C=US,ST=FL"})," had the locality name ",(0,i.jsx)(n.code,{children:"Tampa"})," (as specified in the search filter),\nsearch filter item asserting ",(0,i.jsx)(n.code,{children:"Tampa"})," would be replaced with one or more equality\nassertions of the ",(0,i.jsx)(n.code,{children:"postalCode"})," attribute, whose asserted values would be postal\ncodes within and surrounding Tampa."]}),"\n",(0,i.jsx)(n.h2,{id:"meerkat-dsas-zonal-matching-definition",children:"Meerkat DSA's Zonal Matching Definition"}),"\n",(0,i.jsx)(n.p,{children:"There are no specific implementations of zonal matching defined in the X.500\nspecifications, and--as far as I know--none were ever defined anywhere. So\nMeerkat DSA had to define its own zonal matching. Below is its ASN.1\nspecification, followed by an explanation of how it works."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-asn1",children:"id-zmr-postalZonalMatch OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 56490 58 1 }\npostalZonalMatch ZONAL-MATCHING ::= {\n    SELECT BY           {\n        id-at-countryName\n        | id-at-stateOrProvinceName\n        | id-at-localityName }\n    APPLICABLE TO       { stateOrProvinceName | localityName }\n    SUBTYPES INCLUDED   TRUE\n    COMBINABLE          TRUE\n    USER CONTROL        TRUE\n    EXCLUSIVE           TRUE\n    MATCHING RULE       zonalMatch.&id\n    ID                  id-zmr-postalZonalMatch\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The above means that, if zonal matching is requested, it will be chosen if the\nbase object name and the search filter together can produce ",(0,i.jsx)(n.code,{children:"countryName"}),",\n",(0,i.jsx)(n.code,{children:"stateOrProvinceName"}),", and ",(0,i.jsx)(n.code,{children:"localityName"})," assertions. If any one of these is\nmissing, this zonal matching will not be used. Since this is the only zonal\nmatching implemented in Meerkat DSA, this also means that no zonal matching will\nbe used at all."]}),"\n",(0,i.jsxs)(n.p,{children:["The above specification also indicates that ",(0,i.jsx)(n.code,{children:"localityName"})," and\n",(0,i.jsx)(n.code,{children:"stateOrProvinceName"})," will be replaced by the assertions this zonal mapping\nproduces in the search filter."]}),"\n",(0,i.jsx)(n.p,{children:"This implementation is combinable, meaning that multiple filter items can be\nused to produce a mapping. It is user-controlled, meaning that the user can\nspecify different levels of breadth with which to expand the search area (e.g.\n20 miles outside of the city or just 5). It is exclusive, which means that the\nuser can specify that they want their search to return only the marginal set of\nresults that were not present in the unrelaxed result set."}),"\n",(0,i.jsx)(n.h2,{id:"meerkat-dsas-zonal-matching-algorithm",children:"Meerkat DSA's Zonal Matching Algorithm"}),"\n",(0,i.jsxs)(n.p,{children:["As stated earlier, when zonal matching is requested, and when the proper\nattribute value assertions are present in the base object name and search\nfilter, the asserted values in the filter (not in the base object name) are\nreplaced with ",(0,i.jsx)(n.code,{children:"postalCode"}),' assertions whose asserted values are the postal codes\nassociated with that locality. This corresponds to a zonal "area" of 0. These\npostal codes are associated with one or more longitude-latitude points, which\nare queried from the "gazetteer" and sorted.']}),"\n",(0,i.jsx)(n.p,{children:'If a greater area is specified, the "diameter" of the original area is obtained\nby defining a box whose lower bound is the southern-most point, whose upper\nbound is the northern-most point, whose left bound is the western-most point,\nand whose right bound is the eastern-most point. The diagonal area of this box\nis defined as the "diameter," for our purposes. ("Hypotenuse" would be a more\ntechnically correct term, but since zonal matching is conceptually thought of\nas outwardly-expanding concentric circles, and since it is "fuzzy" by nature, we\ndo not have to nitpick these terms.)'}),"\n",(0,i.jsx)(n.p,{children:'Each subsequent "area" or "level" of the zonal relaxation adds or subtracts\n(whichever makes the box bigger) R / L to each\nbound of the box described above, where R is the "radius" of the level-0 area,\nand L is the level. (Note that this only applies above level-0, so that no\ndivision by zero happens.) In other words, at level 1, all four edges of the box\nexpand outwards by R. At level 2, this is by R + R/2.'}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:['The rationale for this seemingly obtuse algorithm is that, as the "diameter" of\na circle doubles, the area within that circle ',(0,i.jsx)(n.em,{children:"more than doubles"}),'. Likewise, if\nthe expansion of the box proceeded at a constant length at each level, the area\ncaptured would increase "exponentially," and so would the entries evaluated in\neach marginal relaxation of the zonal match. Instead, we want an algorithm that\nis inclined to return a roughly constant number of entries at each expansion of\nthe area. Dividing the added radius by the level at each level will result in\nthe box expanding by a decreasing radius at each iteration, but the area added\nby each iteration will be less volatile.']})}),"\n",(0,i.jsxs)(n.p,{children:["The algorithm doesn't end here. Once the box for a given zonal level is\ndetermined, all postal codes that have a single point within that box are\nselected as the replacement ",(0,i.jsx)(n.code,{children:"postalCode"})," assertions for the ",(0,i.jsx)(n.code,{children:"localityName"})," and\n",(0,i.jsx)(n.code,{children:"stateOrProvinceName"})," assertions in the filter. It is a known and understood\ndrawback of this algorithm that this may result in a really jagged, irregular\nsearch area."]}),"\n",(0,i.jsx)(n.h2,{id:"nuances",children:"Nuances"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["None of the selected locale attributes in the distinguished name of the base\nobject are replaced. In other words, if your search the subtree under\n",(0,i.jsx)(n.code,{children:"C=US,ST=FL"}),", no amount of zonal relaxation will make your search cross the\nFloridian border into Georgia and return results under ",(0,i.jsx)(n.code,{children:"C=US,ST=GA"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The algorithm ",(0,i.jsx)(n.em,{children:"never"})," returns ",(0,i.jsx)(n.code,{children:"multiple-mappings"}),", even if there are two\nseparate real localities that have the same exact names within the country\nand state-or-province. In such a case, all of their postal codes will be\nconsidered as one, leading to some very strange results."]}),"\n",(0,i.jsx)(n.li,{children:"Your database is empty by default, so zonal matching will not work at all\nunless you seed it with postal codes and their geographic coordinates."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"seeding-the-gazetteer-zonal-mapping-database",children:"Seeding the Gazetteer (Zonal Mapping Database)"}),"\n",(0,i.jsxs)(n.p,{children:["To populate the ",(0,i.jsx)(n.em,{children:"gazetteer"})," (the internal database used for zonal matching),\nyou will need to seed the ",(0,i.jsx)(n.code,{children:"PostalCodesGazetteEntry"})," and\n",(0,i.jsx)(n.code,{children:"PostalCodeBoundaryPoints"}),". The former contains the country, state-or-province,\nand locality name associated with each postal code. The latter contains one or\nmore geographic coordinates corresponding to points on the boundaries of the\npostal code regions. These coordinates are composed of ",(0,i.jsx)(n.code,{children:"northing"})," and ",(0,i.jsx)(n.code,{children:"easting"}),"\ncomponents, which are meters (postive or negative) from the prime equator and\nprime meridian, respectively."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Despite the name, you do not have to insert the coordinates of the ",(0,i.jsx)(n.em,{children:"boundaries"}),'\nof the postal code region in your gazeteer. You can just insert any point within\nthe postal code region. This will have the effect of preventing the seemingly\nabsurd scenario of a postal code from being included in the mapping just by\nhaving a single boundary point within the box described above. Boundary points\nwere selected just because they are readily available online; something else,\nsuch as a "center of gravity" will have to be calculated from this data.']})}),"\n",(0,i.jsx)(n.h2,{id:"usa-only-gazetteer-seed",children:"USA-only Gazetteer Seed"}),"\n",(0,i.jsx)(n.p,{children:"As part of developing Meerkat DSA, a USA-only dataset for the gazetteer was\ncreated, and made freely available. Because these files were too large to commit\nto Meerkat DSA's git repository, they are available instead as downloads from\nblob storage. There is no license included with them, but if it matters at all,\nI hereby release them under an MIT license. You can do whatever you want with\nthis data. I won't sue."}),"\n",(0,i.jsxs)(n.p,{children:["First, download the files. Using the ",(0,i.jsx)(n.code,{children:"curl"})," command found on many unix-like\nsystems, you can run these commands from within the root of the cloned\n",(0,i.jsx)(n.a,{href:"https://github.com/Wildboar-Software/directory",children:"Meerkat DSA repo"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mkdir -p data/zonal\ncurl https://wildboarprod.blob.core.windows.net/public-data/boundary.csv -o data/zonal/boundary.csv\ncurl https://wildboarprod.blob.core.windows.net/public-data/gazette.csv -o data/zonal/gazette.csv\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you have your ",(0,i.jsx)(n.code,{children:"DATABASE_URL"})," environment variable defined, you can then run\n",(0,i.jsx)(n.code,{children:"node ./tools/seed.mjs"})," (provided that you have NodeJS installed). This will\ntake a minute or two, but it will load up your database with the gazetteer data.\nYou may set your ",(0,i.jsx)(n.code,{children:"DATABASE_URL"})," in the root-level ",(0,i.jsx)(n.code,{children:".env"})," file. Just make sure\nnot to commit it, since this file is not in ",(0,i.jsx)(n.code,{children:".gitignore"}),"!"]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);