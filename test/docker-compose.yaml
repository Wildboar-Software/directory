# DO NOT deploy Meerkat DSA to a production environment with these settings.
# These settings include relaxed or disabled security features which you need in
# a production environment. This is for testing only.
version: '3.7'

services:
  dsa1:
    build:
      context: ..
      dockerfile: meerkat.test.dockerfile
    # env_file:
    #   - .env
    environment:
      # What appears in this section overrides anything in .env.
      DATABASE_URL: mysql://user1:asdf1@db:3306/directory1
      MEERKAT_LOG_LEVEL: debug
      MEERKAT_IDM_PORT: 4632
      MEERKAT_OPEN_TOP_LEVEL: 1
      MEERKAT_OB_AUTO_ACCEPT: 1
      # MEERKAT_MY_ACCESS_POINT_NSAPS: idm://dsa1:4632
      MEERKAT_MY_ACCESS_POINT_NSAPS: itot://dsa1:1102
      MEERKAT_MIN_AUTH_LEVEL_FOR_CHAINING: 0
      MEERKAT_MIN_AUTH_LEVEL_FOR_DISP: 0
      MEERKAT_MIN_AUTH_LEVEL_FOR_OB: 0
      MEERKAT_MIN_AUTH_LOCAL_QUALIFIER_FOR_CHAINING: 0
      MEERKAT_MIN_AUTH_LOCAL_QUALIFIER_FOR_DISP: 0
      MEERKAT_MIN_AUTH_LOCAL_QUALIFIER_FOR_OB: 0
      MEERKAT_SIGNING_REQUIRED_FOR_CHAINING: 0
      MEERKAT_SIGNING_REQUIRED_FOR_DISP: 0
      MEERKAT_SIGNING_REQUIRED_FOR_OB: 0
      MEERKAT_BIND_MIN_SLEEP_MS: 0
      MEERKAT_BIND_SLEEP_RANGE_MS: 0
      MEERKAT_ENABLE_DAP: 1
      MEERKAT_ENABLE_DISP: 1
      MEERKAT_ENABLE_DOP: 1
      MEERKAT_ENABLE_DSP: 1
      MEERKAT_TRUST_FOR_IBRA: 1
      MEERKAT_TLS_CA_FILE: /pki/god.crt
      MEERKAT_TLS_CERT_FILE: /pki/dsa1.chain.crt
      MEERKAT_TLS_KEY_FILE: /pki/dsa1.key.pem
      MEERKAT_SIGNING_CA_FILE: /pki/god.crt
      MEERKAT_SIGNING_CERTS_CHAIN_FILE: /pki/dsa1.chain.crt
      MEERKAT_SIGNING_KEY_FILE: /pki/dsa1.key.pem
      MEERKAT_WEB_ADMIN_PORT: 18080
      # These need to be set really high so the large shadow updates can make it.
      MEERKAT_IDM_BUFFER_SIZE: "1000000000"
      MEERKAT_MAX_IDM_PDU_SIZE: "1000000000"
      MEERKAT_MAX_IDM_SEGMENTS: 100
      # I already know my schema is valid. We just need an environment that can come up quickly.
      # MEERKAT_BULK_INSERT_MODE: 1
      # MEERKAT_INIT_JS: /data/init.mjs
      MEERKAT_ITOT_PORT: 1102
      MEERKAT_ITOT_MAX_TSDU_SIZE: "1000000000"
      MEERKAT_ITOT_MAX_SSDU_SIZE: "1000000000"
      MEERKAT_CHAINING_TLS_OPTIONAL: 1
    ports:
      - '1389:389/tcp' # LDAP TCP Port
      - '14632:4632/tcp' # IDM Socket
      - '18080:18080/tcp' # Web administration console
      - '19229:9229/tcp' # NodeJS Debugging
    volumes:
      - type: bind
        source: ./pki
        target: /pki
        read_only: true
    depends_on:
      init1:
        condition: service_completed_successfully
      db:
        condition: service_healthy

  dsa2:
    build:
      context: ..
      dockerfile: meerkat.test.dockerfile
    # env_file:
    #   - .env
    environment:
      # What appears in this section overrides anything in .env.
      DATABASE_URL: mysql://user2:asdf2@db:3306/directory2
      MEERKAT_LOG_LEVEL: debug
      MEERKAT_IDM_PORT: 4632
      MEERKAT_OPEN_TOP_LEVEL: 1
      MEERKAT_OB_AUTO_ACCEPT: 1
      # MEERKAT_MY_ACCESS_POINT_NSAPS: idm://dsa2:4632
      MEERKAT_MY_ACCESS_POINT_NSAPS: itot://dsa2:1102
      MEERKAT_MIN_AUTH_LEVEL_FOR_CHAINING: 0
      MEERKAT_MIN_AUTH_LEVEL_FOR_DISP: 0
      MEERKAT_MIN_AUTH_LEVEL_FOR_OB: 0
      MEERKAT_MIN_AUTH_LOCAL_QUALIFIER_FOR_CHAINING: 0
      MEERKAT_MIN_AUTH_LOCAL_QUALIFIER_FOR_DISP: 0
      MEERKAT_MIN_AUTH_LOCAL_QUALIFIER_FOR_OB: 0
      MEERKAT_SIGNING_REQUIRED_FOR_CHAINING: 0
      MEERKAT_SIGNING_REQUIRED_FOR_DISP: 0
      MEERKAT_SIGNING_REQUIRED_FOR_OB: 0
      MEERKAT_BIND_MIN_SLEEP_MS: 0
      MEERKAT_BIND_SLEEP_RANGE_MS: 0
      MEERKAT_ENABLE_DAP: 1
      MEERKAT_ENABLE_DISP: 1
      MEERKAT_ENABLE_DOP: 1
      MEERKAT_ENABLE_DSP: 1
      MEERKAT_TRUST_FOR_IBRA: 1
      MEERKAT_TLS_CA_FILE: /pki/god.crt
      MEERKAT_TLS_CERT_FILE: /pki/dsa2.chain.crt
      MEERKAT_TLS_KEY_FILE: /pki/dsa2.key.pem
      MEERKAT_SIGNING_CA_FILE: /pki/god.crt
      MEERKAT_SIGNING_CERTS_CHAIN_FILE: /pki/dsa2.chain.crt
      MEERKAT_SIGNING_KEY_FILE: /pki/dsa2.key.pem
      MEERKAT_WEB_ADMIN_PORT: 18080
      # These need to be set really high so the large shadow updates can make it.
      MEERKAT_IDM_BUFFER_SIZE: "1000000000"
      MEERKAT_MAX_IDM_PDU_SIZE: "1000000000"
      MEERKAT_MAX_IDM_SEGMENTS: 100
      # MEERKAT_INIT_JS: /data/init.mjs
      MEERKAT_ITOT_PORT: 1102
      MEERKAT_ITOT_MAX_TSDU_SIZE: "1000000000"
      MEERKAT_ITOT_MAX_SSDU_SIZE: "1000000000"
      MEERKAT_CHAINING_TLS_OPTIONAL: 1
    ports:
      - '2389:389/tcp' # LDAP TCP Port
      - '24632:4632/tcp' # IDM Socket
      - '28080:18080/tcp' # Web administration console
      - '29229:9229/tcp' # NodeJS Debugging
    volumes:
      - type: bind
        source: ./pki
        target: /pki
        read_only: true
    depends_on:
      init2:
        condition: service_completed_successfully
      db:
        condition: service_healthy

  dsa3:
    build:
      context: ..
      dockerfile: meerkat.test.dockerfile
    # env_file:
    #   - .env
    environment:
      # What appears in this section overrides anything in .env.
      DATABASE_URL: mysql://user3:asdf3@db:3306/directory3
      MEERKAT_LOG_LEVEL: debug
      MEERKAT_IDM_PORT: 4632
      MEERKAT_OPEN_TOP_LEVEL: 1
      MEERKAT_OB_AUTO_ACCEPT: 1
      # MEERKAT_MY_ACCESS_POINT_NSAPS: idm://dsa3:4632
      MEERKAT_MY_ACCESS_POINT_NSAPS: itot://dsa3:1102
      MEERKAT_MIN_AUTH_LEVEL_FOR_CHAINING: 0
      MEERKAT_MIN_AUTH_LEVEL_FOR_DISP: 0
      MEERKAT_MIN_AUTH_LEVEL_FOR_OB: 0
      MEERKAT_MIN_AUTH_LOCAL_QUALIFIER_FOR_CHAINING: 0
      MEERKAT_MIN_AUTH_LOCAL_QUALIFIER_FOR_DISP: 0
      MEERKAT_MIN_AUTH_LOCAL_QUALIFIER_FOR_OB: 0
      MEERKAT_SIGNING_REQUIRED_FOR_CHAINING: 0
      MEERKAT_SIGNING_REQUIRED_FOR_DISP: 0
      MEERKAT_SIGNING_REQUIRED_FOR_OB: 0
      MEERKAT_BIND_MIN_SLEEP_MS: 0
      MEERKAT_BIND_SLEEP_RANGE_MS: 0
      MEERKAT_ENABLE_DAP: 1
      MEERKAT_ENABLE_DISP: 1
      MEERKAT_ENABLE_DOP: 1
      MEERKAT_ENABLE_DSP: 1
      MEERKAT_TRUST_FOR_IBRA: 1
      MEERKAT_TLS_CA_FILE: /pki/god.crt
      MEERKAT_TLS_CERT_FILE: /pki/dsa3.chain.crt
      MEERKAT_TLS_KEY_FILE: /pki/dsa3.key.pem
      MEERKAT_SIGNING_CA_FILE: /pki/god.crt
      MEERKAT_SIGNING_CERTS_CHAIN_FILE: /pki/dsa3.chain.crt
      MEERKAT_SIGNING_KEY_FILE: /pki/dsa3.key.pem
      MEERKAT_WEB_ADMIN_PORT: 18080
      # These need to be set really high so the large shadow updates can make it.
      MEERKAT_IDM_BUFFER_SIZE: "1000000000"
      MEERKAT_MAX_IDM_PDU_SIZE: "1000000000"
      MEERKAT_MAX_IDM_SEGMENTS: 100
      # MEERKAT_INIT_JS: /data/init.mjs
      MEERKAT_ITOT_PORT: 1102
      MEERKAT_ITOT_MAX_TSDU_SIZE: "1000000000"
      MEERKAT_ITOT_MAX_SSDU_SIZE: "1000000000"
      MEERKAT_CHAINING_TLS_OPTIONAL: 1
    ports:
      - '3389:389/tcp' # LDAP TCP Port
      - '34632:4632/tcp' # IDM Socket
      - '38080:18080/tcp' # Web administration console
      - '39229:9229/tcp' # NodeJS Debugging
    volumes:
      - type: bind
        source: ./pki
        target: /pki
        read_only: true
    depends_on:
      init3:
        condition: service_completed_successfully
      db:
        condition: service_healthy

  init1:
    build:
      context: ..
      dockerfile: meerkat.test.dockerfile
    environment:
      DATABASE_URL: mysql://user1:asdf1@db:3306/directory1
    entrypoint: /usr/local/bin/npx
    command: ["prisma", "migrate", "deploy", "--schema=/srv/meerkat/prisma/schema.prisma"]
    depends_on:
      db:
        condition: service_healthy

  init2:
    build:
      context: ..
      dockerfile: meerkat.test.dockerfile
    environment:
      DATABASE_URL: mysql://user2:asdf2@db:3306/directory2
    entrypoint: /usr/local/bin/npx
    command: ["prisma", "migrate", "deploy", "--schema=/srv/meerkat/prisma/schema.prisma"]
    depends_on:
      db:
        condition: service_healthy

  init3:
    build:
      context: ..
      dockerfile: meerkat.test.dockerfile
    environment:
      DATABASE_URL: mysql://user3:asdf3@db:3306/directory3
    entrypoint: /usr/local/bin/npx
    command: ["prisma", "migrate", "deploy", "--schema=/srv/meerkat/prisma/schema.prisma"]
    depends_on:
      db:
        condition: service_healthy

  db:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    # command: --default-authentication-plugin=mysql_native_password --slow-query-log=ON --slow-query-log-file=/var/lib/mysqllog/slow.log --long-query-time=2
    # restart: always;

    # The healthcheck causes this error message:
    # Plugin sha256_password reported: ''sha256_password' is deprecated and will be removed in a future release.
    # There is no way around this other than to not have a health check.
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55
    # This gets rid of the "mbind: Operation not permitted" error message in the MySQL logs.
    # See: https://thegeekbin.com/mbind-operation-not-permitted-docker-mysql/
    security_opt:
      - "seccomp=unconfined"
    environment:
      MYSQL_ROOT_PASSWORD: example
    ports:
      - '3306:3306/tcp'
    volumes:
      # - data:/var/lib/mysql
      # - './data/mysql:/var/lib/mysqllog:rw'
      - './sql:/docker-entrypoint-initdb.d:ro'

# volumes:
#   data: {}

# networks:
#   default:
#     external:
#       name: meerkat-deploy
