name: Meerkat DSA Workflow

on:
  push:
    tags:
      - v2.*
      - v3.*

env:
  CLUSTER_NAME: production
  RESOURCE_GROUP: production
  ZONE: mkdemo.wildboar.software
  STORAGE_ACCOUNT_NAME: wildboarprod
  CHART_CONTAINER: helm-charts
  CHART_REPO: wildboar
  CHART_NAME: meerkat-dsa

jobs:

  lint:
    name: Linting
    timeout-minutes: 10
    runs-on: ubuntu-latest
    environment: production
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        timeout-minutes: 2
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
        timeout-minutes: 2
      - name: Install NPM Packages
        run: npm ci
        timeout-minutes: 5
      - name: Generate Prisma Client
        run: npx -q prisma generate --schema=apps/meerkat/src/prisma/schema.prisma
        timeout-minutes: 1
      - name: Run Linter
        run: npx nx run-many --target=lint --all --skip-nx-cache
        timeout-minutes: 2
      - name: Lint Helm Charts
        run: helm lint ./k8s/charts/meerkat-dsa/
        timeout-minutes: 1

  # TODO: For now, this job is disabled. For some reason, it just hangs there
  # indefinitely until it times out. This happens locally, so I know it's not
  # just a GitHub Actions problem.
  # unit_testing:
  #   name: Unit Testing
  #   runs-on: ubuntu-latest
  #   environment: production
  #   strategy:
  #     fail-fast: false
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Install Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #     - name: Install NPM Packages
  #       run: npm ci
  #     - name: Generate Prisma Client
  #       run: npx -q prisma generate --schema=apps/meerkat/src/prisma/schema.prisma
  #     - name: Run Unit Tests
  #       run: npx nx run-many --target=test --all --skip-nx-cache
  #       timeout-minutes: 5

  publish_libs:
    name: Publish Libraries
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: production
    strategy:
      fail-fast: false
      matrix:
        library:
          - 'idm'
          - 'ldap-socket'
          - 'meerkat-types'
          - 'x500-cli-config'
          - 'rose-transport'
          - 'osi-net'
          - 'ocsp-client'
          - 'x500-client-ts'
          - 'x500-auth-ts'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        timeout-minutes: 2
      - name: Install Node.js
        uses: actions/setup-node@v3
        timeout-minutes: 2
        with:
          node-version: '18'
      - name: Install NPM Packages
        run: npm ci
        timeout-minutes: 5
      - name: Generate Prisma Client
        run: npx -q prisma generate --schema=apps/meerkat/src/prisma/schema.prisma
        timeout-minutes: 1
      - name: Compile ${{ matrix.library }} Library
        run: npx nx run ${{ matrix.library }}:build --with-deps
        timeout-minutes: 5
        # We use || true here because the version numbers will usually be the
        # same between pipeline runs, so most attempted publishing will fail due
        # to duplicate version numbers.
      - name: Publish NPM Package
        uses: JS-DevTools/npm-publish@v1
        timeout-minutes: 3
        with:
          package: ./dist/libs/${{ matrix.library }}/package.json
          token: ${{ secrets.NPM_TOKEN }}

  build_meerkat_dsa:
    name: Build Meerkat DSA
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
      - publish_libs
    environment: production
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        timeout-minutes: 2
      - name: Determine Meerkat DSA Version
        timeout-minutes: 1
        run: |
            echo "PUBLISHING_MEERKAT_VERSION=$(cat k8s/charts/meerkat-dsa/Chart.yaml | grep appVersion | sed 's/appVersion: //' | sed 's/\r$//')" >> $GITHUB_ENV
      - name: Install Node.js
        uses: actions/setup-node@v3
        timeout-minutes: 2
        with:
          node-version: '18'
      - name: Install NPM Packages
        run: npm ci
        timeout-minutes: 5
      - name: Generate Prisma Client
        run: npx -q prisma generate --schema=apps/meerkat/src/prisma/schema.prisma
        timeout-minutes: 1
      - name: Compile Meerkat DSA
        run: npx nx run meerkat:build:production --skip-nx-cache
        timeout-minutes: 10
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        timeout-minutes: 10
      - name: Login to the Container Registry
        uses: docker/login-action@v2
        timeout-minutes: 2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        timeout-minutes: 10
        with:
          push: true
          tags: ghcr.io/wildboar-software/meerkat-dsa:latest,ghcr.io/wildboar-software/meerkat-dsa:${{ env.PUBLISHING_MEERKAT_VERSION }}
          context: ./
          file: ./meerkat.dockerfile

  # HOW DOES THIS EVEN WORK?
  # There is no point in this job where it installs Helm, but yet, somehow, this
  # job runs the `helm` command successfully!
  helm:
    name: Publish Helm Chart
    timeout-minutes: 10
    runs-on: ubuntu-latest
    environment: production
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        timeout-minutes: 2
      - name: Create the Helm Package
        run: helm package .
        timeout-minutes: 2
        working-directory: ./k8s/charts/meerkat-dsa
      - name: Download Existing Helm Chart index
        run: curl https://${{ env.STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/${{ env.CHART_CONTAINER }}/index.yaml > existing-index.yaml
        working-directory: ./k8s/charts/meerkat-dsa
        timeout-minutes: 2
      - name: Create the Helm Index
        run: |
          helm repo index . \
            --url https://${{ env.STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/${{ env.CHART_CONTAINER }} \
            --merge existing-index.yaml
        working-directory: ./k8s/charts/meerkat-dsa
        timeout-minutes: 2
      - name: Upload Helm Packages
        uses: bacongobbler/azure-blob-storage-upload@main
        timeout-minutes: 2
        with:
          source_dir: ./k8s/charts/meerkat-dsa
          container_name: ${{ env.CHART_CONTAINER }}
          connection_string: ${{ secrets.AZURE_BLOB_CNXN_STRING }}
          extra_args: '--pattern *.tgz'
          overwrite: 'true'
      - name: Upload Helm Index
        uses: bacongobbler/azure-blob-storage-upload@main
        timeout-minutes: 2
        with:
          source_dir: ./k8s/charts/meerkat-dsa
          container_name: ${{ env.CHART_CONTAINER }}
          connection_string: ${{ secrets.AZURE_BLOB_CNXN_STRING }}
          extra_args: '--pattern index.yaml'
          overwrite: 'true'
