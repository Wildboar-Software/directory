name: Main Workflow

on:
  push:
    tags:
      - v**

env:
  CLUSTER_NAME: meerkat-helm-test
  # RESOURCE_GROUP: production
  RESOURCE_GROUP: meerkat-helm-test
  DNS_RESOURCE_GROUP: production
  NAMESPACE: test
  ZONE: mkdemo.wildboar.software
  STORAGE_ACCOUNT_NAME: meerkatdsahelmtest
  CHART_CONTAINER: asdf
  CHART_REPO: wildboar
  CHART_NAME: meerkat-dsa

jobs:

  build:
    runs-on: ubuntu-latest
    environment: production
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Determine Meerkat DSA Version
        run: |
            echo "PUBLISHING_MEERKAT_VERSION=$(cat k8s/charts/meerkat-dsa/Chart.yaml | grep appVersion | sed 's/appVersion: //' | sed 's/\r$//')" >> $GITHUB_ENV
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '17'
      - name: Install NPM Packages
        run: npm ci
      - name: Generate Prisma Client
        run: npx -q prisma generate --schema=apps/meerkat/src/prisma/schema.prisma
      - name: Compile Meerkat DSA
        run: npx nx run meerkat:build:production --skip-nx-cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to the Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/wildboar-software/meerkat-dsa:latest,ghcr.io/wildboar-software/meerkat-dsa:${{ env.PUBLISHING_MEERKAT_VERSION }}
          context: ./
          file: ./meerkat.dockerfile

  helm:
    runs-on: ubuntu-latest
    environment: production
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create the Helm Package
        run: helm package .
        working-directory: ./k8s/charts/meerkat-dsa
      - name: Create the Helm Index
        run: helm repo index . --url https://${{ env.STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/${{ env.CHART_CONTAINER }}
        working-directory: ./k8s/charts/meerkat-dsa
      - name: Upload Helm Packages
        uses: bacongobbler/azure-blob-storage-upload@main
        with:
          source_dir: ./k8s/charts/meerkat-dsa
          container_name: ${{ env.CHART_CONTAINER }}
          connection_string: ${{ secrets.AZURE_BLOB_CNXN_STRING }}
          extra_args: '--pattern *.tgz'
          overwrite: 'true'
      - name: Upload Helm Index
        uses: bacongobbler/azure-blob-storage-upload@main
        with:
          source_dir: ./k8s/charts/meerkat-dsa
          container_name: ${{ env.CHART_CONTAINER }}
          connection_string: ${{ secrets.AZURE_BLOB_CNXN_STRING }}
          extra_args: '--pattern index.yaml'
          overwrite: 'true'

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
      - helm
    environment: production
    strategy:
      fail-fast: false
      matrix:
        dmd:
          - 'root'
          - 'gb'
          # - 'ru'
          # - 'ru-moscow'
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v2
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v2.0
        # with:
        #   version: 'v1.18.8'
      - name: Setup Helm
        uses: azure/setup-helm@v1
        # with:
        #   version: '<version>' # default is latest stable
        # id: install
      - name: Set Kubernetes Context
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.RESOURCE_GROUP }}
      - name: Create Kubernetes Namespace
        run: kubectl create ns ${{ env.NAMESPACE }}
        continue-on-error: true
      - name: Delete Migration Job
        run: kubectl delete job meerkat-dsa-${{ matrix.dmd }}-migrate -n ${{ env.NAMESPACE }}
        continue-on-error: true
      - name: Uninstall Previous Meerkat DSA Release
        run: helm uninstall meerkat-dsa-${{ matrix.dmd }} -n ${{ env.NAMESPACE }}
        continue-on-error: true
      - name: Uninstall Previous MySQL Database
        run: helm uninstall meerkat-db-${{ matrix.dmd }} -n ${{ env.NAMESPACE }}
        continue-on-error: true
      - name: Delete MySQL Secret
        run: kubectl delete secret mysql-db-${{ matrix.dmd }} -n ${{ env.NAMESPACE }}
        continue-on-error: true
      - name: Delete Meerkat Database Secret
        run: kubectl delete secret meerkat-${{ matrix.dmd }}-db -n ${{ env.NAMESPACE }}
        continue-on-error: true
      - name: Delete Meerkat Signing Secret
        run: kubectl delete secret meerkat-${{ matrix.dmd }}-signing -n ${{ env.NAMESPACE }}
        continue-on-error: true
      - name: Delete Meerkat TLS Secret
        run: kubectl delete secret meerkat-${{ matrix.dmd }}-tls -n ${{ env.NAMESPACE }}
        continue-on-error: true
      - name: Delete MySQL Database Data
        run: kubectl delete pvc data-meerkat-db-${{ matrix.dmd }}-mysql-0 -n ${{ env.NAMESPACE }}
        continue-on-error: true
      - name: Delete DSA DNS Record
        run: |
          az network dns record-set a delete \
            --resource-group ${{ env.DNS_RESOURCE_GROUP }} \
            --zone-name ${{ env.ZONE }} \
            --name dsa01.${{ matrix.dmd }} \
            --yes
        continue-on-error: true
      - name: Delete Web Admin DNS Record
        run: |
          az network dns record-set a delete \
            --resource-group ${{ env.DNS_RESOURCE_GROUP }} \
            --zone-name ${{ env.ZONE }} \
            --name webadm01.${{ matrix.dmd }} \
            --yes
        continue-on-error: true
        # I was having an issue getting a new instance to start. I think the issue
        # is that the password settings for a given chart are only applied the first
        # time it is deployed. When you delete a bitnami/mysql release, it does NOT
        # delete the PVCs it created, which means that the OLD password will
        # persist. Since this script deletes and re-installs under the same name
        # every time, it must necessarily have a deterministic password.
        # See this GitHub issue: https://github.com/bitnami/charts/issues/9083
      - name: Create MySQL Secret
        run: |
          kubectl create secret generic mysql-db-${{ matrix.dmd }} \
            --from-literal=mysql-root-password=asdf_${{ matrix.dmd }} \
            --from-literal=mysql-replication-password=asdf_${{ matrix.dmd }} \
            --from-literal=mysql-password=asdf_${{ matrix.dmd }} \
            --namespace=${{ env.NAMESPACE }}
      - name: Create Meerkat Database Secret
        run: |
          kubectl create secret generic meerkat-${{ matrix.dmd }}-db \
            --from-literal=databaseUrl=mysql://root:asdf_${{ matrix.dmd }}@meerkat-db-${{ matrix.dmd }}-mysql.${{ env.NAMESPACE }}.svc.cluster.local:3306/directory \
            --namespace=${{ env.NAMESPACE }}
      - name: Create Temp Folder
        run: mkdir -p ./tmp
      - name: Create OpenSSL Keypair
        run: |
          openssl req -x509 -newkey rsa:4096 -sha256 -days 3650 -nodes \
            -keyout ./tmp/${{ matrix.dmd }}.key \
            -out ./tmp/${{ matrix.dmd }}.crt \
            -subj "/CN=dsa01.${{ matrix.dmd }}.${{ env.ZONE }}" \
            -addext "subjectAltName=DNS:dsa01.${{ matrix.dmd }}.${{ env.ZONE }}"
      - name: Create Meerkat Signing Secret
        run: |
          kubectl create secret tls meerkat-${{ matrix.dmd }}-signing \
            --cert=./tmp/${{ matrix.dmd }}.crt \
            --key=./tmp/${{ matrix.dmd }}.key \
            --namespace=${{ env.NAMESPACE }}
      - name: Create Meerkat TLS Secret
        run: |
          kubectl create secret tls meerkat-${{ matrix.dmd }}-tls \
            --cert=./tmp/${{ matrix.dmd }}.crt \
            --key=./tmp/${{ matrix.dmd }}.key \
            --namespace=${{ env.NAMESPACE }}
      - name: Add Bitnami Helm Repo
        run: helm repo add bitnami https://charts.bitnami.com/bitnami
      - name: Add Wildboar Helm Repo
        run: helm repo add ${{ env.CHART_REPO }} https://${{ env.STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/${{ env.CHART_CONTAINER }}
      - name: Update Helm Repo Index
        run: helm repo update
      - name: Install MySQL
        run: |
          helm install meerkat-db-${{ matrix.dmd }} bitnami/mysql \
            --set auth.existingSecret=mysql-db-${{ matrix.dmd }} \
            --set auth.database=directory \
            --atomic \
            --namespace=${{ env.NAMESPACE }}
      - name: Deploy Meerkat DSA via Helm
        run: |
          helm install meerkat-dsa-${{ matrix.dmd }} ${{ env.CHART_REPO }}/${{ env.CHART_NAME }} \
            --set fullnameOverride=meerkat-${{ matrix.dmd }} \
            --set service.type=LoadBalancer \
            --set adminService.type=LoadBalancer \
            --set log.level=debug \
            --set "myAccessPointNSAPs={idm://dsa01.${{ matrix.dmd }}.${{ env.ZONE }}:4632,ldap://dsa01.${{ matrix.dmd }}.${{ env.ZONE }}:389}" \
            --set chaining.minAuthLevel=0 \
            --set chaining.minAuthLocalQualifier=0 \
            --set chaining.tlsOptional=true \
            --set chaining.prohibited=false \
            --set ob.minAuthLevel=0 \
            --set ob.minAuthLocalQualifier=0 \
            --set ob.autoAccept=true \
            --set databaseReset=true \
            --set dangerouslyExposeWebAdmin=true \
            --set databaseSecretName=meerkat-${{ matrix.dmd }}-db \
            --set signingSecretName=meerkat-${{ matrix.dmd }}-signing \
            --set tlsSecretName=meerkat-${{ matrix.dmd }}-tls \
            --atomic \
            --namespace=${{ env.NAMESPACE }}
      - name: Wait 30 Seconds for Public IP to be Allocated
        run: sleep 30
      - name: Save Directory Service IP Address
        run: |
          echo 'DIRECTORY_SERVICE_IP=$(kubectl get svc -n ${{ env.NAMESPACE }} meerkat-${{ matrix.dmd }}-directory --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")' >> $GITHUB_ENV
      - name: Save Web Admin Service IP Address
        run: |
          echo 'WEB_ADMIN_SERVICE_IP=$(kubectl get svc -n ${{ env.NAMESPACE }} meerkat-${{ matrix.dmd }}-web-admin --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")' >> $GITHUB_ENV
      - name: Create DSA DNS Record
        run: |
          az network dns record-set a add-record \
            --resource-group ${{ env.DNS_RESOURCE_GROUP }} \
            --zone-name ${{ env.ZONE }} \
            --ttl 60 \
            --record-set-name dsa01.${{ matrix.dmd }} \
            --ipv4-address ${{ env.DIRECTORY_SERVICE_IP }}
      - name: Create WebAdmin DNS Record
        run: |
          az network dns record-set a add-record \
            --resource-group ${{ env.DNS_RESOURCE_GROUP }} \
            --zone-name ${{ env.ZONE }} \
            --ttl 60 \
            --record-set-name webadm01.${{ matrix.dmd }} \
            --ipv4-address ${{ env.WEB_ADMIN_SERVICE_IP }}

  seed:
    runs-on: ubuntu-latest
    needs:
      - deploy
    environment: production
    strategy:
      fail-fast: false
      matrix:
        dmd:
          - 'root'
          # TODO: Re-enable gb once you fix the bugs stopping this from working.
          # - 'gb'
          # - 'ru'
          # - 'ru-moscow'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '17'
      - name: Install NPM Packages
        run: npm ci
      - name: Compile the Test DIT Creator
        run: npx nx run create-test-dit:build:production --skip-nx-cache
      - name: Run the Test DIT Creator
        run: |
          node ./dist/apps/create-test-dit/main.js \
            --accessPoint="idm://dsa01.${{ matrix.dmd }}.${{ env.ZONE }}:4632" \
            --profile=${{ matrix.dmd }} \
            -t

  # TODO: Test
  # TODO: Publish Docusaurus Docs

  # Pretty much copied from here: https://docusaurus.io/docs/deployment#deploying-to-github-pages
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install NPM Packages
        run: npm ci
      - name: Compile Documentation
        run: npx nx run meerkat-docs:build --skip-nx-cache

      # Popular action to deploy to GitHub Pages:
      # Docs: https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-docusaurus
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Build output to publish to the `gh-pages` branch:
          publish_dir: ./dist/apps/meerkat-docs
          publish_branch: master
          # The following lines assign commit authorship to the official
          # GH-Actions bot for deploys to `gh-pages` branch:
          # https://github.com/actions/checkout/issues/13#issuecomment-724415212
          # The GH actions bot is used by default if you didn't specify the two fields.
          # You can swap them out with your own user credentials.
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com
