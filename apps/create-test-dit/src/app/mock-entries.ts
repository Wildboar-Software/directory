import { Attribute } from "@wildboar/x500/src/lib/modules/InformationFramework/Attribute.ta";
import { randomInt, randomBytes } from "node:crypto";
import {
    DERElement,
    unpackBits,
    ASN1TagClass,
    ASN1Construction,
    ASN1UniversalType,
} from "asn1-ts";
import { DER, _encodeInteger, _encodeUTF8String } from "asn1-ts/dist/node/functional";
import type {
    RelativeDistinguishedName,
} from "@wildboar/x500/src/lib/modules/InformationFramework/RelativeDistinguishedName.ta";
import {
    AttributeTypeAndValue,
} from "@wildboar/x500/src/lib/modules/InformationFramework/AttributeTypeAndValue.ta";
import {
    objectClass,
} from "@wildboar/x500/src/lib/modules/InformationFramework/objectClass.oa";
import {
    commonName,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/commonName.oa";
import {
    surname,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/surname.oa";
import {
    localityName,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/localityName.oa";
import {
    stateOrProvinceName,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/stateOrProvinceName.oa";
import {
    streetAddress,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/streetAddress.oa";
import {
    physicalDeliveryOfficeName,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/physicalDeliveryOfficeName.oa";
import {
    postalAddress,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/postalAddress.oa";
import {
    postalCode,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/postalCode.oa";
import {
    postOfficeBox,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/postOfficeBox.oa";
import {
    facsimileTelephoneNumber,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/facsimileTelephoneNumber.oa";
import {
    internationalISDNNumber,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/internationalISDNNumber.oa";
import {
    telephoneNumber,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/telephoneNumber.oa";
import {
    description,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/description.oa";
import {
    userPassword,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/userPassword.oa";
import {
    FacsimileTelephoneNumber,
} from "@wildboar/x500/src/lib/modules/SelectedAttributeTypes/FacsimileTelephoneNumber.ta";
import {
    person,
} from "@wildboar/x500/src/lib/modules/SelectedObjectClasses/person.oa";
import {
    residentialPerson,
} from "@wildboar/x500/src/lib/modules/SelectedObjectClasses/residentialPerson.oa";
import { OBJECT_IDENTIFIER } from "asn1-ts";
import type {
    Certificate,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/Certificate.ta";
import {
    TBSCertificate,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/TBSCertificate.ta";
import {
    Version_v3,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/Version.ta";
import {
    SIGNED,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/SIGNED.ta";
import {
    Validity,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/Validity.ta";
import {
    SubjectPublicKeyInfo,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/SubjectPublicKeyInfo.ta";
import {
    AlgorithmIdentifier,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/AlgorithmIdentifier.ta";
import {
    Extension,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/Extension.ta";
import {
    sha256WithRSAEncryption,
} from "@wildboar/x500/src/lib/modules/AlgorithmObjectIdentifiers/sha256WithRSAEncryption.va";
import {
    rsaEncryption,
} from "@wildboar/x500/src/lib/modules/AlgorithmObjectIdentifiers/rsaEncryption.va";
import {
    subjectAltName,
} from "@wildboar/x500/src/lib/modules/CertificateExtensions/subjectAltName.oa";
import {
    cRLNumber,
} from "@wildboar/x500/src/lib/modules/CertificateExtensions/cRLNumber.oa";
import type {
    DistinguishedName,
} from "@wildboar/x500/src/lib/modules/InformationFramework/DistinguishedName.ta";
import {
    CertificateList,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/CertificateList.ta";
import {
    CertificateListContent,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/CertificateListContent.ta";
import {
    CertificateListContent_revokedCertificates_Item as RevokedCert,
} from "@wildboar/x500/src/lib/modules/AuthenticationFramework/CertificateListContent-revokedCertificates-Item.ta";
import { addDays } from "date-fns";
import { organization } from "@wildboar/x500/src/lib/collections/objectClasses";
import { businessCategory, organizationName } from "@wildboar/x500/src/lib/collections/attributes";

const firstNames: string[] = [
    "Liam",
    "Noah",
    "Oliver",
    "Elijah",
    "James",
    "William",
    "Benjamin",
    "Lucas",
    "Henry",
    "Theodore",
    "Jack",
    "Levi",
    "Alexander",
    "Jackson",
    "Mateo",
    "Daniel",
    "Michael",
    "Mason",
    "Sebastian",
    "Ethan",
    "Logan",
    "Owen",
    "Samuel",
    "Jacob",
    "Asher",
    "Aiden",
    "John",
    "Joseph",
    "Wyatt",
    "David",
    "Leo",
    "Luke",
    "Julian",
    "Hudson",
    "Grayson",
    "Matthew",
    "Ezra",
    "Gabriel",
    "Carter",
    "Isaac",
    "Jayden",
    "Luca",
    "Anthony",
    "Dylan",
    "Lincoln",
    "Thomas",
    "Maverick",
    "Elias",
    "Josiah",
    "Charles",
    "Caleb",
    "Christopher",
    "Ezekiel",
    "Miles",
    "Jaxon",
    "Isaiah",
    "Andrew",
    "Joshua",
    "Nathan",
    "Nolan",
    "Adrian",
    "Cameron",
    "Santiago",
    "Eli",
    "Aaron",
    "Ryan",
    "Angel",
    "Cooper",
    "Waylon",
    "Easton",
    "Kai",
    "Christian",
    "Landon",
    "Colton",
    "Roman",
    "Axel",
    "Brooks",
    "Jonathan",
    "Robert",
    "Jameson",
    "Ian",
    "Everett",
    "Greyson",
    "Wesley",
    "Jeremiah",
    "Hunter",
    "Leonardo",
    "Jordan",
    "Jose",
    "Bennett",
    "Silas",
    "Nicholas",
    "Parker",
    "Beau",
    "Weston",
    "Austin",
    "Connor",
    "Carson",
    "Dominic",
    "Xavier",
    "Jaxson",
    "Jace",
    "Emmett",
    "Adam",
    "Declan",
    "Rowan",
    "Micah",
    "Kayden",
    "Gael",
    "River",
    "Ryder",
    "Kingston",
    "Damian",
    "Sawyer",
    "Luka",
    "Evan",
    "Vincent",
    "Legend",
    "Myles",
    "Harrison",
    "August",
    "Bryson",
    "Amir",
    "Giovanni",
    "Chase",
    "Diego",
    "Milo",
    "Jasper",
    "Walker",
    "Jason",
    "Brayden",
    "Cole",
    "Nathaniel",
    "George",
    "Lorenzo",
    "Zion",
    "Luis",
    "Archer",
    "Enzo",
    "Jonah",
    "Thiago",
    "Theo",
    "Ayden",
    "Zachary",
    "Calvin",
    "Braxton",
    "Ashton",
    "Rhett",
    "Atlas",
    "Jude",
    "Bentley",
    "Carlos",
    "Ryker",
    "Adriel",
    "Arthur",
    "Ace",
    "Tyler",
    "Jayce",
    "Max",
    "Elliot",
    "Graham",
    "Kaiden",
    "Maxwell",
    "Juan",
    "Dean",
    "Matteo",
    "Malachi",
    "Ivan",
    "Elliott",
    "Jesus",
    "Emiliano",
    "Messiah",
    "Gavin",
    "Maddox",
    "Camden",
    "Hayden",
    "Leon",
    "Antonio",
    "Justin",
    "Tucker",
    "Brandon",
    "Kevin",
    "Judah",
    "Finn",
    "King",
    "Brody",
    "Xander",
    "Nicolas",
    "Charlie",
    "Arlo",
    "Emmanuel",
    "Barrett",
    "Felix",
    "Alex",
    "Miguel",
    "Abel",
    "Alan",
    "Beckett",
    "Amari",
    "Karter",
    "Timothy",
    "Abraham",
    "Jesse",
    "Zayden",
    "Blake",
    "Alejandro",
    "Dawson",
    "Tristan",
    "Victor",
    "Avery",
    "Joel",
    "Grant",
    "Eric",
    "Patrick",
    "Peter",
    "Richard",
    "Edward",
    "Andres",
    "Emilio",
    "Colt",
    "Knox",
    "Beckham",
    "Adonis",
    "Kyrie",
    "Matias",
    "Oscar",
    "Lukas",
    "Marcus",
    "Hayes",
    "Caden",
    "Remington",
    "Griffin",
    "Nash",
    "Israel",
    "Steven",
    "Holden",
    "Rafael",
    "Zane",
    "Jeremy",
    "Kash",
    "Preston",
    "Kyler",
    "Jax",
    "Jett",
    "Kaleb",
    "Riley",
    "Simon",
    "Phoenix",
    "Javier",
    "Bryce",
    "Louis",
    "Mark",
    "Cash",
    "Lennox",
    "Paxton",
    "Malakai",
    "Paul",
    "Kenneth",
    "Nico",
    "Kaden",
    "Lane",
    "Kairo",
    "Maximus",
    "Omar",
    "Finley",
    "Atticus",
    "Crew",
    "Brantley",
    "Colin",
    "Dallas",
    "Walter",
    "Brady",
    "Callum",
    "Ronan",
    "Hendrix",
    "Jorge",
    "Tobias",
    "Clayton",
    "Emerson",
    "Damien",
    "Zayn",
    "Malcolm",
    "Kayson",
    "Bodhi",
    "Bryan",
    "Aidan",
    "Cohen",
    "Brian",
    "Cayden",
    "Andre",
    "Niko",
    "Maximiliano",
    "Zander",
    "Khalil",
    "Rory",
    "Francisco",
    "Cruz",
    "Kobe",
    "Reid",
    "Daxton",
    "Derek",
    "Martin",
    "Jensen",
    "Karson",
    "Tate",
    "Muhammad",
    "Jaden",
    "Joaquin",
    "Josue",
    "Gideon",
    "Dante",
    "Cody",
    "Bradley",
    "Orion",
    "Spencer",
    "Angelo",
    "Erick",
    "Jaylen",
    "Julius",
    "Manuel",
    "Ellis",
    "Colson",
    "Cairo",
    "Gunner",
    "Wade",
    "Chance",
    "Odin",
    "Anderson",
    "Kane",
    "Raymond",
    "Cristian",
    "Aziel",
    "Prince",
    "Ezequiel",
    "Jake",
    "Otto",
    "Eduardo",
    "Rylan",
    "Ali",
    "Cade",
    "Stephen",
    "Ari",
    "Kameron",
    "Dakota",
    "Warren",
    "Ricardo",
    "Killian",
    "Mario",
    "Romeo",
    "Cyrus",
    "Ismael",
    "Russell",
    "Tyson",
    "Edwin",
    "Desmond",
    "Nasir",
    "Remy",
    "Tanner",
    "Fernando",
    "Hector",
    "Titus",
    "Lawson",
    "Sean",
    "Kyle",
    "Elian",
    "Corbin",
    "Bowen",
    "Wilder",
    "Armani",
    "Royal",
    "Stetson",
    "Briggs",
    "Sullivan",
    "Leonel",
    "Callan",
    "Finnegan",
    "Jay",
    "Zayne",
    "Marshall",
    "Kade",
    "Travis",
    "Sterling",
    "Raiden",
    "Sergio",
    "Tatum",
    "Cesar",
    "Zyaire",
    "Milan",
    "Devin",
    "Gianni",
    "Kamari",
    "Royce",
    "Malik",
    "Jared",
    "Franklin",
    "Clark",
    "Noel",
    "Marco",
    "Archie",
    "Apollo",
    "Pablo",
    "Garrett",
    "Oakley",
    "Memphis",
    "Quinn",
    "Onyx",
    "Alijah",
    "Baylor",
    "Edgar",
    "Nehemiah",
    "Winston",
    "Major",
    "Rhys",
    "Forrest",
    "Jaiden",
    "Reed",
    "Santino",
    "Troy",
    "Caiden",
    "Harvey",
    "Collin",
    "Solomon",
    "Donovan",
    "Damon",
    "Jeffrey",
    "Kason",
    "Sage",
    "Grady",
    "Kendrick",
    "Leland",
    "Luciano",
    "Pedro",
    "Hank",
    "Hugo",
    "Esteban",
    "Johnny",
    "Kashton",
    "Ronin",
    "Ford",
    "Mathias",
    "Porter",
    "Erik",
    "Johnathan",
    "Frank",
    "Tripp",
    "Casey",
    "Fabian",
    "Leonidas",
    "Baker",
    "Matthias",
    "Philip",
    "Jayceon",
    "Kian",
    "Saint",
    "Ibrahim",
    "Jaxton",
    "Augustus",
    "Callen",
    "Trevor",
    "Ruben",
    "Adan",
    "Conor",
    "Dax",
    "Braylen",
    "Kaison",
    "Francis",
    "Kyson",
    "Andy",
    "Lucca",
    "Mack",
    "Peyton",
    "Alexis",
    "Deacon",
    "Kasen",
    "Kamden",
    "Frederick",
    "Princeton",
    "Braylon",
    "Wells",
    "Nikolai",
    "Iker",
    "Bo",
    "Dominick",
    "Moshe",
    "Cassius",
    "Gregory",
    "Lewis",
    "Kieran",
    "Isaias",
    "Seth",
    "Marcos",
    "Omari",
    "Shane",
    "Keegan",
    "Jase",
    "Asa",
    "Sonny",
    "Uriel",
    "Pierce",
    "Jasiah",
    "Eden",
    "Rocco",
    "Banks",
    "Cannon",
    "Denver",
    "Zaiden",
    "Roberto",
    "Shawn",
    "Drew",
    "Emanuel",
    "Kolton",
    "Ayaan",
    "Ares",
    "Conner",
    "Jalen",
    "Alonzo",
    "Enrique",
    "Dalton",
    "Moses",
    "Koda",
    "Bodie",
    "Jamison",
    "Phillip",
    "Zaire",
    "Jonas",
    "Kylo",
    "Moises",
    "Shepherd",
    "Allen",
    "Kenzo",
    "Mohamed",
    "Keanu",
    "Dexter",
    "Conrad",
    "Bruce",
    "Sylas",
    "Soren",
    "Raphael",
    "Rowen",
    "Gunnar",
    "Sutton",
    "Quentin",
    "Jaziel",
    "Emmitt",
    "Makai",
    "Koa",
    "Maximilian",
    "Brixton",
    "Dariel",
    "Zachariah",
    "Roy",
    "Armando",
    "Corey",
    "Saul",
    "Izaiah",
    "Danny",
    "Davis",
    "Ridge",
    "Yusuf",
    "Ariel",
    "Valentino",
    "Jayson",
    "Ronald",
    "Albert",
    "Gerardo",
    "Ryland",
    "Dorian",
    "Drake",
    "Gage",
    "Rodrigo",
    "Hezekiah",
    "Kylan",
    "Boone",
    "Ledger",
    "Santana",
    "Jamari",
    "Jamir",
    "Lawrence",
    "Reece",
    "Kaysen",
    "Shiloh",
    "Arjun",
    "Marcelo",
    "Abram",
    "Benson",
    "Huxley",
    "Nikolas",
    "Zain",
    "Kohen",
    "Samson",
    "Miller",
    "Donald",
    "Finnley",
    "Kannon",
    "Lucian",
    "Watson",
    "Keith",
    "Westin",
    "Tadeo",
    "Sincere",
    "Boston",
    "Axton",
    "Amos",
    "Chandler",
    "Leandro",
    "Raul",
    "Scott",
    "Reign",
    "Alessandro",
    "Camilo",
    "Derrick",
    "Morgan",
    "Julio",
    "Clay",
    "Edison",
    "Jaime",
    "Augustine",
    "Julien",
    "Zeke",
    "Marvin",
    "Bellamy",
    "Landen",
    "Dustin",
    "Jamie",
    "Krew",
    "Kyree",
    "Colter",
    "Johan",
    "Houston",
    "Layton",
    "Quincy",
    "Case",
    "Atreus",
    "Cayson",
    "Aarav",
    "Darius",
    "Harlan",
    "Justice",
    "Abdiel",
    "Layne",
    "Raylan",
    "Arturo",
    "Taylor",
    "Anakin",
    "Ander",
    "Hamza",
    "Otis",
    "Azariah",
    "Leonard",
    "Colby",
    "Duke",
    "Flynn",
    "Trey",
    "Gustavo",
    "Fletcher",
    "Issac",
    "Sam",
    "Trenton",
    "Callahan",
    "Chris",
    "Mohammad",
    "Rayan",
    "Lionel",
    "Bruno",
    "Jaxxon",
    "Zaid",
    "Brycen",
    "Roland",
    "Dillon",
    "Lennon",
    "Ambrose",
    "Rio",
    "Mac",
    "Ahmed",
    "Samir",
    "Yosef",
    "Tru",
    "Creed",
    "Tony",
    "Alden",
    "Aden",
    "Alec",
    "Carmelo",
    "Dario",
    "Marcel",
    "Roger",
    "Ty",
    "Ahmad",
    "Emir",
    "Landyn",
    "Skyler",
    "Mohammed",
    "Dennis",
    "Kareem",
    "Nixon",
    "Rex",
    "Uriah",
    "Lee",
    "Louie",
    "Rayden",
    "Reese",
    "Alberto",
    "Cason",
    "Quinton",
    "Kingsley",
    "Chaim",
    "Alfredo",
    "Mauricio",
    "Caspian",
    "Legacy",
    "Ocean",
    "Ozzy",
    "Briar",
    "Wilson",
    "Forest",
    "Grey",
    "Joziah",
    "Salem",
    "Neil",
    "Remi",
    "Bridger",
    "Harry",
    "Jefferson",
    "Lachlan",
    "Nelson",
    "Casen",
    "Salvador",
    "Magnus",
    "Tommy",
    "Marcellus",
    "Maximo",
    "Jerry",
    "Clyde",
    "Aron",
    "Keaton",
    "Eliam",
    "Lian",
    "Trace",
    "Douglas",
    "Junior",
    "Titan",
    "Cullen",
    "Cillian",
    "Musa",
    "Mylo",
    "Hugh",
    "Tomas",
    "Vincenzo",
    "Westley",
    "Langston",
    "Byron",
    "Kiaan",
    "Loyal",
    "Orlando",
    "Kyro",
    "Amias",
    "Amiri",
    "Jimmy",
    "Vicente",
    "Khari",
    "Brendan",
    "Rey",
    "Ben",
    "Emery",
    "Zyair",
    "Bjorn",
    "Evander",
    "Ramon",
    "Alvin",
    "Ricky",
    "Jagger",
    "Brock",
    "Dakari",
    "Eddie",
    "Blaze",
    "Gatlin",
    "Alonso",
    "Curtis",
    "Kylian",
    "Nathanael",
    "Devon",
    "Wayne",
    "Zakai",
    "Mathew",
    "Rome",
    "Riggs",
    "Aryan",
    "Avi",
    "Hassan",
    "Lochlan",
    "Stanley",
    "Dash",
    "Kaiser",
    "Benicio",
    "Bryant",
    "Talon",
    "Rohan",
    "Wesson",
    "Joe",
    "Noe",
    "Melvin",
    "Vihaan",
    "Zayd",
    "Darren",
    "Enoch",
    "Mitchell",
    "Jedidiah",
    "Brodie",
    "Castiel",
    "Ira",
    "Lance",
    "Guillermo",
    "Thatcher",
    "Ermias",
    "Misael",
    "Jakari",
    "Emory",
    "Mccoy",
    "Rudy",
    "Thaddeus",
    "Valentin",
    "Yehuda",
    "Bode",
    "Madden",
    "Kase",
    "Bear",
    "Boden",
    "Jiraiya",
    "Maurice",
    "Alvaro",
    "Ameer",
    "Demetrius",
    "Eliseo",
    "Kabir",
    "Kellan",
    "Allan",
    "Azrael",
    "Calum",
    "Niklaus",
    "Ray",
    "Damari",
    "Elio",
    "Jon",
    "Leighton",
    "Axl",
    "Dane",
    "Eithan",
    "Eugene",
    "Kenji",
    "Jakob",
    "Colten",
    "Eliel",
    "Nova",
    "Santos",
    "Zahir",
    "Idris",
    "Ishaan",
    "Kole",
    "Korbin",
    "Seven",
    "Alaric",
    "Kellen",
    "Bronson",
    "Franco",
    "Wes",
    "Larry",
    "Mekhi",
    "Jamal",
    "Dilan",
    "Elisha",
    "Brennan",
    "Kace",
    "Van",
    "Felipe",
    "Fisher",
    "Cal",
    "Dior",
    "Judson",
    "Alfonso",
    "Deandre",
    "Rocky",
    "Henrik",
    "Reuben",
    "Anders",
    "Arian",
    "Damir",
    "Jacoby",
    "Khalid",
    "Kye",
    "Mustafa",
    "Jadiel",
    "Stefan",
    "Yousef",
    "Aydin",
    "Jericho",
    "Robin",
    "Wallace",
    "Alistair",
    "Davion",
    "Alfred",
    "Ernesto",
    "Kyng",
    "Everest",
    "Gary",
    "Leroy",
    "Yahir",
    "Braden",
    "Kelvin",
    "Kristian",
    "Adler",
    "Avyaan",
    "Brayan",
    "Jones",
    "Truett",
    "Aries",
    "Joey",
    "Randy",
    "Jaxx",
    "Jesiah",
    "Jovanni",
    "Azriel",
    "Brecken",
    "Harley",
    "Zechariah",
    "Gordon",
    "Jakai",
    "Carl",
    "Graysen",
    "Kylen",
    "Ayan",
    "Branson",
    "Crosby",
    "Dominik",
    "Jabari",
    "Jaxtyn",
    "Kristopher",
    "Ulises",
    "Zyon",
    "Fox",
    "Howard",
    "Salvatore",
    "Turner",
    "Vance",
    "Harlem",
    "Jair",
    "Jakobe",
    "Jeremias",
    "Osiris",
    "Azael",
    "Bowie",
    "Canaan",
    "Elon",
    "Granger",
    "Karsyn",
    "Zavier",
    "Cain",
    "Dangelo",
    "Heath",
    "Yisroel",
    "Gian",
    "Shepard",
    "Harold",
    "Kamdyn",
    "Rene",
    "Rodney",
    "Yaakov",
    "Adrien",
    "Kartier",
    "Cassian",
    "Coleson",
    "Ahmir",
    "Darian",
    "Genesis",
    "Kalel",
    "Agustin",
    "Wylder",
    "Yadiel",
    "Ephraim",
    "Kody",
    "Neo",
    "Ignacio",
    "Osman",
    "Aldo",
    "Abdullah",
    "Cory",
    "Blaine",
    "Dimitri",
    "Khai",
    "Landry",
    "Palmer",
    "Benedict",
    "Leif",
    "Koen",
    "Maxton",
    "Mordechai",
    "Zev",
    "Atharv",
    "Bishop",
    "Blaise",
    "Davian",
];

const lastNames: string[] = [
    "Smith",
    "Johnson",
    "Williams",
    "Brown",
    "Jones",
    "Garcia",
    "Miller",
    "Davis",
    "Rodriguez",
    "Martinez",
    "Hernandez",
    "Lopez",
    "Gonzalez",
    "Wilson",
    "Anderson",
    "Thomas",
    "Taylor",
    "Moore",
    "Jackson",
    "Martin",
    "Lee",
    "Perez",
    "Thompson",
    "White",
    "Harris",
    "Sanchez",
    "Clark",
    "Ramirez",
    "Lewis",
    "Robinson",
    "Walker",
    "Young",
    "Allen",
    "King",
    "Wright",
    "Scott",
    "Torres",
    "Nguyen",
    "Hill",
    "Flores",
    "Green",
    "Adams",
    "Nelson",
    "Baker",
    "Hall",
    "Rivera",
    "Campbell",
    "Mitchell",
    "Carter",
    "Roberts",
];

const genericStreetNames: string[] = [
    "St.",
    "Rd.",
    "Blvd.",
    "Pkwy.",
    "Hwy.",
    "Ln.",
    "Ct.",
];

const cityNames: string[] = [
    "New York",
    "Los Angeles",
    "Chicago",
    "Houston",
    "Philadelphia",
    "Phoenix",
    "San Antonio",
    "San Diego",
    "Dallas",
    "San Jose",
    "Austin",
    "Jacksonville",
    "San Francisco",
    "Indianapolis",
    "Columbus",
    "Fort Worth",
    "Charlotte",
    "Seattle",
    "Denver",
    "El Paso",
    "Detroit",
    "Washington",
    "Boston",
    "Memphis",
    "Nashville",
    "Portland",
    "Oklahoma City",
    "Las Vegas",
    "Baltimore",
    "Louisville",
    "Milwaukee",
    "Albuquerque",
    "Tucson",
    "Fresno",
    "Sacramento",
    "Kansas City",
    "Long Beach",
    "Mesa",
    "Atlanta",
    "Colorado Springs",
    "Virginia Beach",
    "Raleigh",
    "Omaha",
    "Miami",
    "Oakland",
    "Minneapolis",
    "Tulsa",
    "Wichita",
    "New Orleans",
    "Arlington Texas",
];

const stateNames: string[] = [
    "Alabama",
    "Alaska",
    "Arizona",
    "Arkansas",
    "California",
    "Colorado",
    "Connecticut",
    "Delaware",
    "Florida",
    "Georgia",
    "Hawaii",
    "Idaho",
    "Illinois",
    "Indiana",
    "Iowa",
    "Kansas",
    "Kentucky",
    "Louisiana",
    "Maine",
    "Maryland",
    "Massachusetts",
    "Michigan",
    "Minnesota",
    "Mississippi",
    "Missouri",
    "Montana",
    "Nebraska",
    "Nevada",
    "New Hampshire",
    "New Jersey",
    "New Mexico",
    "New York",
    "North Carolina",
    "North Dakota",
    "Ohio",
    "Oklahoma",
    "Oregon",
    "Pennsylvania",
    "Rhode Island",
    "South Carolina",
    "South Dakota",
    "Tennessee",
    "Texas",
    "Utah",
    "Vermont",
    "Virginia",
    "Washington",
    "West Virginia",
    "Wisconsin",
    "Wyoming",
];

function pickRandom <T> (arr: T[]): T {
    return arr[randomInt(0, arr.length)];
}

function randomPhoneNumber (): string {
    const d = Array(10).fill(0).map(() => randomInt(0, 9));
    const type = randomInt(0, 2);
    switch (type) {
        case (0): {
            return `(${d[0]}${d[1]}${d[2]}) ${d[3]}${d[4]}${d[5]}-${d[6]}${d[7]}${d[8]}${d[9]}`;
        }
        case (1): {
            return `+1 (${d[0]}${d[1]}${d[2]}) ${d[3]}${d[4]}${d[5]}-${d[6]}${d[7]}${d[8]}${d[9]}`;
        }
        case (2): {
            return `+44 ${d[0]}${d[1]}${d[2]}.${d[3]}${d[4]}${d[5]}.${d[6]}${d[7]}${d[8]}${d[9]}`;
        }
        default: {
            return `${d[0]}${d[1]}${d[2]}-${d[3]}${d[4]}${d[5]}-${d[6]}${d[7]}${d[8]}${d[9]}`;
        }
    }
}

export
function createMockUsername (): string {
    const firstName = pickRandom(firstNames);
    const lastName = pickRandom(lastNames);
    return `${firstName[0]}${lastName}`.toLowerCase();
}

export
function createMockEmail (): string {
    const localpart = createMockUsername();
    const domain = `${createMockUsername()}.com`;
    return `${localpart}@${domain}`.toLowerCase();
}

export
function createMockPersonAttributes (
    otherObjectClasses?: OBJECT_IDENTIFIER[],
): [ RelativeDistinguishedName, Attribute[], string ] {
    const firstName = pickRandom(firstNames);
    const lastName = pickRandom(lastNames);
    const randomId = randomInt(0, 10000);
    const cn = `${firstName} ${lastName} #${randomId}`;
    const cityName = pickRandom(cityNames);
    const stateName = pickRandom(stateNames);
    const streetSpecific = pickRandom(lastNames);
    const streetGeneric = pickRandom(genericStreetNames);
    const street = `${randomInt(1000)} ${streetSpecific} ${streetGeneric}`;
    const postal = randomInt(99999).toString().padStart(5, "0");
    const address = [
        street,
        `${cityName}, ${stateName} ${postal}`,
    ];
    const phone = randomPhoneNumber();
    const fax = new FacsimileTelephoneNumber(
        randomPhoneNumber(),
        undefined,
    );
    const password = randomBytes(6).toString("base64");
    const desc = `This user's password is '${password}'.`;

    const rdn: RelativeDistinguishedName = [
        new AttributeTypeAndValue(
            commonName["&id"],
            commonName.encoderFor["&Type"]!({ uTF8String: cn }, DER),
        ),
    ];
    const attributes: Attribute[] = [
        new Attribute(
            objectClass["&id"],
            [
                person["&id"],
                residentialPerson["&id"],
                ...otherObjectClasses ?? [],
            ].map((oc) => objectClass.encoderFor["&Type"]!(oc, DER)),
        ),
        new Attribute(
            commonName["&id"],
            [commonName.encoderFor["&Type"]!({ uTF8String: cn }, DER)],
        ),
        new Attribute(
            surname["&id"],
            [surname.encoderFor["&Type"]!({ uTF8String: lastName }, DER)],
        ),
        new Attribute(
            localityName["&id"],
            [localityName.encoderFor["&Type"]!({ uTF8String: cityName }, DER)],
        ),
        new Attribute(
            stateOrProvinceName["&id"],
            [stateOrProvinceName.encoderFor["&Type"]!({ uTF8String: stateName }, DER)],
        ),
        new Attribute(
            streetAddress["&id"],
            [streetAddress.encoderFor["&Type"]!({ uTF8String: street }, DER)],
        ),
        new Attribute(
            physicalDeliveryOfficeName["&id"],
            [physicalDeliveryOfficeName.encoderFor["&Type"]!({ uTF8String: cityName }, DER)],
        ),
        new Attribute(
            postalAddress["&id"],
            [postalAddress.encoderFor["&Type"]!(address.map((a) => ({ uTF8String: a })), DER)],
        ),
        new Attribute(
            postalCode["&id"],
            [postalCode.encoderFor["&Type"]!({ uTF8String: postal }, DER)],
        ),
        new Attribute(
            postOfficeBox["&id"],
            [postOfficeBox.encoderFor["&Type"]!({ uTF8String: cn }, DER)],
        ),
        new Attribute(
            facsimileTelephoneNumber["&id"],
            [facsimileTelephoneNumber.encoderFor["&Type"]!(fax, DER)],
        ),
        new Attribute(
            internationalISDNNumber["&id"],
            [internationalISDNNumber.encoderFor["&Type"]!(randomInt(10000000).toString(), DER)],
        ),
        new Attribute(
            telephoneNumber["&id"],
            [telephoneNumber.encoderFor["&Type"]!(phone, DER)],
        ),
        new Attribute(
            description["&id"],
            [description.encoderFor["&Type"]!({ uTF8String: desc }, DER)],
        ),
        new Attribute(
            userPassword["&id"],
            [userPassword.encoderFor["&Type"]!(Buffer.from(password), DER)],
        ),
        // new Attribute(
        //     seeAlso["&id"],
        //     [seeAlso.encoderFor["&Type"]!({ uTF8String: cn }, DER)],
        // ),
    ];
    return [ rdn, attributes, cn ];
}

const businessCategories: string[] = [
    "Plumbing",
    "Aeronautics",
    "Finance",
    "Technology",
    "Healthcare",
    "Welding",
    "Entertainment",
    "Education",
    "Transportation",
    "Government",
    "Retail",
    "Manufacturing",
];

export
function createMockOrganizationAttributes (): [ RelativeDistinguishedName, Attribute[], string ] {
    const randomId = randomInt(0, 10000);
    const lastName = pickRandom(lastNames);
    const cityName = pickRandom(cityNames);
    const stateName = pickRandom(stateNames);
    const streetSpecific = pickRandom(lastNames);
    const streetGeneric = pickRandom(genericStreetNames);
    const street = `${randomInt(1000)} ${streetSpecific} ${streetGeneric}`;
    const postal = randomInt(99999).toString().padStart(5, "0");
    const address = [
        street,
        `${cityName}, ${stateName} ${postal}`,
    ];
    const phone = randomPhoneNumber();
    const fax = new FacsimileTelephoneNumber(
        randomPhoneNumber(),
        undefined,
    );
    const category = pickRandom(businessCategories);
    const password = randomBytes(6).toString("base64");
    const desc = `This user's password is '${password}'.`;
    const orgName = `${lastName} ${category} #${randomId}`;
    const rdn: RelativeDistinguishedName = [
        new AttributeTypeAndValue(
            organizationName["&id"],
            organizationName.encoderFor["&Type"]!({ uTF8String: orgName }, DER),
        ),
    ];
    const attributes: Attribute[] = [
        new Attribute(
            objectClass["&id"],
            [
                organization["&id"],
            ].map((oc) => objectClass.encoderFor["&Type"]!(oc, DER)),
        ),
        new Attribute(
            organizationName["&id"],
            [organizationName.encoderFor["&Type"]!({ uTF8String: orgName }, DER)],
        ),
        new Attribute(
            localityName["&id"],
            [localityName.encoderFor["&Type"]!({ uTF8String: cityName }, DER)],
        ),
        new Attribute(
            stateOrProvinceName["&id"],
            [stateOrProvinceName.encoderFor["&Type"]!({ uTF8String: stateName }, DER)],
        ),
        new Attribute(
            streetAddress["&id"],
            [streetAddress.encoderFor["&Type"]!({ uTF8String: street }, DER)],
        ),
        new Attribute(
            physicalDeliveryOfficeName["&id"],
            [physicalDeliveryOfficeName.encoderFor["&Type"]!({ uTF8String: cityName }, DER)],
        ),
        new Attribute(
            postalAddress["&id"],
            [postalAddress.encoderFor["&Type"]!(address.map((a) => ({ uTF8String: a })), DER)],
        ),
        new Attribute(
            postalCode["&id"],
            [postalCode.encoderFor["&Type"]!({ uTF8String: postal }, DER)],
        ),
        new Attribute(
            postOfficeBox["&id"],
            [postOfficeBox.encoderFor["&Type"]!({ uTF8String: "44A" }, DER)],
        ),
        new Attribute(
            facsimileTelephoneNumber["&id"],
            [facsimileTelephoneNumber.encoderFor["&Type"]!(fax, DER)],
        ),
        new Attribute(
            internationalISDNNumber["&id"],
            [internationalISDNNumber.encoderFor["&Type"]!(randomInt(10000000).toString(), DER)],
        ),
        new Attribute(
            telephoneNumber["&id"],
            [telephoneNumber.encoderFor["&Type"]!(phone, DER)],
        ),
        new Attribute(
            description["&id"],
            [description.encoderFor["&Type"]!({ uTF8String: desc }, DER)],
        ),
        new Attribute(
            businessCategory["&id"],
            [businessCategory.encoderFor["&Type"]!({ uTF8String: category }, DER)],
        ),
    ];
    return [ rdn, attributes, orgName ];
}

export
function createMockCertificate (
    issuerDN?: DistinguishedName,
    subjectDN?: DistinguishedName,
): Certificate {
    const sigAlg = new AlgorithmIdentifier(
        sha256WithRSAEncryption,
        undefined,
    );
    const mod = new DERElement(
        ASN1TagClass.universal,
        ASN1Construction.primitive,
        ASN1UniversalType.integer,
    );
    /**
     * You cannot directly set .value here, because there will sometimes be
     * padding bytes, which will cause an invalid encoding.
     */
    mod.integer = BigInt("0x" + Buffer.from(randomBytes(256)).toString("hex")); // Not a valid modulus, by the way.
    const sigValue = randomBytes(256); // Not a valid signature, either.
    const issuerDN_: DistinguishedName = issuerDN ?? [
        [
            new AttributeTypeAndValue(
                commonName["&id"],
                _encodeUTF8String("Digitrust Veracert McSafetySecure, LLC", DER),
            ),
        ],
    ];
    const subjectDN_: DistinguishedName = subjectDN ?? [
        [
            new AttributeTypeAndValue(
                localityName["&id"],
                _encodeUTF8String("Bananaville", DER),
            ),
        ],
        [
            new AttributeTypeAndValue(
                commonName["&id"],
                _encodeUTF8String(`Nameless citizen ${randomInt(10000).toString().padStart(5, "0")}`, DER),
            ),
        ],
    ];
    const tbs = new TBSCertificate(
        Version_v3,
        _encodeInteger(randomInt(1, 1000000), DER).value,
        sigAlg,
        {
            rdnSequence: issuerDN_,
        },
        new Validity(
            {
                generalizedTime: new Date(),
            },
            {
                generalizedTime: addDays(new Date(), randomInt(1000, 10000)),
            },
        ),
        {
            rdnSequence: subjectDN_,
        },
        new SubjectPublicKeyInfo(
            new AlgorithmIdentifier(
                rsaEncryption,
                undefined,
            ),
            unpackBits(DERElement.fromSequence([
                mod,
                new DERElement(
                    ASN1TagClass.universal,
                    ASN1Construction.primitive,
                    ASN1UniversalType.integer,
                    65537,
                ),
            ]).toBytes()),
        ),
        undefined,
        undefined,
        [
            new Extension(
                subjectAltName["&id"]!,
                false,
                subjectAltName.encoderFor["&ExtnType"]!([
                    {
                        rfc822Name: "bigchungus420@gmail.com",
                    },
                ], DER).toBytes(),
            )
        ],
    );
    return new SIGNED(
        tbs,
        sigAlg,
        unpackBits(sigValue),
        undefined,
        undefined,
    );
}

export
function createMockCRL (
    issuerDN?: DistinguishedName,
): CertificateList {
    const sigAlg = new AlgorithmIdentifier(
        sha256WithRSAEncryption,
        undefined,
    );
    const mod = new DERElement(
        ASN1TagClass.universal,
        ASN1Construction.primitive,
        ASN1UniversalType.integer,
    );
    /**
     * You cannot directly set .value here, because there will sometimes be
     * padding bytes, which will cause an invalid encoding.
     */
    mod.integer = BigInt("0x" + Buffer.from(randomBytes(256)).toString("hex")); // Not a valid modulus, by the way.
    const sigValue = randomBytes(256); // Not a valid signature, either.
    const issuerDN_: DistinguishedName = issuerDN ?? [
        [
            new AttributeTypeAndValue(
                commonName["&id"],
                _encodeUTF8String("Digitrust Veracert McSafetySecure, LLC", DER),
            ),
        ],
    ];
    const tbs = new CertificateListContent(
        Version_v3,
        sigAlg,
        {
            rdnSequence: issuerDN_,
        },
        {
            generalizedTime: new Date(),
        },
        {
            generalizedTime: addDays(new Date(), 999),
        },
        [
            new RevokedCert(
                _encodeInteger(randomInt(1, 1000000), DER).value,
                {
                    generalizedTime: addDays(new Date(), -10)
                },
                undefined,
            ),
        ],
        [],
        [
            new Extension(
                cRLNumber["&id"]!,
                false,
                cRLNumber.encoderFor["&ExtnType"]!(randomInt(1, 500), DER).toBytes(),
            ),
        ],
    );
    return new SIGNED(
        tbs,
        sigAlg,
        unpackBits(sigValue),
        undefined,
        undefined,
    );
};
