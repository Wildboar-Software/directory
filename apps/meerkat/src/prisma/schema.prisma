// In schema defined in this file, lower snake-cased names and identifiers
// shall be used for column names, unless they are named after something, such
// as an attribute type, in which case, the casing in which that thing normally
// appears shall be used. Models shall always be upper camel-cased.

// Remember when you examine this schema: shadowing could be used, which means
// that all attributes necessary for an entry may not actually be present in
// _this_ database.

datasource db {
  url      = env("DATABASE_URL")
  provider = "sqlite"
  // provider = "postgresql"
  // provider = "sqlserver"
}

generator client {
  provider = "prisma-client-js"
}

// Subentry attributes, such as those documented in X.501, Section 14.4.3,
// shall NOT be a part of this model. They should only be kept in the subentry,
// just like collective attributes.
model Entry {
  id        Int     @id @default(autoincrement())
  // LDAP operational attributes
  // See IETF RFC 4512: https://datatracker.ietf.org/doc/html/rfc4512#section-3.
  entryUUID String? // @db.Uuid
  // A separate attribute for identifying a DSE. entryUUID cannot be used to
  // identify DSEs, because in shadow DSEs, it may not be known.
  dseUUID   String  @default(uuid())

  materialized_path     String
  immediate_superior_id Int?
  immediate_superior    Entry? @relation(name: "superior", fields: [immediate_superior_id], references: [id])

  // DSE Types
  //   root          Boolean @default(false) // Indicated by having no immediate superior.
  glue       Boolean @default(false)
  cp         Boolean @default(false)
  entry      Boolean @default(false)
  // In theory, this could be inferred from the existence of aliased_entry_dn,
  // but shadowing means that the SDSEType could portend that the entry is
  // an alias without replicating the `aliasedEntryName` attribute.
  alias      Boolean @default(false)
  subr       Boolean @default(false)
  nssr       Boolean @default(false)
  //   supr          Boolean @default(false) // Only applies to the Root DSE. True if there is a Knowledge of type SUPERIOR.
  xr         Boolean @default(false)
  // In theory, this could be inferred from the existence of administrative
  // role but shadowing means that the SDSEType could portend that the entry
  // is an administrative point without replicating the `administrativeRole`
  // attribute.
  admPoint   Boolean @default(false)
  subentry   Boolean @default(false)
  shadow     Boolean @default(false)
  immSupr    Boolean @default(false)
  rhob       Boolean @default(false)
  sa         Boolean @default(false)
  dsSubentry Boolean @default(false)
  //   familyMember  Boolean @default(false) True if parent or child in
  //   ditBridge     Boolean @default(false) // Only applies to Root DSE if other DITs are defined.
  //   writeableCopy Boolean @default(false) // Not used.

  // Single-valued attributes
  createTimestamp     DateTime // Can be non-null: even SDSEs are required to transmit createTimestamp.
  modifyTimestamp     DateTime // Can be non-null: even SDSEs are required to transmit modifyTimestamp.
  deleteTimestamp     DateTime? // This is not a standard attribute. This is kept just to permit "soft-deletion."
  creatorsName        Bytes? // [{"2.5.4.3":"Jonathan Wilbur"}, {"2.5.4.10":"Wildboar Software"}]
  modifiersName       Bytes? // [{"2.5.4.3":"Jonathan Wilbur"}, {"2.5.4.10":"Wildboar Software"}]
  expiresTimestamp    DateTime? // This is used for entryTTL.
  modifyNameTimestamp DateTime?
  previousName        Bytes? // [{"2.5.4.3":"Jonathan Wilbur"}, {"2.5.4.10":"Wildboar Software"}]

  // This should be stored, rather than calculated. The reason for this is that
  // the permitted superior structure rules refers to the governingStructureRule
  // value of the superior entry. If this is not stored, it means that the
  // governingStructureRule must be recursively calculated for every ancestor up
  // until the subschema administrative point, which could be wrong as the rules
  // change and new rules also permit the entry.
  governingStructureRule Int?

  // The structural object class is not permitted to change for an entry.
  structuralObjectClass String? // OID

  // Shadowing flags. See ITU Recommendation X.525 (2019), Section 7.2.1.
  subordinate_completeness Boolean?
  attribute_completeness   Boolean?
  // This is not a boolean. It is a set of attribute types whose values are incomplete.
  // attribute_values_incomplete

  lastShadowUpdate DateTime? // Could be used to populate the syncTimestamp attribute.

  // Storage parameters
  keep_children_in_database Boolean @default(false)

  // Permissions
  may_add_top_level_dse Boolean @default(false)

  // Hierarchy Attributes
  // According to ITU X.501, Section 10.2:
  // "A hierarchical group shall be confined to a single DSA."
  // This means that we can just use database IDs to represent hierarchy members.
  hierarchyParent_id Int?
  hierarchyParent    Entry?  @relation(name: "parent", fields: [hierarchyParent_id], references: [id])
  hierarchyParentDN  Bytes?
  hierarchyParentStr String?
  hierarchyTop_id    Int?
  hierarchyTop       Entry?  @relation(name: "top", fields: [hierarchyTop_id], references: [id])
  hierarchyTopDN     Bytes?
  hierarchyTopStr    String?
  hierarchyPath      String? // Period-delimited database IDs
  hierarchyLevel     Int?

  subordinates         Entry[]                @relation("superior")
  hierarchicalChildren Entry[]                @relation("parent")
  MatchingRuleUse      MatchingRuleUse[]
  AttributeValue       AttributeValue[]
  AccessPoint          AccessPoint[]
  Password             Password[]
  RDN                  DistinguishedValue[]
  EntryObjectClass     EntryObjectClass[]
  AliasEntry           Alias[]                @relation("alias_entry")
  AliasedEntry         Alias?                 @relation("aliased_entry")
  DITStructureRule     DITStructureRule[]
  ContentRule          ContentRule[]
  ContextUseRule       ContextUseRule[]
  Friendship           Friendship[]
  OperationalBinding   OperationalBinding[]
  PasswordHistory      PasswordHistory[]
  Entry                Entry[]                @relation("top")
  EnqueuedSearchResult EnqueuedSearchResult[]
  EnqueuedListResult   EnqueuedListResult[]

  EntryAttributeValuesIncomplete EntryAttributeValuesIncomplete[]
  AttributeTypeDescription       AttributeTypeDescription[]
  ObjectClassDescription         ObjectClassDescription[]
  NameForm                       NameForm[]
  ContextDescription             ContextDescription[]

  @@unique([dseUUID])
  @@index([immediate_superior_id, deleteTimestamp, expiresTimestamp, subentry])
  @@index([materialized_path])
  @@index([hierarchyTop_id])
  @@index([hierarchyParent_id])
  @@index([hierarchyPath])
}

// There may be only one password per entry
model Password {
  id                       Int    @id @default(autoincrement())
  entry_id                 Int
  entry                    Entry  @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  encrypted                Bytes
  algorithm_oid            String // OID
  algorithm_parameters_der Bytes?

  @@unique([entry_id])
}

model PasswordHistory {
  id       Int      @id @default(autoincrement())
  entry_id Int
  entry    Entry    @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  time     DateTime
  password Bytes // BER encoding of UserPwd with encrypted alternative, using Scrypt.

  @@unique([entry_id, time])
}

// This table defines what constitutes dictionary words, person names, and
// geographic names per the `PwdVocabulary` production in the `PasswordPolicy`
// ASN.1 module.
model PasswordDictionaryItem {
  id   Int    @id @default(autoincrement())
  bit  Int
  item String

  @@unique([bit, item])
}

// AccessPoint ::= SET {
//     ae-title             [0]  Name,
//     address              [1]  PresentationAddress,
//     protocolInformation  [2]  SET SIZE (1..MAX) OF ProtocolInformation OPTIONAL,
//     --                   [6]  Not to be used
//     ... }

model AttributeValue {
  id             Int     @id @default(autoincrement())
  entry_id       Int
  entry          Entry   @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  type_oid       Bytes // BinaryOID
  operational    Boolean @default(false) // True if attribute type is not userApplications
  tag_class      Int
  constructed    Boolean
  tag_number     Int
  content_octets Bytes
  normalized_str String?

  ContextValue ContextValue[]

  // 128 is the old upper bound on most string types. See UpperBounds.asn1.
  @@index([entry_id, type_oid, tag_class, constructed, tag_number, normalized_str])
  @@index([entry_id, operational, type_oid])
  @@index([type_oid, tag_class, constructed, tag_number, normalized_str])
}

model ContextValue {
  id          Int            @id @default(autoincrement())
  value_id    Int
  value       AttributeValue @relation(fields: [value_id], references: [id], onDelete: Cascade)
  type        String
  tag_class   Int
  constructed Boolean
  tag_number  Int
  ber         Bytes
  fallback    Boolean

  @@index([value_id])
}

// enum Knowledge {
//   MY_ACCESS_POINT
//   SUPERIOR
//   SPECIFIC
//   NON_SPECIFIC
//   SUPPLIER
//   CONSUMER
//   SECONDARY_SUPPLIER
//   SECONDARY_CONSUMER
//   // DIT_BRIDGE
//   OTHER
//   OB_REQUEST
//   OB_SHADOW_MASTER // Purely informational. From ShadowingAgreementInfo.master.
//   NON_SUPPLYING_MASTER
// }

// Type: MY, supr, supplier, consumer, secondary consumer, xr, immSupr, subr, nssr?
// Satisfies AccessPoint, MasterOrShadowAccessPoint, SupplierOrConsumer, ConsumerInformation, and SupplierInformation
model AccessPoint {
  id                       Int                         @id @default(autoincrement())
  ber                      Bytes // This will depend on the knowledge type. If SpecK or NSK => MOSAP.
  knowledge_type           String
  ae_title                 Bytes // [{"2.5.4.3":"Jonathan Wilbur"}, {"2.5.4.10":"Wildboar Software"}]
  category                 Int?
  chainingRequired         Boolean?
  supplier_is_master       Boolean?
  non_supplying_master_id  Int?
  non_supplying_master     AccessPoint?                @relation("non_supplying_master", fields: [non_supplying_master_id], references: [id])
  is_consumer_of_id        Int? // This comes from SupplierAndConsumers.consumers
  is_consumer_of           AccessPoint?                @relation("is_consumer_of", fields: [is_consumer_of_id], references: [id])
  entry_id                 Int?
  entry                    Entry?                      @relation(fields: [entry_id], references: [id], onDelete: SetNull)
  non_supplying_master_for AccessPoint[]               @relation("non_supplying_master")
  consumers                AccessPoint[]               @relation("is_consumer_of")
  operational_bindings     OperationalBinding[]        @relation("ob_access_point")
  is_master_for            OperationalBinding[]        @relation("ob_master")
  NSAP                     NetworkServiceAccessPoint[]

  // Note that nonSpecificKnowledge is both multi-valued and the individual
  // values are of type MasterAndShadowAccessPoints. This is an arbitrary
  // integer that uniquely identifies the nonSpecificKnowledge value within the
  // entry to which this access point belongs.
  nsk_group BigInt?

  // If this access point was added by an NHOB, this will contain the OB
  // identifier so that, when access points are replaced by modifications to the
  // NHOB, only those associated with the modified operational binding can
  // easily be identified and removed.
  nssr_binding_identifier Int?

  // Whether to trust this DSA for Identity-Based Requester Authentication, as
  // described in ITU Recommendation X.518 (2019), Section 22.1.1, meaning that
  // the originator and authenticationLevel fields of the chaining arguments
  // sent by this DSA via chaining will be trusted by fiat.
  trust_ibra Boolean @default(false)

  // Whether this DSA may receive cross references, if requested.
  disclose_cross_refs Boolean @default(false)

  active      Boolean                  @default(true)
  created_at  DateTime                 @default(now())
  credentials AccessPointCredentials[]

  @@index([entry_id])
}

model NetworkServiceAccessPoint {
  id              Int         @id @default(autoincrement())
  hostname        String?
  port            Int? // @db.SmallUnsignedInt
  url             String?
  bytes           Bytes
  access_point_id Int
  access_point    AccessPoint @relation(fields: [access_point_id], references: [id], onDelete: Cascade)

  @@index([access_point_id])
}

model DitBridgeKnowledge {
  id              Int     @id @default(autoincrement())
  domain_local_id String?
  ber             Bytes
}

// enum ObjectClassKind {
//   ABSTRACT
//   STRUCTURAL
//   AUXILIARY
// }

// NAME-FORM ::= CLASS {
//     &namedObjectClass     OBJECT-CLASS,
//     &MandatoryAttributes  ATTRIBUTE,
//     &OptionalAttributes   ATTRIBUTE OPTIONAL,
//     &ldapName             SEQUENCE SIZE(1..MAX) OF UTF8String OPTIONAL,
//     &ldapDesc             UTF8String OPTIONAL,
//     &id                   OBJECT IDENTIFIER UNIQUE }
// WITH SYNTAX {
//     NAMES                 &namedObjectClass
//     WITH ATTRIBUTES       &MandatoryAttributes
//     [AND OPTIONALLY       &OptionalAttributes]
//     [LDAP-NAME            &ldapName]
//     [LDAP-DESC            &ldapDesc]
//     ID                    &id }
// Also satisfies NameFormDescription
model NameForm {
  id                  Int      @id @default(autoincrement())
  namedObjectClass    String
  mandatoryAttributes String
  optionalAttributes  String?
  ldapName            String?
  ldapDesc            String?
  identifier          String
  name                String?
  description         String?
  obsolete            Boolean  @default(false)
  created_at          DateTime @default(now())

  // Why entry_id if name forms are universal? So schema shadowed from
  // other DSAs does not overwrite this DSA's conception of the same schema objects.
  entry_id Int?
  entry    Entry? @relation(fields: [entry_id], references: [id], onDelete: Cascade)

  @@unique([entry_id, identifier])
  @@index([namedObjectClass])
}

// DITStructureRule ::= SEQUENCE {
//   ruleIdentifier          RuleIdentifier,
//                  -- shall be unique within the scope of the subschema
//   nameForm                NAME-FORM.&id,
//   superiorStructureRules  SET SIZE (1..MAX) OF RuleIdentifier OPTIONAL,
//   ... }
// Also satisfies DITStructureRuleDescription
model DITStructureRule {
  id                     Int      @id @default(autoincrement())
  ruleIdentifier         Int
  nameForm               String
  superiorStructureRules String?
  name                   String?
  description            String?
  obsolete               Boolean  @default(false)
  entry_id               Int
  entry                  Entry    @relation(fields: [entry_id], references: [id])
  created_at             DateTime @default(now())

  @@unique([entry_id, ruleIdentifier])
}

// CONTENT-RULE ::= CLASS {
//   &structuralClass          OBJECT-CLASS.&id UNIQUE,
//   &Auxiliaries              OBJECT-CLASS OPTIONAL,
//   &Mandatory                ATTRIBUTE OPTIONAL,
//   &Optional                 ATTRIBUTE OPTIONAL,
//   &Precluded                ATTRIBUTE OPTIONAL }
// WITH SYNTAX {
//   STRUCTURAL OBJECT-CLASS   &structuralClass
//   [AUXILIARY OBJECT-CLASSES &Auxiliaries]
//   [MUST CONTAIN             &Mandatory]
//   [MAY CONTAIN              &Optional]
//   [MUST-NOT CONTAIN         &Precluded] }
// Also satisfies DITContentRuleDescription
model ContentRule {
  id                   Int      @id @default(autoincrement())
  structural_class     String
  auxiliary_classes    String?
  mandatory_attributes String?
  optional_attributes  String?
  precluded_attributes String?
  name                 String?
  description          String?
  obsolete             Boolean  @default(false)
  entry_id             Int
  entry                Entry    @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  created_at           DateTime @default(now())

  @@unique([entry_id, structural_class])
}

// DIT-CONTEXT-USE-RULE ::= CLASS {
//   &attributeType      ATTRIBUTE.&id UNIQUE,
//   &Mandatory          CONTEXT OPTIONAL,
//   &Optional           CONTEXT OPTIONAL}
// WITH SYNTAX {
//   ATTRIBUTE TYPE      &attributeType
//   [MANDATORY CONTEXTS &Mandatory]
//   [OPTIONAL CONTEXTS  &Optional] }
// Also satisfies DITContextUseDescription
model ContextUseRule {
  id            Int      @id @default(autoincrement())
  attributeType String
  mandatory     String?
  optional      String?
  name          String?
  description   String?
  obsolete      Boolean  @default(false)
  entry_id      Int
  entry         Entry    @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())

  @@unique([entry_id, attributeType])
}

// FRIENDS ::= CLASS {
//   &anchor   ATTRIBUTE.&id UNIQUE,
//   &Friends  ATTRIBUTE }
// WITH SYNTAX {
//   ANCHOR    &anchor
//   FRIENDS   &Friends }
// Also satisfies FriendsDescription
model Friendship {
  id          Int      @id @default(autoincrement())
  anchor      String
  friends     String
  name        String?
  description String?
  obsolete    Boolean  @default(false)
  entry_id    Int
  entry       Entry    @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())

  @@unique([entry_id, anchor])
}

// MatchingRuleDescription ::= SEQUENCE {
//   identifier        MATCHING-RULE.&id,
//   name              SET SIZE (1..MAX) OF UnboundedDirectoryString OPTIONAL,
//   description       UnboundedDirectoryString OPTIONAL,
//   obsolete          BOOLEAN DEFAULT FALSE,
//   information  [0]  UnboundedDirectoryString OPTIONAL,
//                 -- describes the ASN.1 syntax
//   ... }
model MatchingRuleUse {
  id          Int      @id @default(autoincrement())
  identifier  String
  name        String?
  description String?
  obsolete    Boolean  @default(false)
  information String
  entry_id    Int
  entry       Entry    @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())

  @@unique([entry_id, identifier])
}

model AttributeTypeDescription {
  id              Int            @id @default(autoincrement())
  identifier      String
  name            String?
  description     String?
  obsolete        Boolean        @default(false)
  derivation      String?
  equalityMatch   String?
  orderingMatch   String?
  substringsMatch String?
  attributeSyntax String?
  multiValued     Boolean        @default(true)
  collective      Boolean        @default(false)
  userModifiable  Boolean        @default(true)
  application     String @default("USER_APPLICATIONS")

  // Fields not present in AttributeTypeDescription
  ldapSyntax      String?
  ldapNames       String?
  ldapDescription String?
  dummy           Boolean  @default(false)
  created_at      DateTime @default(now())

  // Why entry_id if attribute types are universal? So schema shadowed from
  // other DSAs does not overwrite this DSA's conception of the same schema objects.
  entry_id Int?
  entry    Entry? @relation(fields: [entry_id], references: [id], onDelete: Cascade)

  @@unique([entry_id, identifier])
}

model ObjectClassDescription {
  id              Int             @id @default(autoincrement())
  identifier      String
  name            String?
  description     String?
  obsolete        Boolean         @default(false)
  subclassOf      String?
  kind            String         @default("STRUCTURAL")
  mandatories     String?
  optionals       String?
  ldapNames       String?
  ldapDescription String?
  created_at      DateTime        @default(now())

  // Why entry_id if object classes are universal? So schema shadowed from
  // other DSAs does not overwrite this DSA's conception of the same schema objects.
  entry_id Int?
  entry    Entry? @relation(fields: [entry_id], references: [id], onDelete: Cascade)

  @@unique([entry_id, identifier])
}

model ContextDescription {
  id              Int      @id @default(autoincrement())
  identifier      String
  name            String?
  description     String?
  obsolete        Boolean  @default(false)
  syntax          String
  assertionSyntax String?
  created_at      DateTime @default(now())

  // For some reason, these are not present in the ASN.1 definition for
  // `ContextDescription`.
  absentMatch  Boolean @default(true)
  defaultValue Bytes?

  // Why entry_id if context types are universal? So schema shadowed from
  // other DSAs does not overwrite this DSA's conception of the same schema objects.
  entry_id Int?
  entry    Entry? @relation(fields: [entry_id], references: [id], onDelete: Cascade)

  @@unique([entry_id, identifier])
}

model OperationalBinding {
  id                 Int                         @id @default(autoincrement())
  entry_id           Int? // This is valuable for pointing to the CP of a shadowed context or HOB.
  entry              Entry?                      @relation(fields: [entry_id], references: [id], onDelete: Restrict)
  previous_id        Int? // For when an OB gets modified.
  previous           OperationalBinding?         @relation(name: "previous", fields: [previous_id], references: [id])
  outbound           Boolean
  uuid               String                      @default(uuid()) // @db.Uuid
  binding_type       String
  binding_identifier Int
  binding_version    Int
  agreement_ber      Bytes
  access_point_id    Int? // Made optional just so saveAccessPoint can be used.
  access_point       AccessPoint?                @relation("ob_access_point", fields: [access_point_id], references: [id])
  initiator          String
  initiator_ber      Bytes
  validity_start     DateTime
  validity_end       DateTime? // NULL means "until explicitly requested"

  // Security parameters
  security_certification_path Bytes?
  security_name               Bytes?
  security_time               DateTime?
  security_random             Bytes?
  security_target             Int?
  security_operationCode      String?
  security_errorProtection    Int?
  security_errorCode          String?

  // Hierarchical Operation Binding
  new_context_prefix_rdn Bytes?
  immediate_superior     Bytes?

  // Shadowing Operational Binding
  shadowed_context_prefix Bytes?
  knowledge_type          String?
  subordinates            Boolean?
  supply_contexts         String?
  supplier_initiated      Boolean?
  periodic_beginTime      DateTime?
  periodic_windowSize     Int?
  periodic_updateInterval Int?
  othertimes              Boolean?
  master_access_point_id  Int?
  master_access_point     AccessPoint?           @relation("ob_master", fields: [master_access_point_id], references: [id])
  secondary_shadows       Boolean?

  // Source information
  // This should be separate from the access point, because the IP used to
  // send the request or proxy the request could differ from the access point
  // of the originating DSA.
  source_ip               String? // @db.Inet
  source_tcp_port         Int?
  source_ae_title         Bytes?
  source_credentials_type Int? // 0 = simple, 1 = strong, 2 = external, 3 = spkm
  source_certificate_path Bytes?
  source_bind_token       Bytes?
  source_strong_name      Bytes?
  source_attr_cert_path   Bytes?

  // Status
  requested_time                  DateTime              @default(now())
  responded_time                  DateTime?
  terminated_time                 DateTime?
  accepted                        Boolean?
  last_update                     DateTime? // Should not be used. Use local_last_update and remote_last_update.
  last_ob_problem                 Int?
  last_shadow_problem             Int?
  local_last_update               DateTime? // Time this DSA thinks the last shadow update was
  remote_last_update              DateTime? // Time the remote DSA thinks the last shadow update was. If this DSA is the supplier, this is populated from the requestShadowUpdate.
  requested_strategy              String?
  requested_strategy_external_ber Bytes?

  next_version OperationalBinding[] @relation("previous")

  @@unique([uuid])
  @@index([binding_type, binding_identifier, binding_version, terminated_time])
  @@index([validity_end, validity_start])
  @@index([entry_id])
  @@index([previous_id])
}

model NamedObjectIdentifier {
  id   Int    @id @default(autoincrement())
  oid  String
  name String

  @@unique([oid])
  @@index([name])
}

model DistinguishedValue {
  id             Int  @id @default(autoincrement())
  entry_id       Int
  entry          Entry   @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  type_oid       Bytes // BinaryOID
  tag_class      Int
  constructed    Boolean
  tag_number     Int
  content_octets Bytes
  normalized_str String?
  order_index    Int

  @@unique([entry_id, type_oid])
  // I'm not sure if the entry_id really belongs in the index, but
  @@unique([type_oid, normalized_str, entry_id])
}

model EntryObjectClass {
  id           Int   @id @default(autoincrement())
  entry_id     Int
  entry        Entry    @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  object_class String
  created_at   DateTime @default(now())

  @@unique([entry_id, object_class])
  @@index([object_class, entry_id])
}

model Alias {
  id                 Int      @id @default(autoincrement())
  alias_entry_id     Int
  alias_entry        Entry    @relation(name: "alias_entry", fields: [alias_entry_id], references: [id], onDelete: Cascade)
  aliased_entry_id   Int?     @unique
  aliased_entry      Entry?   @relation(name: "aliased_entry", fields: [aliased_entry_id], references: [id], onDelete: SetNull)
  aliased_entry_name Bytes?
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now()) @updatedAt

  @@unique([alias_entry_id])
  @@index([aliased_entry_id])
}

model EntryAttributeValuesIncomplete {
  id             Int    @id @default(autoincrement())
  entry_id       Int
  entry          Entry  @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  attribute_type String // OID

  @@unique([entry_id, attribute_type])
}

model AltServer {
  id  Int    @id @default(autoincrement())
  uri String
}

// To help with future migrations. This is so Meerkat DSA can do migrations
// without Prisma (such as by refreshing sort keys, materialized paths, etc.)
model InstalledVersions {
  id                 Int      @id @default(autoincrement())
  installedTimestamp DateTime @default(now())
  version            String
  migration_problems String?

  @@index([version])
}

// To save, sort, and paginate over a large number of search results.
model EnqueuedSearchResult {
  id              Int    @id @default(autoincrement())
  connection_uuid String
  query_ref       String
  result_index    Int // The 0-based index in which this entry appears in the results.
  entry_id        Int?
  entry           Entry? @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  entry_info      Bytes // BER-encoded EntryInformation

  @@unique([connection_uuid, query_ref, result_index])
}

// To save, sort, and paginate over a large number of list results.
model EnqueuedListResult {
  id               Int    @id @default(autoincrement())
  connection_uuid  String // UUID of the connection.
  query_ref        String // Could be a pagination UUID or something else.
  result_index     Int // The 0-based index in which this entry appears in the results.
  entry_id         Int?
  entry            Entry? @relation(fields: [entry_id], references: [id], onDelete: Cascade)
  subordinate_info Bytes // BER-encoded ListResultData.listInfo.subordinates[#]

  @@unique([connection_uuid, query_ref, result_index])
}

model AccessPointCredentials {
  id                                        Int         @id @default(autoincrement())
  uuid                                      String      @default(uuid()) // @db.Uuid
  created_at                                DateTime    @default(now())
  updated_at                                DateTime    @default(now()) @updatedAt
  access_point_id                           Int
  access_point                              AccessPoint @relation(fields: [access_point_id], references: [id], onDelete: Cascade)
  simple_name                               Bytes?
  simple_password_unprotected               Bytes?
  simple_password_hash_value                Bytes?
  simple_password_hash_algorithm_oid        String? // OID
  simple_password_hash_algorithm_parameters Bytes? // DER-encoded ASN.1 element
  strong_pkcs12                             Bytes? // The contents of the PFX / PKCS #12 file used to produce StrongCredentials.
  mtls_client_pkcs12                        Bytes? // The contents of the PFX / PKCS #12 file used to perform mTLS auth.

  @@unique([uuid])
}

// Zonal Matching Tables

model PostalCodesGazetteEntry {
  id                       Int                        @id @default(autoincrement())
  c2c                      String
  st                       String
  locality                 String
  postal_code              String
  PostalCodeBoundaryPoints PostalCodeBoundaryPoints[]

  @@unique([c2c, st, locality, postal_code])
}

model PostalCodeBoundaryPoints {
  id             Int                     @id @default(autoincrement())
  postal_code_id Int
  postal_code    PostalCodesGazetteEntry @relation(fields: [postal_code_id], references: [id])
  northing       Int // in meters
  easting        Int // in meters

  @@index([postal_code_id])
}

// Pending incremental updates to be replicated to shadow consumers
model PendingShadowIncrementalStepRefresh {
  id                 Int                 @id @default(autoincrement())
  binding_identifier Int // The binding identifier of the applicable shadow operational binding
  time               DateTime            @default(now()) // The time the original supplier-side change was made.
  ber                Bytes // BER-encoded IncrementalStepRefresh.
  submitted          Boolean             @default(false) // Whether the updateShadow was sent containing this step.
  acknowledged       Boolean             @default(false) // Whether the updateShadow containing this step received a result.
  rename             Boolean             @default(false) // Whether the step renamed a shadowed DSE.
  type               String

  @@index([binding_identifier, time])
}
